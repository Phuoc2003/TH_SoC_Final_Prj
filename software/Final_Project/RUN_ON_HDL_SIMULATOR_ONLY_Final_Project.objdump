
RUN_ON_HDL_SIMULATOR_ONLY_Final_Project.elf:     file format elf32-littlenios2
RUN_ON_HDL_SIMULATOR_ONLY_Final_Project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000085d4 memsz 0x000085d4 flags r-x
    LOAD off    0x000095f4 vaddr 0x000285f4 paddr 0x00028924 align 2**12
         filesz 0x00000330 memsz 0x00000330 flags rw-
    LOAD off    0x00009c54 vaddr 0x00028c54 paddr 0x00028c54 align 2**12
         filesz 0x00000000 memsz 0x00000524 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005b00  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000028c4  00025d30  00025d30  00006d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000330  000285f4  00028924  000095f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000524  00028c54  00028c54  00009c54  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00029178  00029178  00009924  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009924  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000720  00000000  00000000  00009948  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b045  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003657  00000000  00000000  000150ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004139  00000000  00000000  00018704  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000015f4  00000000  00000000  0001c840  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c47  00000000  00000000  0001de34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001745  00000000  00000000  00020a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002e8  00000000  00000000  000221c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00024aaa  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00024aad  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00024ab9  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00024aba  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00024abb  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00024ac6  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00024ad1  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000006  00000000  00000000  00024adc  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000026  00000000  00000000  00024ae2  2**0
                  CONTENTS, READONLY
 25 .jdi          000062da  00000000  00000000  00024b08  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0003270d  00000000  00000000  0002ade2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00025d30 l    d  .rodata	00000000 .rodata
000285f4 l    d  .rwdata	00000000 .rwdata
00028c54 l    d  .bss	00000000 .bss
00029178 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Final_Project_bsp//obj/HAL/src/crt0.o
00020248 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 SH1106.c
00028c78 l     O .bss	00000400 SH1106_Buffer
00028c54 l     O .bss	00000006 SH1106
00000000 l    df *ABS*	00000000 fonts.c
00000000 l    df *ABS*	00000000 source.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00021f14 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000285f4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
0002278c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000228f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00022a30 l     F .text	00000034 alt_dev_reg
000286d4 l     O .rwdata	00000038 i2c_0
0002870c l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00022adc l     F .text	00000110 optional_irq_callback
00022c3c l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00024958 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00024a8c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00024ab8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00024fa8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00025108 l     F .text	0000003c alt_get_errno
00025144 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00028c74 g     O .bss	00000004 alt_instruction_exception_handler
00022878 g     F .text	0000007c alt_main
00021e64 g     F .text	00000080 _puts_r
00029078 g     O .bss	00000100 alt_irq
000208fc g     F .text	000000b8 SH1106_Puts
00028924 g       *ABS*	00000000 __flash_rwdata_start
00021e18 g     F .text	0000004c printf
00023334 g     F .text	000000a8 alt_avalon_i2c_rx_read
0002454c g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
000230b8 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00023d9c g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00021970 g     F .text	000000cc SH1106_I2C_WriteMulti
00025678 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00021b0c g     F .text	00000164 SH1106_DrawBitmap
00020020 g       *ABS*	00000000 __flash_exceptions_start
000209b4 g     F .text	00000320 SH1106_DrawLine
00021ab4 g     F .text	00000058 SH1106_InvertDisplay
00028c60 g     O .bss	00000004 errno
00021918 g     F .text	00000058 SH1106_OFF
00028c68 g     O .bss	00000004 alt_argv
00021cec g     F .text	00000058 I2C0_Init
000308e0 g       *ABS*	00000000 _gp
00024590 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00023248 g     F .text	00000044 alt_avalon_i2c_is_busy
00028760 g     O .rwdata	00000180 alt_fd_list
00020cd4 g     F .text	00000190 SH1106_DrawRectangle
00022fec g     F .text	000000cc alt_avalon_i2c_master_config_set
00024c58 g     F .text	00000090 alt_find_dev
000288f0 g     O .rwdata	00000008 Font_16x26
0002508c g     F .text	0000007c alt_io_redirect
00025d30 g       *ABS*	00000000 __DTOR_END__
00023bdc g     F .text	000001c0 alt_avalon_i2c_master_transmit
00021ee4 g     F .text	00000014 puts
00025868 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000247b4 g     F .text	000000ec altera_avalon_jtag_uart_read
00021ddc g     F .text	0000003c _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000226d0 g     F .text	00000064 .hidden __udivsi3
00022e58 g     F .text	00000098 alt_avalon_i2c_enable
00024480 g     F .text	00000068 alt_avalon_i2c_int_disable
00028918 g     O .rwdata	00000004 alt_max_fd
00023fa8 g     F .text	00000210 alt_avalon_i2c_master_receive
000244e8 g     F .text	00000064 alt_avalon_i2c_int_enable
000288f8 g     O .rwdata	00000004 _global_impure_ptr
0002649c g     O .rodata	00000d5c Font11x18
00029178 g       *ABS*	00000000 __bss_end
00024eb8 g     F .text	000000f0 alt_iic_isr_register
00020e64 g     F .text	00000114 SH1106_DrawFilledRectangle
000243a8 g     F .text	00000058 alt_avalon_i2c_int_status_get
00024e6c g     F .text	0000004c alt_ic_irq_enabled
00022cd8 g     F .text	00000054 alt_avalon_i2c_register_callback
00028c70 g     O .bss	00000004 alt_irq_active
00022d2c g     F .text	000000ec alt_avalon_i2c_init
000200fc g     F .exceptions	000000d4 alt_irq_handler
00028738 g     O .rwdata	00000028 alt_dev_null
000218c0 g     F .text	00000058 SH1106_ON
00024a6c g     F .text	00000020 alt_dcache_flush_all
00028924 g       *ABS*	00000000 __ram_rwdata_end
00028910 g     O .rwdata	00000008 alt_dev_list
00022930 g     F .text	00000100 write
000259bc g     F .text	00000058 _putc_r
00023668 g     F .text	0000004c alt_avalon_i2c_check_arblost
00024444 g     F .text	0000003c alt_avalon_i2c_int_clear
000285f4 g       *ABS*	00000000 __ram_rodata_end
00028900 g     O .rwdata	00000008 alt_avalon_i2c_list
0002055c g     F .text	00000054 SH1106_Fill
00022734 g     F .text	00000058 .hidden __umodsi3
00021a3c g     F .text	00000078 SH1106_I2C_Write
00029178 g       *ABS*	00000000 end
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00022e18 g     F .text	00000040 alt_avalon_i2c_open
00025d30 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
000237f0 g     F .text	000000e8 alt_avalon_i2c_master_tx
000248a0 g     F .text	00000094 altera_avalon_jtag_uart_write
00021f80 g     F .text	0000052c ___vfprintf_internal_r
0002538c g     F .text	0000022c alt_printf
00025b6c g     F .text	00000190 __call_exitprocs
00022bec g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00020230 g     F .text	0000001c _start
000241b8 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
000245dc g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00022a9c g     F .text	00000040 alt_sys_init
00025a14 g     F .text	00000158 __register_exitproc
00023a14 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00021590 g     F .text	000002fc SH1106_DrawFilledCircle
00021d94 g     F .text	00000028 .hidden __mulsi3
000285f4 g       *ABS*	00000000 __ram_rwdata_start
00025d30 g       *ABS*	00000000 __ram_rodata_start
00020700 g     F .text	00000040 SH1106_GotoXY
000246f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000257a4 g     F .text	000000c4 alt_get_fd
00024934 g     F .text	00000024 alt_busy_sleep
00025938 g     F .text	00000030 memcmp
0002328c g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00029178 g       *ABS*	00000000 __alt_stack_base
00028c5c g     O .bss	00000004 i2c_dev
0002024c g     F .text	000001e4 SH1106_Init
0002569c g     F .text	00000108 alt_find_file
00025d30 g     O .rodata	0000076c Font7x10
00024af4 g     F .text	000000a4 alt_dev_llist_insert
000236b4 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0002361c g     F .text	0000004c alt_avalon_i2c_check_nack
000224c8 g     F .text	000000b8 __sfvwrite_small_dev
00028c54 g       *ABS*	00000000 __bss_start
00021dbc g     F .text	00000020 memset
00021d44 g     F .text	00000050 main
000235e8 g     F .text	00000034 alt_avalon_i2c_master_target_set
00028c6c g     O .bss	00000004 alt_envp
00024754 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00024400 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00021054 g     F .text	00000264 SH1106_DrawFilledTriangle
0002891c g     O .rwdata	00000004 alt_errno
00025968 g     F .text	00000054 putc
000225d8 g     F .text	00000084 .hidden __divsi3
00020430 g     F .text	000000ac SH1106_UpdateScreen
00025d30 g       *ABS*	00000000 __CTOR_END__
00025d30 g       *ABS*	00000000 __flash_rodata_start
00025d30 g       *ABS*	00000000 __DTOR_LIST__
00020f78 g     F .text	000000dc SH1106_DrawTriangle
00022a64 g     F .text	00000038 alt_irq_init
000255f4 g     F .text	00000084 alt_release_fd
00025904 g     F .text	00000014 atexit
00022580 g     F .text	00000058 _write_r
000288fc g     O .rwdata	00000004 _impure_ptr
00028c64 g     O .bss	00000004 alt_argc
00024bf8 g     F .text	00000060 _do_dtors
000235b0 g     F .text	00000038 alt_avalon_i2c_master_target_get
000234c0 g     F .text	000000f0 alt_avalon_i2c_send_address
00020020 g       .exceptions	00000000 alt_irq_entry
000288e0 g     O .rwdata	00000008 Font_7x10
00028908 g     O .rwdata	00000008 alt_fs_list
0002188c g     F .text	00000034 SH1106_Clear
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002468c g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00024d08 g     F .text	00000050 alt_ic_isr_register
00022ef0 g     F .text	0000004c alt_avalon_i2c_disable
00028924 g       *ABS*	00000000 _edata
00029178 g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
000271f8 g     O .rodata	0000134c Font16x26
00022f3c g     F .text	000000b0 alt_avalon_i2c_master_config_get
000212b8 g     F .text	000002d8 SH1106_DrawCircle
00024de0 g     F .text	0000008c alt_ic_irq_disable
00025918 g     F .text	00000020 exit
000204dc g     F .text	00000080 SH1106_ToggleInvert
0002265c g     F .text	00000074 .hidden __modsi3
000288e8 g     O .rwdata	00000008 Font_11x18
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0002314c g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
000233dc g     F .text	000000e4 alt_avalon_i2c_cmd_write
00021c70 g     F .text	0000007c FONTS_GetStringSize
00025cfc g     F .text	00000034 _exit
00020740 g     F .text	000001bc SH1106_Putc
00021ef8 g     F .text	0000001c strlen
00025230 g     F .text	0000015c open
000255b8 g     F .text	0000003c alt_putchar
00024ce8 g     F .text	00000020 alt_icache_flush_all
000205b0 g     F .text	00000150 SH1106_DrawPixel
00028920 g     O .rwdata	00000004 alt_priority_mask
00024d58 g     F .text	00000088 alt_ic_irq_enable
000224ac g     F .text	0000001c __vfprintf_internal
00024b98 g     F .text	00000060 _do_ctors
00024994 g     F .text	000000d8 close
00024640 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
000227f4 g     F .text	00000084 alt_load
000238d8 g     F .text	0000013c alt_avalon_i2c_master_rx



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10a41e04 	addi	r2,r2,-28552
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10a41e04 	addi	r2,r2,-28552
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a0e517 	ldw	r2,-31852(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a0e517 	ldw	r2,-31852(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2023c:	d6823814 	ori	gp,gp,2272
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20240:	00227f40 	call	227f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20244:	00228780 	call	22878 <alt_main>

00020248 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20248:	003fff06 	br	20248 <__alt_data_end+0xfffe0248>

0002024c <SH1106_Init>:
static SH1106_t SH1106;

#define SH1106_NORMALDISPLAY       0xA6
#define SH1106_INVERTDISPLAY       0xA7

uint8_t  SH1106_Init(void) {
   2024c:	defffd04 	addi	sp,sp,-12
   20250:	dfc00215 	stw	ra,8(sp)
   20254:	df000115 	stw	fp,4(sp)
   20258:	df000104 	addi	fp,sp,4
//		if (NULL==SH1106_I2C)  {
//			printf("Error: Cannot find /dev/i2c_0\n");
//			return;
//		}
//		printf("Successfully open I2C");
	alt_avalon_i2c_master_target_set(SH1106_I2C,SH1106_I2C_ADDR);
   2025c:	d0a0df17 	ldw	r2,-31876(gp)
   20260:	01400f04 	movi	r5,60
   20264:	1009883a 	mov	r4,r2
   20268:	00235e80 	call	235e8 <alt_avalon_i2c_master_target_set>

	/* A little delay */
	uint32_t p = 2500;
   2026c:	00827104 	movi	r2,2500
   20270:	e0bfff15 	stw	r2,-4(fp)
	while(p>0)
   20274:	00000306 	br	20284 <SH1106_Init+0x38>
		p--;
   20278:	e0bfff17 	ldw	r2,-4(fp)
   2027c:	10bfffc4 	addi	r2,r2,-1
   20280:	e0bfff15 	stw	r2,-4(fp)
//		printf("Successfully open I2C");
	alt_avalon_i2c_master_target_set(SH1106_I2C,SH1106_I2C_ADDR);

	/* A little delay */
	uint32_t p = 2500;
	while(p>0)
   20284:	e0bfff17 	ldw	r2,-4(fp)
   20288:	103ffb1e 	bne	r2,zero,20278 <__alt_data_end+0xfffe0278>
		p--;

	  // Initialize the display
	SH1106_WRITECOMMAND(0xAE); //display off
   2028c:	01802b84 	movi	r6,174
   20290:	000b883a 	mov	r5,zero
   20294:	01000f04 	movi	r4,60
   20298:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xB0|0x00); //Set Page Start Address for Page Addressing Mode,0-7
   2029c:	01802c04 	movi	r6,176
   202a0:	000b883a 	mov	r5,zero
   202a4:	01000f04 	movi	r4,60
   202a8:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x81); //--set contrast control register
   202ac:	01802044 	movi	r6,129
   202b0:	000b883a 	mov	r5,zero
   202b4:	01000f04 	movi	r4,60
   202b8:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xFF); // contrast value
   202bc:	01803fc4 	movi	r6,255
   202c0:	000b883a 	mov	r5,zero
   202c4:	01000f04 	movi	r4,60
   202c8:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
   202cc:	01802844 	movi	r6,161
   202d0:	000b883a 	mov	r5,zero
   202d4:	01000f04 	movi	r4,60
   202d8:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA6); //--set normal display
   202dc:	01802984 	movi	r6,166
   202e0:	000b883a 	mov	r5,zero
   202e4:	01000f04 	movi	r4,60
   202e8:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
   202ec:	01802a04 	movi	r6,168
   202f0:	000b883a 	mov	r5,zero
   202f4:	01000f04 	movi	r4,60
   202f8:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x3F); // multiplex value
   202fc:	01800fc4 	movi	r6,63
   20300:	000b883a 	mov	r5,zero
   20304:	01000f04 	movi	r4,60
   20308:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAD); // Set Pump Mode
   2030c:	01802b44 	movi	r6,173
   20310:	000b883a 	mov	r5,zero
   20314:	01000f04 	movi	r4,60
   20318:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x8B); // Pump ON
   2031c:	018022c4 	movi	r6,139
   20320:	000b883a 	mov	r5,zero
   20324:	01000f04 	movi	r4,60
   20328:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x30|0x02); // Set Pump Voltage 8.0
   2032c:	01800c84 	movi	r6,50
   20330:	000b883a 	mov	r5,zero
   20334:	01000f04 	movi	r4,60
   20338:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
   2033c:	01803204 	movi	r6,200
   20340:	000b883a 	mov	r5,zero
   20344:	01000f04 	movi	r4,60
   20348:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD3); //-set display offset
   2034c:	018034c4 	movi	r6,211
   20350:	000b883a 	mov	r5,zero
   20354:	01000f04 	movi	r4,60
   20358:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x00); //-not offset
   2035c:	000d883a 	mov	r6,zero
   20360:	000b883a 	mov	r5,zero
   20364:	01000f04 	movi	r4,60
   20368:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
   2036c:	01803544 	movi	r6,213
   20370:	000b883a 	mov	r5,zero
   20374:	01000f04 	movi	r4,60
   20378:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x80); //--set divide ratio
   2037c:	01802004 	movi	r6,128
   20380:	000b883a 	mov	r5,zero
   20384:	01000f04 	movi	r4,60
   20388:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD9); //--set pre-charge period
   2038c:	01803644 	movi	r6,217
   20390:	000b883a 	mov	r5,zero
   20394:	01000f04 	movi	r4,60
   20398:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x1F); //
   2039c:	018007c4 	movi	r6,31
   203a0:	000b883a 	mov	r5,zero
   203a4:	01000f04 	movi	r4,60
   203a8:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDA); //--set com pins hardware configuration
   203ac:	01803684 	movi	r6,218
   203b0:	000b883a 	mov	r5,zero
   203b4:	01000f04 	movi	r4,60
   203b8:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x12);
   203bc:	01800484 	movi	r6,18
   203c0:	000b883a 	mov	r5,zero
   203c4:	01000f04 	movi	r4,60
   203c8:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDB); //--set vcomh
   203cc:	018036c4 	movi	r6,219
   203d0:	000b883a 	mov	r5,zero
   203d4:	01000f04 	movi	r4,60
   203d8:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x40); //
   203dc:	01801004 	movi	r6,64
   203e0:	000b883a 	mov	r5,zero
   203e4:	01000f04 	movi	r4,60
   203e8:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAF); //--turn on SH1106 panel
   203ec:	01802bc4 	movi	r6,175
   203f0:	000b883a 	mov	r5,zero
   203f4:	01000f04 	movi	r4,60
   203f8:	0021a3c0 	call	21a3c <SH1106_I2C_Write>


	/* Clear screen */
	SH1106_Fill(SH1106_COLOR_BLACK);
   203fc:	0009883a 	mov	r4,zero
   20400:	002055c0 	call	2055c <SH1106_Fill>

	/* Update screen */
	SH1106_UpdateScreen();
   20404:	00204300 	call	20430 <SH1106_UpdateScreen>

	/* Set default values */
	SH1106.CurrentX = 0;
   20408:	d020dd0d 	sth	zero,-31884(gp)
	SH1106.CurrentY = 0;
   2040c:	d020dd8d 	sth	zero,-31882(gp)

	/* Initialized OK */
	SH1106.Initialized = 1;
   20410:	00800044 	movi	r2,1
   20414:	d0a0de45 	stb	r2,-31879(gp)

	/* Return OK */
	return 1;
   20418:	00800044 	movi	r2,1
}
   2041c:	e037883a 	mov	sp,fp
   20420:	dfc00117 	ldw	ra,4(sp)
   20424:	df000017 	ldw	fp,0(sp)
   20428:	dec00204 	addi	sp,sp,8
   2042c:	f800283a 	ret

00020430 <SH1106_UpdateScreen>:

void SH1106_UpdateScreen(void) {
   20430:	defffd04 	addi	sp,sp,-12
   20434:	dfc00215 	stw	ra,8(sp)
   20438:	df000115 	stw	fp,4(sp)
   2043c:	df000104 	addi	fp,sp,4
	uint8_t m;

	for (m = 0; m < 8; m++) {
   20440:	e03fff05 	stb	zero,-4(fp)
   20444:	00001c06 	br	204b8 <SH1106_UpdateScreen+0x88>
		SH1106_WRITECOMMAND(0xB0 + m);
   20448:	e0bfff03 	ldbu	r2,-4(fp)
   2044c:	10bfec04 	addi	r2,r2,-80
   20450:	10803fcc 	andi	r2,r2,255
   20454:	100d883a 	mov	r6,r2
   20458:	000b883a 	mov	r5,zero
   2045c:	01000f04 	movi	r4,60
   20460:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x00);
   20464:	000d883a 	mov	r6,zero
   20468:	000b883a 	mov	r5,zero
   2046c:	01000f04 	movi	r4,60
   20470:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x10);
   20474:	01800404 	movi	r6,16
   20478:	000b883a 	mov	r5,zero
   2047c:	01000f04 	movi	r4,60
   20480:	0021a3c0 	call	21a3c <SH1106_I2C_Write>

		/* Write multi data */
		SH1106_I2C_WriteMulti(SH1106_I2C_ADDR, 0x40, &SH1106_Buffer[SH1106_WIDTH * m], SH1106_WIDTH);
   20484:	e0bfff03 	ldbu	r2,-4(fp)
   20488:	100691fa 	slli	r3,r2,7
   2048c:	008000f4 	movhi	r2,3
   20490:	10a31e04 	addi	r2,r2,-29576
   20494:	1885883a 	add	r2,r3,r2
   20498:	01c02004 	movi	r7,128
   2049c:	100d883a 	mov	r6,r2
   204a0:	01401004 	movi	r5,64
   204a4:	01000f04 	movi	r4,60
   204a8:	00219700 	call	21970 <SH1106_I2C_WriteMulti>
}

void SH1106_UpdateScreen(void) {
	uint8_t m;

	for (m = 0; m < 8; m++) {
   204ac:	e0bfff03 	ldbu	r2,-4(fp)
   204b0:	10800044 	addi	r2,r2,1
   204b4:	e0bfff05 	stb	r2,-4(fp)
   204b8:	e0bfff03 	ldbu	r2,-4(fp)
   204bc:	10800230 	cmpltui	r2,r2,8
   204c0:	103fe11e 	bne	r2,zero,20448 <__alt_data_end+0xfffe0448>
		SH1106_WRITECOMMAND(0x10);

		/* Write multi data */
		SH1106_I2C_WriteMulti(SH1106_I2C_ADDR, 0x40, &SH1106_Buffer[SH1106_WIDTH * m], SH1106_WIDTH);
	}
}
   204c4:	0001883a 	nop
   204c8:	e037883a 	mov	sp,fp
   204cc:	dfc00117 	ldw	ra,4(sp)
   204d0:	df000017 	ldw	fp,0(sp)
   204d4:	dec00204 	addi	sp,sp,8
   204d8:	f800283a 	ret

000204dc <SH1106_ToggleInvert>:

void SH1106_ToggleInvert(void) {
   204dc:	defffe04 	addi	sp,sp,-8
   204e0:	df000115 	stw	fp,4(sp)
   204e4:	df000104 	addi	fp,sp,4
	uint16_t i;

	/* Toggle invert */
	SH1106.Inverted = !SH1106.Inverted;
   204e8:	d0a0de03 	ldbu	r2,-31880(gp)
   204ec:	10803fcc 	andi	r2,r2,255
   204f0:	1005003a 	cmpeq	r2,r2,zero
   204f4:	d0a0de05 	stb	r2,-31880(gp)

	/* Do memory toggle */
	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
   204f8:	e03fff0d 	sth	zero,-4(fp)
   204fc:	00000f06 	br	2053c <SH1106_ToggleInvert+0x60>
		SH1106_Buffer[i] = ~SH1106_Buffer[i];
   20500:	e0ffff0b 	ldhu	r3,-4(fp)
   20504:	e13fff0b 	ldhu	r4,-4(fp)
   20508:	008000f4 	movhi	r2,3
   2050c:	10a31e04 	addi	r2,r2,-29576
   20510:	1105883a 	add	r2,r2,r4
   20514:	10800003 	ldbu	r2,0(r2)
   20518:	0084303a 	nor	r2,zero,r2
   2051c:	1009883a 	mov	r4,r2
   20520:	008000f4 	movhi	r2,3
   20524:	10a31e04 	addi	r2,r2,-29576
   20528:	10c5883a 	add	r2,r2,r3
   2052c:	11000005 	stb	r4,0(r2)

	/* Toggle invert */
	SH1106.Inverted = !SH1106.Inverted;

	/* Do memory toggle */
	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
   20530:	e0bfff0b 	ldhu	r2,-4(fp)
   20534:	10800044 	addi	r2,r2,1
   20538:	e0bfff0d 	sth	r2,-4(fp)
   2053c:	e0bfff0b 	ldhu	r2,-4(fp)
   20540:	10810030 	cmpltui	r2,r2,1024
   20544:	103fee1e 	bne	r2,zero,20500 <__alt_data_end+0xfffe0500>
		SH1106_Buffer[i] = ~SH1106_Buffer[i];
	}
}
   20548:	0001883a 	nop
   2054c:	e037883a 	mov	sp,fp
   20550:	df000017 	ldw	fp,0(sp)
   20554:	dec00104 	addi	sp,sp,4
   20558:	f800283a 	ret

0002055c <SH1106_Fill>:

void SH1106_Fill(SH1106_COLOR_t color) {
   2055c:	defffd04 	addi	sp,sp,-12
   20560:	dfc00215 	stw	ra,8(sp)
   20564:	df000115 	stw	fp,4(sp)
   20568:	df000104 	addi	fp,sp,4
   2056c:	e13fff15 	stw	r4,-4(fp)
	/* Set memory */
	memset(SH1106_Buffer, (color == SH1106_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SH1106_Buffer));
   20570:	e0bfff17 	ldw	r2,-4(fp)
   20574:	1000021e 	bne	r2,zero,20580 <SH1106_Fill+0x24>
   20578:	0005883a 	mov	r2,zero
   2057c:	00000106 	br	20584 <SH1106_Fill+0x28>
   20580:	00803fc4 	movi	r2,255
   20584:	01810004 	movi	r6,1024
   20588:	100b883a 	mov	r5,r2
   2058c:	010000f4 	movhi	r4,3
   20590:	21231e04 	addi	r4,r4,-29576
   20594:	0021dbc0 	call	21dbc <memset>
}
   20598:	0001883a 	nop
   2059c:	e037883a 	mov	sp,fp
   205a0:	dfc00117 	ldw	ra,4(sp)
   205a4:	df000017 	ldw	fp,0(sp)
   205a8:	dec00204 	addi	sp,sp,8
   205ac:	f800283a 	ret

000205b0 <SH1106_DrawPixel>:

void SH1106_DrawPixel(uint16_t x, uint16_t y, SH1106_COLOR_t color) {
   205b0:	defffc04 	addi	sp,sp,-16
   205b4:	df000315 	stw	fp,12(sp)
   205b8:	df000304 	addi	fp,sp,12
   205bc:	2007883a 	mov	r3,r4
   205c0:	2805883a 	mov	r2,r5
   205c4:	e1bfff15 	stw	r6,-4(fp)
   205c8:	e0fffd0d 	sth	r3,-12(fp)
   205cc:	e0bffe0d 	sth	r2,-8(fp)
	if (
   205d0:	e0bffd0b 	ldhu	r2,-12(fp)
   205d4:	10802028 	cmpgeui	r2,r2,128
   205d8:	1000441e 	bne	r2,zero,206ec <SH1106_DrawPixel+0x13c>
		x >= SH1106_WIDTH ||
   205dc:	e0bffe0b 	ldhu	r2,-8(fp)
   205e0:	10801030 	cmpltui	r2,r2,64
   205e4:	10004126 	beq	r2,zero,206ec <SH1106_DrawPixel+0x13c>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SH1106.Inverted) {
   205e8:	d0a0de03 	ldbu	r2,-31880(gp)
   205ec:	10803fcc 	andi	r2,r2,255
   205f0:	10000426 	beq	r2,zero,20604 <SH1106_DrawPixel+0x54>
		color = (SH1106_COLOR_t)!color;
   205f4:	e0bfff17 	ldw	r2,-4(fp)
   205f8:	1005003a 	cmpeq	r2,r2,zero
   205fc:	10803fcc 	andi	r2,r2,255
   20600:	e0bfff15 	stw	r2,-4(fp)
	}

	/* Set color */
	if (color == SH1106_COLOR_WHITE) {
   20604:	e0bfff17 	ldw	r2,-4(fp)
   20608:	10800058 	cmpnei	r2,r2,1
   2060c:	10001b1e 	bne	r2,zero,2067c <SH1106_DrawPixel+0xcc>
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= 1 << (y % 8);
   20610:	e0fffd0b 	ldhu	r3,-12(fp)
   20614:	e0bffe0b 	ldhu	r2,-8(fp)
   20618:	1004d0fa 	srli	r2,r2,3
   2061c:	100b883a 	mov	r5,r2
   20620:	28bfffcc 	andi	r2,r5,65535
   20624:	100491fa 	slli	r2,r2,7
   20628:	1887883a 	add	r3,r3,r2
   2062c:	e13ffd0b 	ldhu	r4,-12(fp)
   20630:	28bfffcc 	andi	r2,r5,65535
   20634:	100491fa 	slli	r2,r2,7
   20638:	2089883a 	add	r4,r4,r2
   2063c:	008000f4 	movhi	r2,3
   20640:	10a31e04 	addi	r2,r2,-29576
   20644:	1105883a 	add	r2,r2,r4
   20648:	10800003 	ldbu	r2,0(r2)
   2064c:	100b883a 	mov	r5,r2
   20650:	e0bffe0b 	ldhu	r2,-8(fp)
   20654:	108001cc 	andi	r2,r2,7
   20658:	01000044 	movi	r4,1
   2065c:	2084983a 	sll	r2,r4,r2
   20660:	2884b03a 	or	r2,r5,r2
   20664:	1009883a 	mov	r4,r2
   20668:	008000f4 	movhi	r2,3
   2066c:	10a31e04 	addi	r2,r2,-29576
   20670:	10c5883a 	add	r2,r2,r3
   20674:	11000005 	stb	r4,0(r2)
   20678:	00001d06 	br	206f0 <SH1106_DrawPixel+0x140>
	} else {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
   2067c:	e0fffd0b 	ldhu	r3,-12(fp)
   20680:	e0bffe0b 	ldhu	r2,-8(fp)
   20684:	1004d0fa 	srli	r2,r2,3
   20688:	100b883a 	mov	r5,r2
   2068c:	28bfffcc 	andi	r2,r5,65535
   20690:	100491fa 	slli	r2,r2,7
   20694:	1887883a 	add	r3,r3,r2
   20698:	e13ffd0b 	ldhu	r4,-12(fp)
   2069c:	28bfffcc 	andi	r2,r5,65535
   206a0:	100491fa 	slli	r2,r2,7
   206a4:	2089883a 	add	r4,r4,r2
   206a8:	008000f4 	movhi	r2,3
   206ac:	10a31e04 	addi	r2,r2,-29576
   206b0:	1105883a 	add	r2,r2,r4
   206b4:	10800003 	ldbu	r2,0(r2)
   206b8:	100b883a 	mov	r5,r2
   206bc:	e0bffe0b 	ldhu	r2,-8(fp)
   206c0:	108001cc 	andi	r2,r2,7
   206c4:	01000044 	movi	r4,1
   206c8:	2084983a 	sll	r2,r4,r2
   206cc:	0084303a 	nor	r2,zero,r2
   206d0:	2884703a 	and	r2,r5,r2
   206d4:	1009883a 	mov	r4,r2
   206d8:	008000f4 	movhi	r2,3
   206dc:	10a31e04 	addi	r2,r2,-29576
   206e0:	10c5883a 	add	r2,r2,r3
   206e4:	11000005 	stb	r4,0(r2)
   206e8:	00000106 	br	206f0 <SH1106_DrawPixel+0x140>
	if (
		x >= SH1106_WIDTH ||
		y >= SH1106_HEIGHT
	) {
		/* Error */
		return;
   206ec:	0001883a 	nop
	if (color == SH1106_COLOR_WHITE) {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= 1 << (y % 8);
	} else {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
	}
}
   206f0:	e037883a 	mov	sp,fp
   206f4:	df000017 	ldw	fp,0(sp)
   206f8:	dec00104 	addi	sp,sp,4
   206fc:	f800283a 	ret

00020700 <SH1106_GotoXY>:

void SH1106_GotoXY(uint16_t x, uint16_t y) {
   20700:	defffd04 	addi	sp,sp,-12
   20704:	df000215 	stw	fp,8(sp)
   20708:	df000204 	addi	fp,sp,8
   2070c:	2007883a 	mov	r3,r4
   20710:	2805883a 	mov	r2,r5
   20714:	e0fffe0d 	sth	r3,-8(fp)
   20718:	e0bfff0d 	sth	r2,-4(fp)
	/* Set write pointers */
	SH1106.CurrentX = x;
   2071c:	e0bffe0b 	ldhu	r2,-8(fp)
   20720:	d0a0dd0d 	sth	r2,-31884(gp)
	SH1106.CurrentY = y;
   20724:	e0bfff0b 	ldhu	r2,-4(fp)
   20728:	d0a0dd8d 	sth	r2,-31882(gp)
}
   2072c:	0001883a 	nop
   20730:	e037883a 	mov	sp,fp
   20734:	df000017 	ldw	fp,0(sp)
   20738:	dec00104 	addi	sp,sp,4
   2073c:	f800283a 	ret

00020740 <SH1106_Putc>:

char SH1106_Putc(char ch, FontDef_t* Font, SH1106_COLOR_t color) {
   20740:	defff704 	addi	sp,sp,-36
   20744:	dfc00815 	stw	ra,32(sp)
   20748:	df000715 	stw	fp,28(sp)
   2074c:	dc000615 	stw	r16,24(sp)
   20750:	df000704 	addi	fp,sp,28
   20754:	2005883a 	mov	r2,r4
   20758:	e17ffd15 	stw	r5,-12(fp)
   2075c:	e1bffe15 	stw	r6,-8(fp)
   20760:	e0bffc05 	stb	r2,-16(fp)
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
   20764:	d0a0dd0b 	ldhu	r2,-31884(gp)
   20768:	10ffffcc 	andi	r3,r2,65535
   2076c:	e0bffd17 	ldw	r2,-12(fp)
   20770:	10800003 	ldbu	r2,0(r2)
   20774:	10803fcc 	andi	r2,r2,255
   20778:	1885883a 	add	r2,r3,r2

char SH1106_Putc(char ch, FontDef_t* Font, SH1106_COLOR_t color) {
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
   2077c:	10802008 	cmpgei	r2,r2,128
   20780:	1000081e 	bne	r2,zero,207a4 <SH1106_Putc+0x64>
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
		SH1106_HEIGHT <= (SH1106.CurrentY + Font->FontHeight)
   20784:	d0a0dd8b 	ldhu	r2,-31882(gp)
   20788:	10ffffcc 	andi	r3,r2,65535
   2078c:	e0bffd17 	ldw	r2,-12(fp)
   20790:	10800043 	ldbu	r2,1(r2)
   20794:	10803fcc 	andi	r2,r2,255
   20798:	1885883a 	add	r2,r3,r2
char SH1106_Putc(char ch, FontDef_t* Font, SH1106_COLOR_t color) {
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
   2079c:	10801010 	cmplti	r2,r2,64
   207a0:	1000021e 	bne	r2,zero,207ac <SH1106_Putc+0x6c>
		SH1106_HEIGHT <= (SH1106.CurrentY + Font->FontHeight)
	) {
		/* Error */
		return 0;
   207a4:	0005883a 	mov	r2,zero
   207a8:	00004e06 	br	208e4 <SH1106_Putc+0x1a4>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
   207ac:	e03ff915 	stw	zero,-28(fp)
   207b0:	00004006 	br	208b4 <SH1106_Putc+0x174>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
   207b4:	e0bffd17 	ldw	r2,-12(fp)
   207b8:	14000117 	ldw	r16,4(r2)
   207bc:	e0bffc07 	ldb	r2,-16(fp)
   207c0:	10fff804 	addi	r3,r2,-32
   207c4:	e0bffd17 	ldw	r2,-12(fp)
   207c8:	10800043 	ldbu	r2,1(r2)
   207cc:	10803fcc 	andi	r2,r2,255
   207d0:	100b883a 	mov	r5,r2
   207d4:	1809883a 	mov	r4,r3
   207d8:	0021d940 	call	21d94 <__mulsi3>
   207dc:	1007883a 	mov	r3,r2
   207e0:	e0bff917 	ldw	r2,-28(fp)
   207e4:	1885883a 	add	r2,r3,r2
   207e8:	1085883a 	add	r2,r2,r2
   207ec:	8085883a 	add	r2,r16,r2
   207f0:	1080000b 	ldhu	r2,0(r2)
   207f4:	10bfffcc 	andi	r2,r2,65535
   207f8:	e0bffb15 	stw	r2,-20(fp)
		for (j = 0; j < Font->FontWidth; j++) {
   207fc:	e03ffa15 	stw	zero,-24(fp)
   20800:	00002406 	br	20894 <SH1106_Putc+0x154>
			if ((b << j) & 0x8000) {
   20804:	e0fffb17 	ldw	r3,-20(fp)
   20808:	e0bffa17 	ldw	r2,-24(fp)
   2080c:	1884983a 	sll	r2,r3,r2
   20810:	10a0000c 	andi	r2,r2,32768
   20814:	10000d26 	beq	r2,zero,2084c <SH1106_Putc+0x10c>
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t) color);
   20818:	d0a0dd0b 	ldhu	r2,-31884(gp)
   2081c:	e0fffa17 	ldw	r3,-24(fp)
   20820:	10c5883a 	add	r2,r2,r3
   20824:	10ffffcc 	andi	r3,r2,65535
   20828:	d0a0dd8b 	ldhu	r2,-31882(gp)
   2082c:	e13ff917 	ldw	r4,-28(fp)
   20830:	1105883a 	add	r2,r2,r4
   20834:	10bfffcc 	andi	r2,r2,65535
   20838:	e1bffe17 	ldw	r6,-8(fp)
   2083c:	100b883a 	mov	r5,r2
   20840:	1809883a 	mov	r4,r3
   20844:	00205b00 	call	205b0 <SH1106_DrawPixel>
   20848:	00000f06 	br	20888 <SH1106_Putc+0x148>
			} else {
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t)!color);
   2084c:	d0a0dd0b 	ldhu	r2,-31884(gp)
   20850:	e0fffa17 	ldw	r3,-24(fp)
   20854:	10c5883a 	add	r2,r2,r3
   20858:	10ffffcc 	andi	r3,r2,65535
   2085c:	d0a0dd8b 	ldhu	r2,-31882(gp)
   20860:	e13ff917 	ldw	r4,-28(fp)
   20864:	1105883a 	add	r2,r2,r4
   20868:	113fffcc 	andi	r4,r2,65535
   2086c:	e0bffe17 	ldw	r2,-8(fp)
   20870:	1005003a 	cmpeq	r2,r2,zero
   20874:	10803fcc 	andi	r2,r2,255
   20878:	100d883a 	mov	r6,r2
   2087c:	200b883a 	mov	r5,r4
   20880:	1809883a 	mov	r4,r3
   20884:	00205b00 	call	205b0 <SH1106_DrawPixel>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
   20888:	e0bffa17 	ldw	r2,-24(fp)
   2088c:	10800044 	addi	r2,r2,1
   20890:	e0bffa15 	stw	r2,-24(fp)
   20894:	e0bffd17 	ldw	r2,-12(fp)
   20898:	10800003 	ldbu	r2,0(r2)
   2089c:	10803fcc 	andi	r2,r2,255
   208a0:	e0fffa17 	ldw	r3,-24(fp)
   208a4:	18bfd736 	bltu	r3,r2,20804 <__alt_data_end+0xfffe0804>
		/* Error */
		return 0;
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
   208a8:	e0bff917 	ldw	r2,-28(fp)
   208ac:	10800044 	addi	r2,r2,1
   208b0:	e0bff915 	stw	r2,-28(fp)
   208b4:	e0bffd17 	ldw	r2,-12(fp)
   208b8:	10800043 	ldbu	r2,1(r2)
   208bc:	10803fcc 	andi	r2,r2,255
   208c0:	e0fff917 	ldw	r3,-28(fp)
   208c4:	18bfbb36 	bltu	r3,r2,207b4 <__alt_data_end+0xfffe07b4>
			}
		}
	}

	/* Increase pointer */
	SH1106.CurrentX += Font->FontWidth;
   208c8:	d0e0dd0b 	ldhu	r3,-31884(gp)
   208cc:	e0bffd17 	ldw	r2,-12(fp)
   208d0:	10800003 	ldbu	r2,0(r2)
   208d4:	10803fcc 	andi	r2,r2,255
   208d8:	1885883a 	add	r2,r3,r2
   208dc:	d0a0dd0d 	sth	r2,-31884(gp)

	/* Return character written */
	return ch;
   208e0:	e0bffc03 	ldbu	r2,-16(fp)
}
   208e4:	e6ffff04 	addi	sp,fp,-4
   208e8:	dfc00217 	ldw	ra,8(sp)
   208ec:	df000117 	ldw	fp,4(sp)
   208f0:	dc000017 	ldw	r16,0(sp)
   208f4:	dec00304 	addi	sp,sp,12
   208f8:	f800283a 	ret

000208fc <SH1106_Puts>:

char SH1106_Puts(char* str, FontDef_t* Font, SH1106_COLOR_t color) {
   208fc:	defffb04 	addi	sp,sp,-20
   20900:	dfc00415 	stw	ra,16(sp)
   20904:	df000315 	stw	fp,12(sp)
   20908:	df000304 	addi	fp,sp,12
   2090c:	e13ffd15 	stw	r4,-12(fp)
   20910:	e17ffe15 	stw	r5,-8(fp)
   20914:	e1bfff15 	stw	r6,-4(fp)
	/* Write characters */
	while (*str) {
   20918:	00001906 	br	20980 <SH1106_Puts+0x84>
		/* Write character by character */
		if (SH1106_Putc(*str, Font, color) != *str) {
   2091c:	e0bffd17 	ldw	r2,-12(fp)
   20920:	10800003 	ldbu	r2,0(r2)
   20924:	10803fcc 	andi	r2,r2,255
   20928:	1080201c 	xori	r2,r2,128
   2092c:	10bfe004 	addi	r2,r2,-128
   20930:	e1bfff17 	ldw	r6,-4(fp)
   20934:	e17ffe17 	ldw	r5,-8(fp)
   20938:	1009883a 	mov	r4,r2
   2093c:	00207400 	call	20740 <SH1106_Putc>
   20940:	1007883a 	mov	r3,r2
   20944:	e0bffd17 	ldw	r2,-12(fp)
   20948:	10800003 	ldbu	r2,0(r2)
   2094c:	18c03fcc 	andi	r3,r3,255
   20950:	18c0201c 	xori	r3,r3,128
   20954:	18ffe004 	addi	r3,r3,-128
   20958:	10803fcc 	andi	r2,r2,255
   2095c:	1080201c 	xori	r2,r2,128
   20960:	10bfe004 	addi	r2,r2,-128
   20964:	18800326 	beq	r3,r2,20974 <SH1106_Puts+0x78>
			/* Return error */
			return *str;
   20968:	e0bffd17 	ldw	r2,-12(fp)
   2096c:	10800003 	ldbu	r2,0(r2)
   20970:	00000b06 	br	209a0 <SH1106_Puts+0xa4>
		}

		/* Increase string pointer */
		str++;
   20974:	e0bffd17 	ldw	r2,-12(fp)
   20978:	10800044 	addi	r2,r2,1
   2097c:	e0bffd15 	stw	r2,-12(fp)
	return ch;
}

char SH1106_Puts(char* str, FontDef_t* Font, SH1106_COLOR_t color) {
	/* Write characters */
	while (*str) {
   20980:	e0bffd17 	ldw	r2,-12(fp)
   20984:	10800003 	ldbu	r2,0(r2)
   20988:	10803fcc 	andi	r2,r2,255
   2098c:	1080201c 	xori	r2,r2,128
   20990:	10bfe004 	addi	r2,r2,-128
   20994:	103fe11e 	bne	r2,zero,2091c <__alt_data_end+0xfffe091c>
		/* Increase string pointer */
		str++;
	}

	/* Everything OK, zero should be returned */
	return *str;
   20998:	e0bffd17 	ldw	r2,-12(fp)
   2099c:	10800003 	ldbu	r2,0(r2)
}
   209a0:	e037883a 	mov	sp,fp
   209a4:	dfc00117 	ldw	ra,4(sp)
   209a8:	df000017 	ldw	fp,0(sp)
   209ac:	dec00204 	addi	sp,sp,8
   209b0:	f800283a 	ret

000209b4 <SH1106_DrawLine>:


void SH1106_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SH1106_COLOR_t c) {
   209b4:	defff604 	addi	sp,sp,-40
   209b8:	dfc00915 	stw	ra,36(sp)
   209bc:	df000815 	stw	fp,32(sp)
   209c0:	df000804 	addi	fp,sp,32
   209c4:	2011883a 	mov	r8,r4
   209c8:	2809883a 	mov	r4,r5
   209cc:	3007883a 	mov	r3,r6
   209d0:	3805883a 	mov	r2,r7
   209d4:	e23ffc0d 	sth	r8,-16(fp)
   209d8:	e13ffd0d 	sth	r4,-12(fp)
   209dc:	e0fffe0d 	sth	r3,-8(fp)
   209e0:	e0bfff0d 	sth	r2,-4(fp)
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SH1106_WIDTH) {
   209e4:	e0bffc0b 	ldhu	r2,-16(fp)
   209e8:	10802030 	cmpltui	r2,r2,128
   209ec:	1000021e 	bne	r2,zero,209f8 <SH1106_DrawLine+0x44>
		x0 = SH1106_WIDTH - 1;
   209f0:	00801fc4 	movi	r2,127
   209f4:	e0bffc0d 	sth	r2,-16(fp)
	}
	if (x1 >= SH1106_WIDTH) {
   209f8:	e0bffe0b 	ldhu	r2,-8(fp)
   209fc:	10802030 	cmpltui	r2,r2,128
   20a00:	1000021e 	bne	r2,zero,20a0c <SH1106_DrawLine+0x58>
		x1 = SH1106_WIDTH - 1;
   20a04:	00801fc4 	movi	r2,127
   20a08:	e0bffe0d 	sth	r2,-8(fp)
	}
	if (y0 >= SH1106_HEIGHT) {
   20a0c:	e0bffd0b 	ldhu	r2,-12(fp)
   20a10:	10801030 	cmpltui	r2,r2,64
   20a14:	1000021e 	bne	r2,zero,20a20 <SH1106_DrawLine+0x6c>
		y0 = SH1106_HEIGHT - 1;
   20a18:	00800fc4 	movi	r2,63
   20a1c:	e0bffd0d 	sth	r2,-12(fp)
	}
	if (y1 >= SH1106_HEIGHT) {
   20a20:	e0bfff0b 	ldhu	r2,-4(fp)
   20a24:	10801030 	cmpltui	r2,r2,64
   20a28:	1000021e 	bne	r2,zero,20a34 <SH1106_DrawLine+0x80>
		y1 = SH1106_HEIGHT - 1;
   20a2c:	00800fc4 	movi	r2,63
   20a30:	e0bfff0d 	sth	r2,-4(fp)
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
   20a34:	e0fffc0b 	ldhu	r3,-16(fp)
   20a38:	e0bffe0b 	ldhu	r2,-8(fp)
   20a3c:	1880042e 	bgeu	r3,r2,20a50 <SH1106_DrawLine+0x9c>
   20a40:	e0fffe0b 	ldhu	r3,-8(fp)
   20a44:	e0bffc0b 	ldhu	r2,-16(fp)
   20a48:	1885c83a 	sub	r2,r3,r2
   20a4c:	00000306 	br	20a5c <SH1106_DrawLine+0xa8>
   20a50:	e0fffc0b 	ldhu	r3,-16(fp)
   20a54:	e0bffe0b 	ldhu	r2,-8(fp)
   20a58:	1885c83a 	sub	r2,r3,r2
   20a5c:	e0bff90d 	sth	r2,-28(fp)
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
   20a60:	e0fffd0b 	ldhu	r3,-12(fp)
   20a64:	e0bfff0b 	ldhu	r2,-4(fp)
   20a68:	1880042e 	bgeu	r3,r2,20a7c <SH1106_DrawLine+0xc8>
   20a6c:	e0ffff0b 	ldhu	r3,-4(fp)
   20a70:	e0bffd0b 	ldhu	r2,-12(fp)
   20a74:	1885c83a 	sub	r2,r3,r2
   20a78:	00000306 	br	20a88 <SH1106_DrawLine+0xd4>
   20a7c:	e0fffd0b 	ldhu	r3,-12(fp)
   20a80:	e0bfff0b 	ldhu	r2,-4(fp)
   20a84:	1885c83a 	sub	r2,r3,r2
   20a88:	e0bff98d 	sth	r2,-26(fp)
	sx = (x0 < x1) ? 1 : -1;
   20a8c:	e0fffc0b 	ldhu	r3,-16(fp)
   20a90:	e0bffe0b 	ldhu	r2,-8(fp)
   20a94:	1880022e 	bgeu	r3,r2,20aa0 <SH1106_DrawLine+0xec>
   20a98:	00800044 	movi	r2,1
   20a9c:	00000106 	br	20aa4 <SH1106_DrawLine+0xf0>
   20aa0:	00bfffc4 	movi	r2,-1
   20aa4:	e0bffa0d 	sth	r2,-24(fp)
	sy = (y0 < y1) ? 1 : -1;
   20aa8:	e0fffd0b 	ldhu	r3,-12(fp)
   20aac:	e0bfff0b 	ldhu	r2,-4(fp)
   20ab0:	1880022e 	bgeu	r3,r2,20abc <SH1106_DrawLine+0x108>
   20ab4:	00800044 	movi	r2,1
   20ab8:	00000106 	br	20ac0 <SH1106_DrawLine+0x10c>
   20abc:	00bfffc4 	movi	r2,-1
   20ac0:	e0bffa8d 	sth	r2,-22(fp)
	err = ((dx > dy) ? dx : -dy) / 2;
   20ac4:	e0bff90f 	ldh	r2,-28(fp)
   20ac8:	e0fff98f 	ldh	r3,-26(fp)
   20acc:	1880050e 	bge	r3,r2,20ae4 <SH1106_DrawLine+0x130>
   20ad0:	e0bff90f 	ldh	r2,-28(fp)
   20ad4:	1006d7fa 	srli	r3,r2,31
   20ad8:	1885883a 	add	r2,r3,r2
   20adc:	1005d07a 	srai	r2,r2,1
   20ae0:	00000506 	br	20af8 <SH1106_DrawLine+0x144>
   20ae4:	e0bff98f 	ldh	r2,-26(fp)
   20ae8:	0085c83a 	sub	r2,zero,r2
   20aec:	1006d7fa 	srli	r3,r2,31
   20af0:	1885883a 	add	r2,r3,r2
   20af4:	1005d07a 	srai	r2,r2,1
   20af8:	e0bff80d 	sth	r2,-32(fp)

	if (dx == 0) {
   20afc:	e0bff90f 	ldh	r2,-28(fp)
   20b00:	1000231e 	bne	r2,zero,20b90 <SH1106_DrawLine+0x1dc>
		if (y1 < y0) {
   20b04:	e0ffff0b 	ldhu	r3,-4(fp)
   20b08:	e0bffd0b 	ldhu	r2,-12(fp)
   20b0c:	1880062e 	bgeu	r3,r2,20b28 <SH1106_DrawLine+0x174>
			tmp = y1;
   20b10:	e0bfff0b 	ldhu	r2,-4(fp)
   20b14:	e0bffb0d 	sth	r2,-20(fp)
			y1 = y0;
   20b18:	e0bffd0b 	ldhu	r2,-12(fp)
   20b1c:	e0bfff0d 	sth	r2,-4(fp)
			y0 = tmp;
   20b20:	e0bffb0b 	ldhu	r2,-20(fp)
   20b24:	e0bffd0d 	sth	r2,-12(fp)
		}

		if (x1 < x0) {
   20b28:	e0fffe0b 	ldhu	r3,-8(fp)
   20b2c:	e0bffc0b 	ldhu	r2,-16(fp)
   20b30:	1880062e 	bgeu	r3,r2,20b4c <SH1106_DrawLine+0x198>
			tmp = x1;
   20b34:	e0bffe0b 	ldhu	r2,-8(fp)
   20b38:	e0bffb0d 	sth	r2,-20(fp)
			x1 = x0;
   20b3c:	e0bffc0b 	ldhu	r2,-16(fp)
   20b40:	e0bffe0d 	sth	r2,-8(fp)
			x0 = tmp;
   20b44:	e0bffb0b 	ldhu	r2,-20(fp)
   20b48:	e0bffc0d 	sth	r2,-16(fp)
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
   20b4c:	e0bffd0b 	ldhu	r2,-12(fp)
   20b50:	e0bff88d 	sth	r2,-30(fp)
   20b54:	00000a06 	br	20b80 <SH1106_DrawLine+0x1cc>
			SH1106_DrawPixel(x0, i, c);
   20b58:	e0bffc0b 	ldhu	r2,-16(fp)
   20b5c:	e0fff88b 	ldhu	r3,-30(fp)
   20b60:	18ffffcc 	andi	r3,r3,65535
   20b64:	e1800217 	ldw	r6,8(fp)
   20b68:	180b883a 	mov	r5,r3
   20b6c:	1009883a 	mov	r4,r2
   20b70:	00205b00 	call	205b0 <SH1106_DrawPixel>
			x1 = x0;
			x0 = tmp;
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
   20b74:	e0bff88b 	ldhu	r2,-30(fp)
   20b78:	10800044 	addi	r2,r2,1
   20b7c:	e0bff88d 	sth	r2,-30(fp)
   20b80:	e0bff88f 	ldh	r2,-30(fp)
   20b84:	e0ffff0b 	ldhu	r3,-4(fp)
   20b88:	18bff30e 	bge	r3,r2,20b58 <__alt_data_end+0xfffe0b58>
			SH1106_DrawPixel(x0, i, c);
		}

		/* Return from function */
		return;
   20b8c:	00004c06 	br	20cc0 <SH1106_DrawLine+0x30c>
	}

	if (dy == 0) {
   20b90:	e0bff98f 	ldh	r2,-26(fp)
   20b94:	1000231e 	bne	r2,zero,20c24 <SH1106_DrawLine+0x270>
		if (y1 < y0) {
   20b98:	e0ffff0b 	ldhu	r3,-4(fp)
   20b9c:	e0bffd0b 	ldhu	r2,-12(fp)
   20ba0:	1880062e 	bgeu	r3,r2,20bbc <SH1106_DrawLine+0x208>
			tmp = y1;
   20ba4:	e0bfff0b 	ldhu	r2,-4(fp)
   20ba8:	e0bffb0d 	sth	r2,-20(fp)
			y1 = y0;
   20bac:	e0bffd0b 	ldhu	r2,-12(fp)
   20bb0:	e0bfff0d 	sth	r2,-4(fp)
			y0 = tmp;
   20bb4:	e0bffb0b 	ldhu	r2,-20(fp)
   20bb8:	e0bffd0d 	sth	r2,-12(fp)
		}

		if (x1 < x0) {
   20bbc:	e0fffe0b 	ldhu	r3,-8(fp)
   20bc0:	e0bffc0b 	ldhu	r2,-16(fp)
   20bc4:	1880062e 	bgeu	r3,r2,20be0 <SH1106_DrawLine+0x22c>
			tmp = x1;
   20bc8:	e0bffe0b 	ldhu	r2,-8(fp)
   20bcc:	e0bffb0d 	sth	r2,-20(fp)
			x1 = x0;
   20bd0:	e0bffc0b 	ldhu	r2,-16(fp)
   20bd4:	e0bffe0d 	sth	r2,-8(fp)
			x0 = tmp;
   20bd8:	e0bffb0b 	ldhu	r2,-20(fp)
   20bdc:	e0bffc0d 	sth	r2,-16(fp)
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
   20be0:	e0bffc0b 	ldhu	r2,-16(fp)
   20be4:	e0bff88d 	sth	r2,-30(fp)
   20be8:	00000a06 	br	20c14 <SH1106_DrawLine+0x260>
			SH1106_DrawPixel(i, y0, c);
   20bec:	e0bff88b 	ldhu	r2,-30(fp)
   20bf0:	10bfffcc 	andi	r2,r2,65535
   20bf4:	e0fffd0b 	ldhu	r3,-12(fp)
   20bf8:	e1800217 	ldw	r6,8(fp)
   20bfc:	180b883a 	mov	r5,r3
   20c00:	1009883a 	mov	r4,r2
   20c04:	00205b00 	call	205b0 <SH1106_DrawPixel>
			x1 = x0;
			x0 = tmp;
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
   20c08:	e0bff88b 	ldhu	r2,-30(fp)
   20c0c:	10800044 	addi	r2,r2,1
   20c10:	e0bff88d 	sth	r2,-30(fp)
   20c14:	e0bff88f 	ldh	r2,-30(fp)
   20c18:	e0fffe0b 	ldhu	r3,-8(fp)
   20c1c:	18bff30e 	bge	r3,r2,20bec <__alt_data_end+0xfffe0bec>
			SH1106_DrawPixel(i, y0, c);
		}

		/* Return from function */
		return;
   20c20:	00002706 	br	20cc0 <SH1106_DrawLine+0x30c>
	}

	while (1) {
		SH1106_DrawPixel(x0, y0, c);
   20c24:	e0bffc0b 	ldhu	r2,-16(fp)
   20c28:	e0fffd0b 	ldhu	r3,-12(fp)
   20c2c:	e1800217 	ldw	r6,8(fp)
   20c30:	180b883a 	mov	r5,r3
   20c34:	1009883a 	mov	r4,r2
   20c38:	00205b00 	call	205b0 <SH1106_DrawPixel>
		if (x0 == x1 && y0 == y1) {
   20c3c:	e0fffc0b 	ldhu	r3,-16(fp)
   20c40:	e0bffe0b 	ldhu	r2,-8(fp)
   20c44:	1880031e 	bne	r3,r2,20c54 <SH1106_DrawLine+0x2a0>
   20c48:	e0fffd0b 	ldhu	r3,-12(fp)
   20c4c:	e0bfff0b 	ldhu	r2,-4(fp)
   20c50:	18801a26 	beq	r3,r2,20cbc <SH1106_DrawLine+0x308>
			break;
		}
		e2 = err;
   20c54:	e0bff80b 	ldhu	r2,-32(fp)
   20c58:	e0bffb8d 	sth	r2,-18(fp)
		if (e2 > -dx) {
   20c5c:	e0bffb8f 	ldh	r2,-18(fp)
   20c60:	e0fff90f 	ldh	r3,-28(fp)
   20c64:	00c7c83a 	sub	r3,zero,r3
   20c68:	1880080e 	bge	r3,r2,20c8c <SH1106_DrawLine+0x2d8>
			err -= dy;
   20c6c:	e0fff80b 	ldhu	r3,-32(fp)
   20c70:	e0bff98b 	ldhu	r2,-26(fp)
   20c74:	1885c83a 	sub	r2,r3,r2
   20c78:	e0bff80d 	sth	r2,-32(fp)
			x0 += sx;
   20c7c:	e0bffa0b 	ldhu	r2,-24(fp)
   20c80:	e0fffc0b 	ldhu	r3,-16(fp)
   20c84:	1885883a 	add	r2,r3,r2
   20c88:	e0bffc0d 	sth	r2,-16(fp)
		}
		if (e2 < dy) {
   20c8c:	e0fffb8f 	ldh	r3,-18(fp)
   20c90:	e0bff98f 	ldh	r2,-26(fp)
   20c94:	18bfe30e 	bge	r3,r2,20c24 <__alt_data_end+0xfffe0c24>
			err += dx;
   20c98:	e0fff80b 	ldhu	r3,-32(fp)
   20c9c:	e0bff90b 	ldhu	r2,-28(fp)
   20ca0:	1885883a 	add	r2,r3,r2
   20ca4:	e0bff80d 	sth	r2,-32(fp)
			y0 += sy;
   20ca8:	e0bffa8b 	ldhu	r2,-22(fp)
   20cac:	e0fffd0b 	ldhu	r3,-12(fp)
   20cb0:	1885883a 	add	r2,r3,r2
   20cb4:	e0bffd0d 	sth	r2,-12(fp)
		}
	}
   20cb8:	003fda06 	br	20c24 <__alt_data_end+0xfffe0c24>
	}

	while (1) {
		SH1106_DrawPixel(x0, y0, c);
		if (x0 == x1 && y0 == y1) {
			break;
   20cbc:	0001883a 	nop
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		}
	}
}
   20cc0:	e037883a 	mov	sp,fp
   20cc4:	dfc00117 	ldw	ra,4(sp)
   20cc8:	df000017 	ldw	fp,0(sp)
   20ccc:	dec00204 	addi	sp,sp,8
   20cd0:	f800283a 	ret

00020cd4 <SH1106_DrawRectangle>:

void SH1106_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SH1106_COLOR_t c) {
   20cd4:	defff904 	addi	sp,sp,-28
   20cd8:	dfc00615 	stw	ra,24(sp)
   20cdc:	df000515 	stw	fp,20(sp)
   20ce0:	df000504 	addi	fp,sp,20
   20ce4:	2011883a 	mov	r8,r4
   20ce8:	2809883a 	mov	r4,r5
   20cec:	3007883a 	mov	r3,r6
   20cf0:	3805883a 	mov	r2,r7
   20cf4:	e23ffc0d 	sth	r8,-16(fp)
   20cf8:	e13ffd0d 	sth	r4,-12(fp)
   20cfc:	e0fffe0d 	sth	r3,-8(fp)
   20d00:	e0bfff0d 	sth	r2,-4(fp)
	/* Check input parameters */
	if (
   20d04:	e0bffc0b 	ldhu	r2,-16(fp)
   20d08:	10802028 	cmpgeui	r2,r2,128
   20d0c:	10004f1e 	bne	r2,zero,20e4c <SH1106_DrawRectangle+0x178>
		x >= SH1106_WIDTH ||
   20d10:	e0bffd0b 	ldhu	r2,-12(fp)
   20d14:	10801030 	cmpltui	r2,r2,64
   20d18:	10004c26 	beq	r2,zero,20e4c <SH1106_DrawRectangle+0x178>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SH1106_WIDTH) {
   20d1c:	e0fffc0b 	ldhu	r3,-16(fp)
   20d20:	e0bffe0b 	ldhu	r2,-8(fp)
   20d24:	1885883a 	add	r2,r3,r2
   20d28:	10802010 	cmplti	r2,r2,128
   20d2c:	1000041e 	bne	r2,zero,20d40 <SH1106_DrawRectangle+0x6c>
		w = SH1106_WIDTH - x;
   20d30:	e0bffc0b 	ldhu	r2,-16(fp)
   20d34:	00c02004 	movi	r3,128
   20d38:	1885c83a 	sub	r2,r3,r2
   20d3c:	e0bffe0d 	sth	r2,-8(fp)
	}
	if ((y + h) >= SH1106_HEIGHT) {
   20d40:	e0fffd0b 	ldhu	r3,-12(fp)
   20d44:	e0bfff0b 	ldhu	r2,-4(fp)
   20d48:	1885883a 	add	r2,r3,r2
   20d4c:	10801010 	cmplti	r2,r2,64
   20d50:	1000041e 	bne	r2,zero,20d64 <SH1106_DrawRectangle+0x90>
		h = SH1106_HEIGHT - y;
   20d54:	e0bffd0b 	ldhu	r2,-12(fp)
   20d58:	00c01004 	movi	r3,64
   20d5c:	1885c83a 	sub	r2,r3,r2
   20d60:	e0bfff0d 	sth	r2,-4(fp)
	}

	/* Draw 4 lines */
	SH1106_DrawLine(x, y, x + w, y, c);         /* Top line */
   20d64:	e13ffc0b 	ldhu	r4,-16(fp)
   20d68:	e17ffd0b 	ldhu	r5,-12(fp)
   20d6c:	e0fffc0b 	ldhu	r3,-16(fp)
   20d70:	e0bffe0b 	ldhu	r2,-8(fp)
   20d74:	1885883a 	add	r2,r3,r2
   20d78:	10ffffcc 	andi	r3,r2,65535
   20d7c:	e1bffd0b 	ldhu	r6,-12(fp)
   20d80:	e0800217 	ldw	r2,8(fp)
   20d84:	d8800015 	stw	r2,0(sp)
   20d88:	300f883a 	mov	r7,r6
   20d8c:	180d883a 	mov	r6,r3
   20d90:	00209b40 	call	209b4 <SH1106_DrawLine>
	SH1106_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
   20d94:	e13ffc0b 	ldhu	r4,-16(fp)
   20d98:	e0fffd0b 	ldhu	r3,-12(fp)
   20d9c:	e0bfff0b 	ldhu	r2,-4(fp)
   20da0:	1885883a 	add	r2,r3,r2
   20da4:	117fffcc 	andi	r5,r2,65535
   20da8:	e0fffc0b 	ldhu	r3,-16(fp)
   20dac:	e0bffe0b 	ldhu	r2,-8(fp)
   20db0:	1885883a 	add	r2,r3,r2
   20db4:	11bfffcc 	andi	r6,r2,65535
   20db8:	e0fffd0b 	ldhu	r3,-12(fp)
   20dbc:	e0bfff0b 	ldhu	r2,-4(fp)
   20dc0:	1885883a 	add	r2,r3,r2
   20dc4:	10ffffcc 	andi	r3,r2,65535
   20dc8:	e0800217 	ldw	r2,8(fp)
   20dcc:	d8800015 	stw	r2,0(sp)
   20dd0:	180f883a 	mov	r7,r3
   20dd4:	00209b40 	call	209b4 <SH1106_DrawLine>
	SH1106_DrawLine(x, y, x, y + h, c);         /* Left line */
   20dd8:	e13ffc0b 	ldhu	r4,-16(fp)
   20ddc:	e17ffd0b 	ldhu	r5,-12(fp)
   20de0:	e1bffc0b 	ldhu	r6,-16(fp)
   20de4:	e0fffd0b 	ldhu	r3,-12(fp)
   20de8:	e0bfff0b 	ldhu	r2,-4(fp)
   20dec:	1885883a 	add	r2,r3,r2
   20df0:	10ffffcc 	andi	r3,r2,65535
   20df4:	e0800217 	ldw	r2,8(fp)
   20df8:	d8800015 	stw	r2,0(sp)
   20dfc:	180f883a 	mov	r7,r3
   20e00:	00209b40 	call	209b4 <SH1106_DrawLine>
	SH1106_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
   20e04:	e0fffc0b 	ldhu	r3,-16(fp)
   20e08:	e0bffe0b 	ldhu	r2,-8(fp)
   20e0c:	1885883a 	add	r2,r3,r2
   20e10:	113fffcc 	andi	r4,r2,65535
   20e14:	e17ffd0b 	ldhu	r5,-12(fp)
   20e18:	e0fffc0b 	ldhu	r3,-16(fp)
   20e1c:	e0bffe0b 	ldhu	r2,-8(fp)
   20e20:	1885883a 	add	r2,r3,r2
   20e24:	11bfffcc 	andi	r6,r2,65535
   20e28:	e0fffd0b 	ldhu	r3,-12(fp)
   20e2c:	e0bfff0b 	ldhu	r2,-4(fp)
   20e30:	1885883a 	add	r2,r3,r2
   20e34:	10ffffcc 	andi	r3,r2,65535
   20e38:	e0800217 	ldw	r2,8(fp)
   20e3c:	d8800015 	stw	r2,0(sp)
   20e40:	180f883a 	mov	r7,r3
   20e44:	00209b40 	call	209b4 <SH1106_DrawLine>
   20e48:	00000106 	br	20e50 <SH1106_DrawRectangle+0x17c>
	if (
		x >= SH1106_WIDTH ||
		y >= SH1106_HEIGHT
	) {
		/* Return error */
		return;
   20e4c:	0001883a 	nop
	/* Draw 4 lines */
	SH1106_DrawLine(x, y, x + w, y, c);         /* Top line */
	SH1106_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SH1106_DrawLine(x, y, x, y + h, c);         /* Left line */
	SH1106_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}
   20e50:	e037883a 	mov	sp,fp
   20e54:	dfc00117 	ldw	ra,4(sp)
   20e58:	df000017 	ldw	fp,0(sp)
   20e5c:	dec00204 	addi	sp,sp,8
   20e60:	f800283a 	ret

00020e64 <SH1106_DrawFilledRectangle>:

void SH1106_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SH1106_COLOR_t c) {
   20e64:	defff804 	addi	sp,sp,-32
   20e68:	dfc00715 	stw	ra,28(sp)
   20e6c:	df000615 	stw	fp,24(sp)
   20e70:	df000604 	addi	fp,sp,24
   20e74:	2011883a 	mov	r8,r4
   20e78:	2809883a 	mov	r4,r5
   20e7c:	3007883a 	mov	r3,r6
   20e80:	3805883a 	mov	r2,r7
   20e84:	e23ffc0d 	sth	r8,-16(fp)
   20e88:	e13ffd0d 	sth	r4,-12(fp)
   20e8c:	e0fffe0d 	sth	r3,-8(fp)
   20e90:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t i;

	/* Check input parameters */
	if (
   20e94:	e0bffc0b 	ldhu	r2,-16(fp)
   20e98:	10802028 	cmpgeui	r2,r2,128
   20e9c:	1000301e 	bne	r2,zero,20f60 <SH1106_DrawFilledRectangle+0xfc>
		x >= SH1106_WIDTH ||
   20ea0:	e0bffd0b 	ldhu	r2,-12(fp)
   20ea4:	10801030 	cmpltui	r2,r2,64
   20ea8:	10002d26 	beq	r2,zero,20f60 <SH1106_DrawFilledRectangle+0xfc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SH1106_WIDTH) {
   20eac:	e0fffc0b 	ldhu	r3,-16(fp)
   20eb0:	e0bffe0b 	ldhu	r2,-8(fp)
   20eb4:	1885883a 	add	r2,r3,r2
   20eb8:	10802010 	cmplti	r2,r2,128
   20ebc:	1000041e 	bne	r2,zero,20ed0 <SH1106_DrawFilledRectangle+0x6c>
		w = SH1106_WIDTH - x;
   20ec0:	e0bffc0b 	ldhu	r2,-16(fp)
   20ec4:	00c02004 	movi	r3,128
   20ec8:	1885c83a 	sub	r2,r3,r2
   20ecc:	e0bffe0d 	sth	r2,-8(fp)
	}
	if ((y + h) >= SH1106_HEIGHT) {
   20ed0:	e0fffd0b 	ldhu	r3,-12(fp)
   20ed4:	e0bfff0b 	ldhu	r2,-4(fp)
   20ed8:	1885883a 	add	r2,r3,r2
   20edc:	10801010 	cmplti	r2,r2,64
   20ee0:	1000041e 	bne	r2,zero,20ef4 <SH1106_DrawFilledRectangle+0x90>
		h = SH1106_HEIGHT - y;
   20ee4:	e0bffd0b 	ldhu	r2,-12(fp)
   20ee8:	00c01004 	movi	r3,64
   20eec:	1885c83a 	sub	r2,r3,r2
   20ef0:	e0bfff0d 	sth	r2,-4(fp)
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
   20ef4:	e03ffb05 	stb	zero,-20(fp)
   20ef8:	00001406 	br	20f4c <SH1106_DrawFilledRectangle+0xe8>
		/* Draw lines */
		SH1106_DrawLine(x, y + i, x + w, y + i, c);
   20efc:	e13ffc0b 	ldhu	r4,-16(fp)
   20f00:	e0fffb03 	ldbu	r3,-20(fp)
   20f04:	e0bffd0b 	ldhu	r2,-12(fp)
   20f08:	1885883a 	add	r2,r3,r2
   20f0c:	117fffcc 	andi	r5,r2,65535
   20f10:	e0fffc0b 	ldhu	r3,-16(fp)
   20f14:	e0bffe0b 	ldhu	r2,-8(fp)
   20f18:	1885883a 	add	r2,r3,r2
   20f1c:	11bfffcc 	andi	r6,r2,65535
   20f20:	e0fffb03 	ldbu	r3,-20(fp)
   20f24:	e0bffd0b 	ldhu	r2,-12(fp)
   20f28:	1885883a 	add	r2,r3,r2
   20f2c:	10ffffcc 	andi	r3,r2,65535
   20f30:	e0800217 	ldw	r2,8(fp)
   20f34:	d8800015 	stw	r2,0(sp)
   20f38:	180f883a 	mov	r7,r3
   20f3c:	00209b40 	call	209b4 <SH1106_DrawLine>
	if ((y + h) >= SH1106_HEIGHT) {
		h = SH1106_HEIGHT - y;
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
   20f40:	e0bffb03 	ldbu	r2,-20(fp)
   20f44:	10800044 	addi	r2,r2,1
   20f48:	e0bffb05 	stb	r2,-20(fp)
   20f4c:	e0bffb03 	ldbu	r2,-20(fp)
   20f50:	10bfffcc 	andi	r2,r2,65535
   20f54:	e0ffff0b 	ldhu	r3,-4(fp)
   20f58:	18bfe82e 	bgeu	r3,r2,20efc <__alt_data_end+0xfffe0efc>
   20f5c:	00000106 	br	20f64 <SH1106_DrawFilledRectangle+0x100>
	if (
		x >= SH1106_WIDTH ||
		y >= SH1106_HEIGHT
	) {
		/* Return error */
		return;
   20f60:	0001883a 	nop
	/* Draw lines */
	for (i = 0; i <= h; i++) {
		/* Draw lines */
		SH1106_DrawLine(x, y + i, x + w, y + i, c);
	}
}
   20f64:	e037883a 	mov	sp,fp
   20f68:	dfc00117 	ldw	ra,4(sp)
   20f6c:	df000017 	ldw	fp,0(sp)
   20f70:	dec00204 	addi	sp,sp,8
   20f74:	f800283a 	ret

00020f78 <SH1106_DrawTriangle>:

void SH1106_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SH1106_COLOR_t color) {
   20f78:	defff704 	addi	sp,sp,-36
   20f7c:	dfc00815 	stw	ra,32(sp)
   20f80:	df000715 	stw	fp,28(sp)
   20f84:	df000704 	addi	fp,sp,28
   20f88:	2013883a 	mov	r9,r4
   20f8c:	2811883a 	mov	r8,r5
   20f90:	300b883a 	mov	r5,r6
   20f94:	3809883a 	mov	r4,r7
   20f98:	e0c00217 	ldw	r3,8(fp)
   20f9c:	e0800317 	ldw	r2,12(fp)
   20fa0:	e27ffa0d 	sth	r9,-24(fp)
   20fa4:	e23ffb0d 	sth	r8,-20(fp)
   20fa8:	e17ffc0d 	sth	r5,-16(fp)
   20fac:	e13ffd0d 	sth	r4,-12(fp)
   20fb0:	e0fffe0d 	sth	r3,-8(fp)
   20fb4:	e0bfff0d 	sth	r2,-4(fp)
	/* Draw lines */
	SH1106_DrawLine(x1, y1, x2, y2, color);
   20fb8:	e0fffa0b 	ldhu	r3,-24(fp)
   20fbc:	e13ffb0b 	ldhu	r4,-20(fp)
   20fc0:	e17ffc0b 	ldhu	r5,-16(fp)
   20fc4:	e1bffd0b 	ldhu	r6,-12(fp)
   20fc8:	e0800417 	ldw	r2,16(fp)
   20fcc:	d8800015 	stw	r2,0(sp)
   20fd0:	300f883a 	mov	r7,r6
   20fd4:	280d883a 	mov	r6,r5
   20fd8:	200b883a 	mov	r5,r4
   20fdc:	1809883a 	mov	r4,r3
   20fe0:	00209b40 	call	209b4 <SH1106_DrawLine>
	SH1106_DrawLine(x2, y2, x3, y3, color);
   20fe4:	e0fffc0b 	ldhu	r3,-16(fp)
   20fe8:	e13ffd0b 	ldhu	r4,-12(fp)
   20fec:	e17ffe0b 	ldhu	r5,-8(fp)
   20ff0:	e1bfff0b 	ldhu	r6,-4(fp)
   20ff4:	e0800417 	ldw	r2,16(fp)
   20ff8:	d8800015 	stw	r2,0(sp)
   20ffc:	300f883a 	mov	r7,r6
   21000:	280d883a 	mov	r6,r5
   21004:	200b883a 	mov	r5,r4
   21008:	1809883a 	mov	r4,r3
   2100c:	00209b40 	call	209b4 <SH1106_DrawLine>
	SH1106_DrawLine(x3, y3, x1, y1, color);
   21010:	e0fffe0b 	ldhu	r3,-8(fp)
   21014:	e13fff0b 	ldhu	r4,-4(fp)
   21018:	e17ffa0b 	ldhu	r5,-24(fp)
   2101c:	e1bffb0b 	ldhu	r6,-20(fp)
   21020:	e0800417 	ldw	r2,16(fp)
   21024:	d8800015 	stw	r2,0(sp)
   21028:	300f883a 	mov	r7,r6
   2102c:	280d883a 	mov	r6,r5
   21030:	200b883a 	mov	r5,r4
   21034:	1809883a 	mov	r4,r3
   21038:	00209b40 	call	209b4 <SH1106_DrawLine>
}
   2103c:	0001883a 	nop
   21040:	e037883a 	mov	sp,fp
   21044:	dfc00117 	ldw	ra,4(sp)
   21048:	df000017 	ldw	fp,0(sp)
   2104c:	dec00204 	addi	sp,sp,8
   21050:	f800283a 	ret

00021054 <SH1106_DrawFilledTriangle>:


void SH1106_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SH1106_COLOR_t color) {
   21054:	defff004 	addi	sp,sp,-64
   21058:	dfc00f15 	stw	ra,60(sp)
   2105c:	df000e15 	stw	fp,56(sp)
   21060:	df000e04 	addi	fp,sp,56
   21064:	2013883a 	mov	r9,r4
   21068:	2811883a 	mov	r8,r5
   2106c:	300b883a 	mov	r5,r6
   21070:	3809883a 	mov	r4,r7
   21074:	e0c00217 	ldw	r3,8(fp)
   21078:	e0800317 	ldw	r2,12(fp)
   2107c:	e27ffa0d 	sth	r9,-24(fp)
   21080:	e23ffb0d 	sth	r8,-20(fp)
   21084:	e17ffc0d 	sth	r5,-16(fp)
   21088:	e13ffd0d 	sth	r4,-12(fp)
   2108c:	e0fffe0d 	sth	r3,-8(fp)
   21090:	e0bfff0d 	sth	r2,-4(fp)
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
   21094:	e03ff88d 	sth	zero,-30(fp)
   21098:	e03ff90d 	sth	zero,-28(fp)
   2109c:	e03ff30d 	sth	zero,-52(fp)
   210a0:	e03ff38d 	sth	zero,-50(fp)
   210a4:	e03ff40d 	sth	zero,-48(fp)
   210a8:	e03ff48d 	sth	zero,-46(fp)
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
   210ac:	e03ff50d 	sth	zero,-44(fp)
   210b0:	e03ff58d 	sth	zero,-42(fp)
   210b4:	e03ff60d 	sth	zero,-40(fp)
   210b8:	e03ff68d 	sth	zero,-38(fp)
   210bc:	e03ff70d 	sth	zero,-36(fp)
   210c0:	e03ff78d 	sth	zero,-34(fp)
	curpixel = 0;
   210c4:	e03ff80d 	sth	zero,-32(fp)

	deltax = ABS(x2 - x1);
   210c8:	e0fffc0b 	ldhu	r3,-16(fp)
   210cc:	e0bffa0b 	ldhu	r2,-24(fp)
   210d0:	1885c83a 	sub	r2,r3,r2
   210d4:	1000010e 	bge	r2,zero,210dc <SH1106_DrawFilledTriangle+0x88>
   210d8:	0085c83a 	sub	r2,zero,r2
   210dc:	e0bff88d 	sth	r2,-30(fp)
	deltay = ABS(y2 - y1);
   210e0:	e0fffd0b 	ldhu	r3,-12(fp)
   210e4:	e0bffb0b 	ldhu	r2,-20(fp)
   210e8:	1885c83a 	sub	r2,r3,r2
   210ec:	1000010e 	bge	r2,zero,210f4 <SH1106_DrawFilledTriangle+0xa0>
   210f0:	0085c83a 	sub	r2,zero,r2
   210f4:	e0bff90d 	sth	r2,-28(fp)
	x = x1;
   210f8:	e0bffa0b 	ldhu	r2,-24(fp)
   210fc:	e0bff30d 	sth	r2,-52(fp)
	y = y1;
   21100:	e0bffb0b 	ldhu	r2,-20(fp)
   21104:	e0bff38d 	sth	r2,-50(fp)

	if (x2 >= x1) {
   21108:	e0fffc0b 	ldhu	r3,-16(fp)
   2110c:	e0bffa0b 	ldhu	r2,-24(fp)
   21110:	18800536 	bltu	r3,r2,21128 <SH1106_DrawFilledTriangle+0xd4>
		xinc1 = 1;
   21114:	00800044 	movi	r2,1
   21118:	e0bff40d 	sth	r2,-48(fp)
		xinc2 = 1;
   2111c:	00800044 	movi	r2,1
   21120:	e0bff48d 	sth	r2,-46(fp)
   21124:	00000406 	br	21138 <SH1106_DrawFilledTriangle+0xe4>
	} else {
		xinc1 = -1;
   21128:	00bfffc4 	movi	r2,-1
   2112c:	e0bff40d 	sth	r2,-48(fp)
		xinc2 = -1;
   21130:	00bfffc4 	movi	r2,-1
   21134:	e0bff48d 	sth	r2,-46(fp)
	}

	if (y2 >= y1) {
   21138:	e0fffd0b 	ldhu	r3,-12(fp)
   2113c:	e0bffb0b 	ldhu	r2,-20(fp)
   21140:	18800536 	bltu	r3,r2,21158 <SH1106_DrawFilledTriangle+0x104>
		yinc1 = 1;
   21144:	00800044 	movi	r2,1
   21148:	e0bff50d 	sth	r2,-44(fp)
		yinc2 = 1;
   2114c:	00800044 	movi	r2,1
   21150:	e0bff58d 	sth	r2,-42(fp)
   21154:	00000406 	br	21168 <SH1106_DrawFilledTriangle+0x114>
	} else {
		yinc1 = -1;
   21158:	00bfffc4 	movi	r2,-1
   2115c:	e0bff50d 	sth	r2,-44(fp)
		yinc2 = -1;
   21160:	00bfffc4 	movi	r2,-1
   21164:	e0bff58d 	sth	r2,-42(fp)
	}

	if (deltax >= deltay){
   21168:	e0fff88f 	ldh	r3,-30(fp)
   2116c:	e0bff90f 	ldh	r2,-28(fp)
   21170:	18800e16 	blt	r3,r2,211ac <SH1106_DrawFilledTriangle+0x158>
		xinc1 = 0;
   21174:	e03ff40d 	sth	zero,-48(fp)
		yinc2 = 0;
   21178:	e03ff58d 	sth	zero,-42(fp)
		den = deltax;
   2117c:	e0bff88b 	ldhu	r2,-30(fp)
   21180:	e0bff60d 	sth	r2,-40(fp)
		num = deltax / 2;
   21184:	e0bff88f 	ldh	r2,-30(fp)
   21188:	1006d7fa 	srli	r3,r2,31
   2118c:	1885883a 	add	r2,r3,r2
   21190:	1005d07a 	srai	r2,r2,1
   21194:	e0bff68d 	sth	r2,-38(fp)
		numadd = deltay;
   21198:	e0bff90b 	ldhu	r2,-28(fp)
   2119c:	e0bff70d 	sth	r2,-36(fp)
		numpixels = deltax;
   211a0:	e0bff88b 	ldhu	r2,-30(fp)
   211a4:	e0bff78d 	sth	r2,-34(fp)
   211a8:	00000d06 	br	211e0 <SH1106_DrawFilledTriangle+0x18c>
	} else {
		xinc2 = 0;
   211ac:	e03ff48d 	sth	zero,-46(fp)
		yinc1 = 0;
   211b0:	e03ff50d 	sth	zero,-44(fp)
		den = deltay;
   211b4:	e0bff90b 	ldhu	r2,-28(fp)
   211b8:	e0bff60d 	sth	r2,-40(fp)
		num = deltay / 2;
   211bc:	e0bff90f 	ldh	r2,-28(fp)
   211c0:	1006d7fa 	srli	r3,r2,31
   211c4:	1885883a 	add	r2,r3,r2
   211c8:	1005d07a 	srai	r2,r2,1
   211cc:	e0bff68d 	sth	r2,-38(fp)
		numadd = deltax;
   211d0:	e0bff88b 	ldhu	r2,-30(fp)
   211d4:	e0bff70d 	sth	r2,-36(fp)
		numpixels = deltay;
   211d8:	e0bff90b 	ldhu	r2,-28(fp)
   211dc:	e0bff78d 	sth	r2,-34(fp)
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
   211e0:	e03ff80d 	sth	zero,-32(fp)
   211e4:	00002b06 	br	21294 <SH1106_DrawFilledTriangle+0x240>
		SH1106_DrawLine(x, y, x3, y3, color);
   211e8:	e0bff30b 	ldhu	r2,-52(fp)
   211ec:	10ffffcc 	andi	r3,r2,65535
   211f0:	e0bff38b 	ldhu	r2,-50(fp)
   211f4:	113fffcc 	andi	r4,r2,65535
   211f8:	e17ffe0b 	ldhu	r5,-8(fp)
   211fc:	e1bfff0b 	ldhu	r6,-4(fp)
   21200:	e0800417 	ldw	r2,16(fp)
   21204:	d8800015 	stw	r2,0(sp)
   21208:	300f883a 	mov	r7,r6
   2120c:	280d883a 	mov	r6,r5
   21210:	200b883a 	mov	r5,r4
   21214:	1809883a 	mov	r4,r3
   21218:	00209b40 	call	209b4 <SH1106_DrawLine>

		num += numadd;
   2121c:	e0fff68b 	ldhu	r3,-38(fp)
   21220:	e0bff70b 	ldhu	r2,-36(fp)
   21224:	1885883a 	add	r2,r3,r2
   21228:	e0bff68d 	sth	r2,-38(fp)
		if (num >= den) {
   2122c:	e0fff68f 	ldh	r3,-38(fp)
   21230:	e0bff60f 	ldh	r2,-40(fp)
   21234:	18800c16 	blt	r3,r2,21268 <SH1106_DrawFilledTriangle+0x214>
			num -= den;
   21238:	e0fff68b 	ldhu	r3,-38(fp)
   2123c:	e0bff60b 	ldhu	r2,-40(fp)
   21240:	1885c83a 	sub	r2,r3,r2
   21244:	e0bff68d 	sth	r2,-38(fp)
			x += xinc1;
   21248:	e0fff30b 	ldhu	r3,-52(fp)
   2124c:	e0bff40b 	ldhu	r2,-48(fp)
   21250:	1885883a 	add	r2,r3,r2
   21254:	e0bff30d 	sth	r2,-52(fp)
			y += yinc1;
   21258:	e0fff38b 	ldhu	r3,-50(fp)
   2125c:	e0bff50b 	ldhu	r2,-44(fp)
   21260:	1885883a 	add	r2,r3,r2
   21264:	e0bff38d 	sth	r2,-50(fp)
		}
		x += xinc2;
   21268:	e0fff30b 	ldhu	r3,-52(fp)
   2126c:	e0bff48b 	ldhu	r2,-46(fp)
   21270:	1885883a 	add	r2,r3,r2
   21274:	e0bff30d 	sth	r2,-52(fp)
		y += yinc2;
   21278:	e0fff38b 	ldhu	r3,-50(fp)
   2127c:	e0bff58b 	ldhu	r2,-42(fp)
   21280:	1885883a 	add	r2,r3,r2
   21284:	e0bff38d 	sth	r2,-50(fp)
		num = deltay / 2;
		numadd = deltax;
		numpixels = deltay;
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
   21288:	e0bff80b 	ldhu	r2,-32(fp)
   2128c:	10800044 	addi	r2,r2,1
   21290:	e0bff80d 	sth	r2,-32(fp)
   21294:	e0bff80f 	ldh	r2,-32(fp)
   21298:	e0fff78f 	ldh	r3,-34(fp)
   2129c:	18bfd20e 	bge	r3,r2,211e8 <__alt_data_end+0xfffe11e8>
			y += yinc1;
		}
		x += xinc2;
		y += yinc2;
	}
}
   212a0:	0001883a 	nop
   212a4:	e037883a 	mov	sp,fp
   212a8:	dfc00117 	ldw	ra,4(sp)
   212ac:	df000017 	ldw	fp,0(sp)
   212b0:	dec00204 	addi	sp,sp,8
   212b4:	f800283a 	ret

000212b8 <SH1106_DrawCircle>:

void SH1106_DrawCircle(int16_t x0, int16_t y0, int16_t r, SH1106_COLOR_t c) {
   212b8:	defff704 	addi	sp,sp,-36
   212bc:	dfc00815 	stw	ra,32(sp)
   212c0:	df000715 	stw	fp,28(sp)
   212c4:	df000704 	addi	fp,sp,28
   212c8:	2807883a 	mov	r3,r5
   212cc:	3005883a 	mov	r2,r6
   212d0:	e1ffff15 	stw	r7,-4(fp)
   212d4:	e13ffc0d 	sth	r4,-16(fp)
   212d8:	e0fffd0d 	sth	r3,-12(fp)
   212dc:	e0bffe0d 	sth	r2,-8(fp)
	int16_t f = 1 - r;
   212e0:	e0bffe0b 	ldhu	r2,-8(fp)
   212e4:	00c00044 	movi	r3,1
   212e8:	1885c83a 	sub	r2,r3,r2
   212ec:	e0bff90d 	sth	r2,-28(fp)
	int16_t ddF_x = 1;
   212f0:	00800044 	movi	r2,1
   212f4:	e0bff98d 	sth	r2,-26(fp)
	int16_t ddF_y = -2 * r;
   212f8:	e0bffe0b 	ldhu	r2,-8(fp)
   212fc:	0007883a 	mov	r3,zero
   21300:	1885c83a 	sub	r2,r3,r2
   21304:	1085883a 	add	r2,r2,r2
   21308:	e0bffa0d 	sth	r2,-24(fp)
	int16_t x = 0;
   2130c:	e03ffa8d 	sth	zero,-22(fp)
	int16_t y = r;
   21310:	e0bffe0b 	ldhu	r2,-8(fp)
   21314:	e0bffb0d 	sth	r2,-20(fp)

    SH1106_DrawPixel(x0, y0 + r, c);
   21318:	e0bffc0b 	ldhu	r2,-16(fp)
   2131c:	113fffcc 	andi	r4,r2,65535
   21320:	e0fffd0b 	ldhu	r3,-12(fp)
   21324:	e0bffe0b 	ldhu	r2,-8(fp)
   21328:	1885883a 	add	r2,r3,r2
   2132c:	10bfffcc 	andi	r2,r2,65535
   21330:	e1bfff17 	ldw	r6,-4(fp)
   21334:	100b883a 	mov	r5,r2
   21338:	00205b00 	call	205b0 <SH1106_DrawPixel>
    SH1106_DrawPixel(x0, y0 - r, c);
   2133c:	e0bffc0b 	ldhu	r2,-16(fp)
   21340:	113fffcc 	andi	r4,r2,65535
   21344:	e0fffd0b 	ldhu	r3,-12(fp)
   21348:	e0bffe0b 	ldhu	r2,-8(fp)
   2134c:	1885c83a 	sub	r2,r3,r2
   21350:	10bfffcc 	andi	r2,r2,65535
   21354:	e1bfff17 	ldw	r6,-4(fp)
   21358:	100b883a 	mov	r5,r2
   2135c:	00205b00 	call	205b0 <SH1106_DrawPixel>
    SH1106_DrawPixel(x0 + r, y0, c);
   21360:	e0fffc0b 	ldhu	r3,-16(fp)
   21364:	e0bffe0b 	ldhu	r2,-8(fp)
   21368:	1885883a 	add	r2,r3,r2
   2136c:	10bfffcc 	andi	r2,r2,65535
   21370:	e0fffd0b 	ldhu	r3,-12(fp)
   21374:	18ffffcc 	andi	r3,r3,65535
   21378:	e1bfff17 	ldw	r6,-4(fp)
   2137c:	180b883a 	mov	r5,r3
   21380:	1009883a 	mov	r4,r2
   21384:	00205b00 	call	205b0 <SH1106_DrawPixel>
    SH1106_DrawPixel(x0 - r, y0, c);
   21388:	e0fffc0b 	ldhu	r3,-16(fp)
   2138c:	e0bffe0b 	ldhu	r2,-8(fp)
   21390:	1885c83a 	sub	r2,r3,r2
   21394:	10bfffcc 	andi	r2,r2,65535
   21398:	e0fffd0b 	ldhu	r3,-12(fp)
   2139c:	18ffffcc 	andi	r3,r3,65535
   213a0:	e1bfff17 	ldw	r6,-4(fp)
   213a4:	180b883a 	mov	r5,r3
   213a8:	1009883a 	mov	r4,r2
   213ac:	00205b00 	call	205b0 <SH1106_DrawPixel>

    while (x < y) {
   213b0:	00006e06 	br	2156c <SH1106_DrawCircle+0x2b4>
        if (f >= 0) {
   213b4:	e0bff90f 	ldh	r2,-28(fp)
   213b8:	10000a16 	blt	r2,zero,213e4 <SH1106_DrawCircle+0x12c>
            y--;
   213bc:	e0bffb0b 	ldhu	r2,-20(fp)
   213c0:	10bfffc4 	addi	r2,r2,-1
   213c4:	e0bffb0d 	sth	r2,-20(fp)
            ddF_y += 2;
   213c8:	e0bffa0b 	ldhu	r2,-24(fp)
   213cc:	10800084 	addi	r2,r2,2
   213d0:	e0bffa0d 	sth	r2,-24(fp)
            f += ddF_y;
   213d4:	e0fff90b 	ldhu	r3,-28(fp)
   213d8:	e0bffa0b 	ldhu	r2,-24(fp)
   213dc:	1885883a 	add	r2,r3,r2
   213e0:	e0bff90d 	sth	r2,-28(fp)
        }
        x++;
   213e4:	e0bffa8b 	ldhu	r2,-22(fp)
   213e8:	10800044 	addi	r2,r2,1
   213ec:	e0bffa8d 	sth	r2,-22(fp)
        ddF_x += 2;
   213f0:	e0bff98b 	ldhu	r2,-26(fp)
   213f4:	10800084 	addi	r2,r2,2
   213f8:	e0bff98d 	sth	r2,-26(fp)
        f += ddF_x;
   213fc:	e0fff90b 	ldhu	r3,-28(fp)
   21400:	e0bff98b 	ldhu	r2,-26(fp)
   21404:	1885883a 	add	r2,r3,r2
   21408:	e0bff90d 	sth	r2,-28(fp)

        SH1106_DrawPixel(x0 + x, y0 + y, c);
   2140c:	e0fffc0b 	ldhu	r3,-16(fp)
   21410:	e0bffa8b 	ldhu	r2,-22(fp)
   21414:	1885883a 	add	r2,r3,r2
   21418:	113fffcc 	andi	r4,r2,65535
   2141c:	e0fffd0b 	ldhu	r3,-12(fp)
   21420:	e0bffb0b 	ldhu	r2,-20(fp)
   21424:	1885883a 	add	r2,r3,r2
   21428:	10bfffcc 	andi	r2,r2,65535
   2142c:	e1bfff17 	ldw	r6,-4(fp)
   21430:	100b883a 	mov	r5,r2
   21434:	00205b00 	call	205b0 <SH1106_DrawPixel>
        SH1106_DrawPixel(x0 - x, y0 + y, c);
   21438:	e0fffc0b 	ldhu	r3,-16(fp)
   2143c:	e0bffa8b 	ldhu	r2,-22(fp)
   21440:	1885c83a 	sub	r2,r3,r2
   21444:	113fffcc 	andi	r4,r2,65535
   21448:	e0fffd0b 	ldhu	r3,-12(fp)
   2144c:	e0bffb0b 	ldhu	r2,-20(fp)
   21450:	1885883a 	add	r2,r3,r2
   21454:	10bfffcc 	andi	r2,r2,65535
   21458:	e1bfff17 	ldw	r6,-4(fp)
   2145c:	100b883a 	mov	r5,r2
   21460:	00205b00 	call	205b0 <SH1106_DrawPixel>
        SH1106_DrawPixel(x0 + x, y0 - y, c);
   21464:	e0fffc0b 	ldhu	r3,-16(fp)
   21468:	e0bffa8b 	ldhu	r2,-22(fp)
   2146c:	1885883a 	add	r2,r3,r2
   21470:	113fffcc 	andi	r4,r2,65535
   21474:	e0fffd0b 	ldhu	r3,-12(fp)
   21478:	e0bffb0b 	ldhu	r2,-20(fp)
   2147c:	1885c83a 	sub	r2,r3,r2
   21480:	10bfffcc 	andi	r2,r2,65535
   21484:	e1bfff17 	ldw	r6,-4(fp)
   21488:	100b883a 	mov	r5,r2
   2148c:	00205b00 	call	205b0 <SH1106_DrawPixel>
        SH1106_DrawPixel(x0 - x, y0 - y, c);
   21490:	e0fffc0b 	ldhu	r3,-16(fp)
   21494:	e0bffa8b 	ldhu	r2,-22(fp)
   21498:	1885c83a 	sub	r2,r3,r2
   2149c:	113fffcc 	andi	r4,r2,65535
   214a0:	e0fffd0b 	ldhu	r3,-12(fp)
   214a4:	e0bffb0b 	ldhu	r2,-20(fp)
   214a8:	1885c83a 	sub	r2,r3,r2
   214ac:	10bfffcc 	andi	r2,r2,65535
   214b0:	e1bfff17 	ldw	r6,-4(fp)
   214b4:	100b883a 	mov	r5,r2
   214b8:	00205b00 	call	205b0 <SH1106_DrawPixel>

        SH1106_DrawPixel(x0 + y, y0 + x, c);
   214bc:	e0fffc0b 	ldhu	r3,-16(fp)
   214c0:	e0bffb0b 	ldhu	r2,-20(fp)
   214c4:	1885883a 	add	r2,r3,r2
   214c8:	113fffcc 	andi	r4,r2,65535
   214cc:	e0fffd0b 	ldhu	r3,-12(fp)
   214d0:	e0bffa8b 	ldhu	r2,-22(fp)
   214d4:	1885883a 	add	r2,r3,r2
   214d8:	10bfffcc 	andi	r2,r2,65535
   214dc:	e1bfff17 	ldw	r6,-4(fp)
   214e0:	100b883a 	mov	r5,r2
   214e4:	00205b00 	call	205b0 <SH1106_DrawPixel>
        SH1106_DrawPixel(x0 - y, y0 + x, c);
   214e8:	e0fffc0b 	ldhu	r3,-16(fp)
   214ec:	e0bffb0b 	ldhu	r2,-20(fp)
   214f0:	1885c83a 	sub	r2,r3,r2
   214f4:	113fffcc 	andi	r4,r2,65535
   214f8:	e0fffd0b 	ldhu	r3,-12(fp)
   214fc:	e0bffa8b 	ldhu	r2,-22(fp)
   21500:	1885883a 	add	r2,r3,r2
   21504:	10bfffcc 	andi	r2,r2,65535
   21508:	e1bfff17 	ldw	r6,-4(fp)
   2150c:	100b883a 	mov	r5,r2
   21510:	00205b00 	call	205b0 <SH1106_DrawPixel>
        SH1106_DrawPixel(x0 + y, y0 - x, c);
   21514:	e0fffc0b 	ldhu	r3,-16(fp)
   21518:	e0bffb0b 	ldhu	r2,-20(fp)
   2151c:	1885883a 	add	r2,r3,r2
   21520:	113fffcc 	andi	r4,r2,65535
   21524:	e0fffd0b 	ldhu	r3,-12(fp)
   21528:	e0bffa8b 	ldhu	r2,-22(fp)
   2152c:	1885c83a 	sub	r2,r3,r2
   21530:	10bfffcc 	andi	r2,r2,65535
   21534:	e1bfff17 	ldw	r6,-4(fp)
   21538:	100b883a 	mov	r5,r2
   2153c:	00205b00 	call	205b0 <SH1106_DrawPixel>
        SH1106_DrawPixel(x0 - y, y0 - x, c);
   21540:	e0fffc0b 	ldhu	r3,-16(fp)
   21544:	e0bffb0b 	ldhu	r2,-20(fp)
   21548:	1885c83a 	sub	r2,r3,r2
   2154c:	113fffcc 	andi	r4,r2,65535
   21550:	e0fffd0b 	ldhu	r3,-12(fp)
   21554:	e0bffa8b 	ldhu	r2,-22(fp)
   21558:	1885c83a 	sub	r2,r3,r2
   2155c:	10bfffcc 	andi	r2,r2,65535
   21560:	e1bfff17 	ldw	r6,-4(fp)
   21564:	100b883a 	mov	r5,r2
   21568:	00205b00 	call	205b0 <SH1106_DrawPixel>
    SH1106_DrawPixel(x0, y0 + r, c);
    SH1106_DrawPixel(x0, y0 - r, c);
    SH1106_DrawPixel(x0 + r, y0, c);
    SH1106_DrawPixel(x0 - r, y0, c);

    while (x < y) {
   2156c:	e0fffa8f 	ldh	r3,-22(fp)
   21570:	e0bffb0f 	ldh	r2,-20(fp)
   21574:	18bf8f16 	blt	r3,r2,213b4 <__alt_data_end+0xfffe13b4>
        SH1106_DrawPixel(x0 + y, y0 + x, c);
        SH1106_DrawPixel(x0 - y, y0 + x, c);
        SH1106_DrawPixel(x0 + y, y0 - x, c);
        SH1106_DrawPixel(x0 - y, y0 - x, c);
    }
}
   21578:	0001883a 	nop
   2157c:	e037883a 	mov	sp,fp
   21580:	dfc00117 	ldw	ra,4(sp)
   21584:	df000017 	ldw	fp,0(sp)
   21588:	dec00204 	addi	sp,sp,8
   2158c:	f800283a 	ret

00021590 <SH1106_DrawFilledCircle>:

void SH1106_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SH1106_COLOR_t c) {
   21590:	defff604 	addi	sp,sp,-40
   21594:	dfc00915 	stw	ra,36(sp)
   21598:	df000815 	stw	fp,32(sp)
   2159c:	df000804 	addi	fp,sp,32
   215a0:	2807883a 	mov	r3,r5
   215a4:	3005883a 	mov	r2,r6
   215a8:	e1ffff15 	stw	r7,-4(fp)
   215ac:	e13ffc0d 	sth	r4,-16(fp)
   215b0:	e0fffd0d 	sth	r3,-12(fp)
   215b4:	e0bffe0d 	sth	r2,-8(fp)
	int16_t f = 1 - r;
   215b8:	e0bffe0b 	ldhu	r2,-8(fp)
   215bc:	00c00044 	movi	r3,1
   215c0:	1885c83a 	sub	r2,r3,r2
   215c4:	e0bff90d 	sth	r2,-28(fp)
	int16_t ddF_x = 1;
   215c8:	00800044 	movi	r2,1
   215cc:	e0bff98d 	sth	r2,-26(fp)
	int16_t ddF_y = -2 * r;
   215d0:	e0bffe0b 	ldhu	r2,-8(fp)
   215d4:	0007883a 	mov	r3,zero
   215d8:	1885c83a 	sub	r2,r3,r2
   215dc:	1085883a 	add	r2,r2,r2
   215e0:	e0bffa0d 	sth	r2,-24(fp)
	int16_t x = 0;
   215e4:	e03ffa8d 	sth	zero,-22(fp)
	int16_t y = r;
   215e8:	e0bffe0b 	ldhu	r2,-8(fp)
   215ec:	e0bffb0d 	sth	r2,-20(fp)

    SH1106_DrawPixel(x0, y0 + r, c);
   215f0:	e0bffc0b 	ldhu	r2,-16(fp)
   215f4:	113fffcc 	andi	r4,r2,65535
   215f8:	e0fffd0b 	ldhu	r3,-12(fp)
   215fc:	e0bffe0b 	ldhu	r2,-8(fp)
   21600:	1885883a 	add	r2,r3,r2
   21604:	10bfffcc 	andi	r2,r2,65535
   21608:	e1bfff17 	ldw	r6,-4(fp)
   2160c:	100b883a 	mov	r5,r2
   21610:	00205b00 	call	205b0 <SH1106_DrawPixel>
    SH1106_DrawPixel(x0, y0 - r, c);
   21614:	e0bffc0b 	ldhu	r2,-16(fp)
   21618:	113fffcc 	andi	r4,r2,65535
   2161c:	e0fffd0b 	ldhu	r3,-12(fp)
   21620:	e0bffe0b 	ldhu	r2,-8(fp)
   21624:	1885c83a 	sub	r2,r3,r2
   21628:	10bfffcc 	andi	r2,r2,65535
   2162c:	e1bfff17 	ldw	r6,-4(fp)
   21630:	100b883a 	mov	r5,r2
   21634:	00205b00 	call	205b0 <SH1106_DrawPixel>
    SH1106_DrawPixel(x0 + r, y0, c);
   21638:	e0fffc0b 	ldhu	r3,-16(fp)
   2163c:	e0bffe0b 	ldhu	r2,-8(fp)
   21640:	1885883a 	add	r2,r3,r2
   21644:	10bfffcc 	andi	r2,r2,65535
   21648:	e0fffd0b 	ldhu	r3,-12(fp)
   2164c:	18ffffcc 	andi	r3,r3,65535
   21650:	e1bfff17 	ldw	r6,-4(fp)
   21654:	180b883a 	mov	r5,r3
   21658:	1009883a 	mov	r4,r2
   2165c:	00205b00 	call	205b0 <SH1106_DrawPixel>
    SH1106_DrawPixel(x0 - r, y0, c);
   21660:	e0fffc0b 	ldhu	r3,-16(fp)
   21664:	e0bffe0b 	ldhu	r2,-8(fp)
   21668:	1885c83a 	sub	r2,r3,r2
   2166c:	10bfffcc 	andi	r2,r2,65535
   21670:	e0fffd0b 	ldhu	r3,-12(fp)
   21674:	18ffffcc 	andi	r3,r3,65535
   21678:	e1bfff17 	ldw	r6,-4(fp)
   2167c:	180b883a 	mov	r5,r3
   21680:	1009883a 	mov	r4,r2
   21684:	00205b00 	call	205b0 <SH1106_DrawPixel>
    SH1106_DrawLine(x0 - r, y0, x0 + r, y0, c);
   21688:	e0fffc0b 	ldhu	r3,-16(fp)
   2168c:	e0bffe0b 	ldhu	r2,-8(fp)
   21690:	1885c83a 	sub	r2,r3,r2
   21694:	113fffcc 	andi	r4,r2,65535
   21698:	e0bffd0b 	ldhu	r2,-12(fp)
   2169c:	117fffcc 	andi	r5,r2,65535
   216a0:	e0fffc0b 	ldhu	r3,-16(fp)
   216a4:	e0bffe0b 	ldhu	r2,-8(fp)
   216a8:	1885883a 	add	r2,r3,r2
   216ac:	10ffffcc 	andi	r3,r2,65535
   216b0:	e0bffd0b 	ldhu	r2,-12(fp)
   216b4:	11bfffcc 	andi	r6,r2,65535
   216b8:	e0bfff17 	ldw	r2,-4(fp)
   216bc:	d8800015 	stw	r2,0(sp)
   216c0:	300f883a 	mov	r7,r6
   216c4:	180d883a 	mov	r6,r3
   216c8:	00209b40 	call	209b4 <SH1106_DrawLine>

    while (x < y) {
   216cc:	00006606 	br	21868 <SH1106_DrawFilledCircle+0x2d8>
        if (f >= 0) {
   216d0:	e0bff90f 	ldh	r2,-28(fp)
   216d4:	10000a16 	blt	r2,zero,21700 <SH1106_DrawFilledCircle+0x170>
            y--;
   216d8:	e0bffb0b 	ldhu	r2,-20(fp)
   216dc:	10bfffc4 	addi	r2,r2,-1
   216e0:	e0bffb0d 	sth	r2,-20(fp)
            ddF_y += 2;
   216e4:	e0bffa0b 	ldhu	r2,-24(fp)
   216e8:	10800084 	addi	r2,r2,2
   216ec:	e0bffa0d 	sth	r2,-24(fp)
            f += ddF_y;
   216f0:	e0fff90b 	ldhu	r3,-28(fp)
   216f4:	e0bffa0b 	ldhu	r2,-24(fp)
   216f8:	1885883a 	add	r2,r3,r2
   216fc:	e0bff90d 	sth	r2,-28(fp)
        }
        x++;
   21700:	e0bffa8b 	ldhu	r2,-22(fp)
   21704:	10800044 	addi	r2,r2,1
   21708:	e0bffa8d 	sth	r2,-22(fp)
        ddF_x += 2;
   2170c:	e0bff98b 	ldhu	r2,-26(fp)
   21710:	10800084 	addi	r2,r2,2
   21714:	e0bff98d 	sth	r2,-26(fp)
        f += ddF_x;
   21718:	e0fff90b 	ldhu	r3,-28(fp)
   2171c:	e0bff98b 	ldhu	r2,-26(fp)
   21720:	1885883a 	add	r2,r3,r2
   21724:	e0bff90d 	sth	r2,-28(fp)

        SH1106_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
   21728:	e0fffc0b 	ldhu	r3,-16(fp)
   2172c:	e0bffa8b 	ldhu	r2,-22(fp)
   21730:	1885c83a 	sub	r2,r3,r2
   21734:	113fffcc 	andi	r4,r2,65535
   21738:	e0fffd0b 	ldhu	r3,-12(fp)
   2173c:	e0bffb0b 	ldhu	r2,-20(fp)
   21740:	1885883a 	add	r2,r3,r2
   21744:	117fffcc 	andi	r5,r2,65535
   21748:	e0fffc0b 	ldhu	r3,-16(fp)
   2174c:	e0bffa8b 	ldhu	r2,-22(fp)
   21750:	1885883a 	add	r2,r3,r2
   21754:	11bfffcc 	andi	r6,r2,65535
   21758:	e0fffd0b 	ldhu	r3,-12(fp)
   2175c:	e0bffb0b 	ldhu	r2,-20(fp)
   21760:	1885883a 	add	r2,r3,r2
   21764:	10ffffcc 	andi	r3,r2,65535
   21768:	e0bfff17 	ldw	r2,-4(fp)
   2176c:	d8800015 	stw	r2,0(sp)
   21770:	180f883a 	mov	r7,r3
   21774:	00209b40 	call	209b4 <SH1106_DrawLine>
        SH1106_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
   21778:	e0fffc0b 	ldhu	r3,-16(fp)
   2177c:	e0bffa8b 	ldhu	r2,-22(fp)
   21780:	1885883a 	add	r2,r3,r2
   21784:	113fffcc 	andi	r4,r2,65535
   21788:	e0fffd0b 	ldhu	r3,-12(fp)
   2178c:	e0bffb0b 	ldhu	r2,-20(fp)
   21790:	1885c83a 	sub	r2,r3,r2
   21794:	117fffcc 	andi	r5,r2,65535
   21798:	e0fffc0b 	ldhu	r3,-16(fp)
   2179c:	e0bffa8b 	ldhu	r2,-22(fp)
   217a0:	1885c83a 	sub	r2,r3,r2
   217a4:	11bfffcc 	andi	r6,r2,65535
   217a8:	e0fffd0b 	ldhu	r3,-12(fp)
   217ac:	e0bffb0b 	ldhu	r2,-20(fp)
   217b0:	1885c83a 	sub	r2,r3,r2
   217b4:	10ffffcc 	andi	r3,r2,65535
   217b8:	e0bfff17 	ldw	r2,-4(fp)
   217bc:	d8800015 	stw	r2,0(sp)
   217c0:	180f883a 	mov	r7,r3
   217c4:	00209b40 	call	209b4 <SH1106_DrawLine>

        SH1106_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
   217c8:	e0fffc0b 	ldhu	r3,-16(fp)
   217cc:	e0bffb0b 	ldhu	r2,-20(fp)
   217d0:	1885883a 	add	r2,r3,r2
   217d4:	113fffcc 	andi	r4,r2,65535
   217d8:	e0fffd0b 	ldhu	r3,-12(fp)
   217dc:	e0bffa8b 	ldhu	r2,-22(fp)
   217e0:	1885883a 	add	r2,r3,r2
   217e4:	117fffcc 	andi	r5,r2,65535
   217e8:	e0fffc0b 	ldhu	r3,-16(fp)
   217ec:	e0bffb0b 	ldhu	r2,-20(fp)
   217f0:	1885c83a 	sub	r2,r3,r2
   217f4:	11bfffcc 	andi	r6,r2,65535
   217f8:	e0fffd0b 	ldhu	r3,-12(fp)
   217fc:	e0bffa8b 	ldhu	r2,-22(fp)
   21800:	1885883a 	add	r2,r3,r2
   21804:	10ffffcc 	andi	r3,r2,65535
   21808:	e0bfff17 	ldw	r2,-4(fp)
   2180c:	d8800015 	stw	r2,0(sp)
   21810:	180f883a 	mov	r7,r3
   21814:	00209b40 	call	209b4 <SH1106_DrawLine>
        SH1106_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
   21818:	e0fffc0b 	ldhu	r3,-16(fp)
   2181c:	e0bffb0b 	ldhu	r2,-20(fp)
   21820:	1885883a 	add	r2,r3,r2
   21824:	113fffcc 	andi	r4,r2,65535
   21828:	e0fffd0b 	ldhu	r3,-12(fp)
   2182c:	e0bffa8b 	ldhu	r2,-22(fp)
   21830:	1885c83a 	sub	r2,r3,r2
   21834:	117fffcc 	andi	r5,r2,65535
   21838:	e0fffc0b 	ldhu	r3,-16(fp)
   2183c:	e0bffb0b 	ldhu	r2,-20(fp)
   21840:	1885c83a 	sub	r2,r3,r2
   21844:	11bfffcc 	andi	r6,r2,65535
   21848:	e0fffd0b 	ldhu	r3,-12(fp)
   2184c:	e0bffa8b 	ldhu	r2,-22(fp)
   21850:	1885c83a 	sub	r2,r3,r2
   21854:	10ffffcc 	andi	r3,r2,65535
   21858:	e0bfff17 	ldw	r2,-4(fp)
   2185c:	d8800015 	stw	r2,0(sp)
   21860:	180f883a 	mov	r7,r3
   21864:	00209b40 	call	209b4 <SH1106_DrawLine>
    SH1106_DrawPixel(x0, y0 - r, c);
    SH1106_DrawPixel(x0 + r, y0, c);
    SH1106_DrawPixel(x0 - r, y0, c);
    SH1106_DrawLine(x0 - r, y0, x0 + r, y0, c);

    while (x < y) {
   21868:	e0fffa8f 	ldh	r3,-22(fp)
   2186c:	e0bffb0f 	ldh	r2,-20(fp)
   21870:	18bf9716 	blt	r3,r2,216d0 <__alt_data_end+0xfffe16d0>
        SH1106_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);

        SH1106_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
        SH1106_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}
   21874:	0001883a 	nop
   21878:	e037883a 	mov	sp,fp
   2187c:	dfc00117 	ldw	ra,4(sp)
   21880:	df000017 	ldw	fp,0(sp)
   21884:	dec00204 	addi	sp,sp,8
   21888:	f800283a 	ret

0002188c <SH1106_Clear>:



void SH1106_Clear (void)
{
   2188c:	defffe04 	addi	sp,sp,-8
   21890:	dfc00115 	stw	ra,4(sp)
   21894:	df000015 	stw	fp,0(sp)
   21898:	d839883a 	mov	fp,sp
	SH1106_Fill (0);
   2189c:	0009883a 	mov	r4,zero
   218a0:	002055c0 	call	2055c <SH1106_Fill>
    SH1106_UpdateScreen();
   218a4:	00204300 	call	20430 <SH1106_UpdateScreen>
}
   218a8:	0001883a 	nop
   218ac:	e037883a 	mov	sp,fp
   218b0:	dfc00117 	ldw	ra,4(sp)
   218b4:	df000017 	ldw	fp,0(sp)
   218b8:	dec00204 	addi	sp,sp,8
   218bc:	f800283a 	ret

000218c0 <SH1106_ON>:
void SH1106_ON(void) {
   218c0:	defffe04 	addi	sp,sp,-8
   218c4:	dfc00115 	stw	ra,4(sp)
   218c8:	df000015 	stw	fp,0(sp)
   218cc:	d839883a 	mov	fp,sp
	SH1106_WRITECOMMAND(0x8D);
   218d0:	01802344 	movi	r6,141
   218d4:	000b883a 	mov	r5,zero
   218d8:	01000f04 	movi	r4,60
   218dc:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x14);
   218e0:	01800504 	movi	r6,20
   218e4:	000b883a 	mov	r5,zero
   218e8:	01000f04 	movi	r4,60
   218ec:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAF);
   218f0:	01802bc4 	movi	r6,175
   218f4:	000b883a 	mov	r5,zero
   218f8:	01000f04 	movi	r4,60
   218fc:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
}
   21900:	0001883a 	nop
   21904:	e037883a 	mov	sp,fp
   21908:	dfc00117 	ldw	ra,4(sp)
   2190c:	df000017 	ldw	fp,0(sp)
   21910:	dec00204 	addi	sp,sp,8
   21914:	f800283a 	ret

00021918 <SH1106_OFF>:
void SH1106_OFF(void) {
   21918:	defffe04 	addi	sp,sp,-8
   2191c:	dfc00115 	stw	ra,4(sp)
   21920:	df000015 	stw	fp,0(sp)
   21924:	d839883a 	mov	fp,sp
	SH1106_WRITECOMMAND(0x8D);
   21928:	01802344 	movi	r6,141
   2192c:	000b883a 	mov	r5,zero
   21930:	01000f04 	movi	r4,60
   21934:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x10);
   21938:	01800404 	movi	r6,16
   2193c:	000b883a 	mov	r5,zero
   21940:	01000f04 	movi	r4,60
   21944:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAE);
   21948:	01802b84 	movi	r6,174
   2194c:	000b883a 	mov	r5,zero
   21950:	01000f04 	movi	r4,60
   21954:	0021a3c0 	call	21a3c <SH1106_I2C_Write>
}
   21958:	0001883a 	nop
   2195c:	e037883a 	mov	sp,fp
   21960:	dfc00117 	ldw	ra,4(sp)
   21964:	df000017 	ldw	fp,0(sp)
   21968:	dec00204 	addi	sp,sp,8
   2196c:	f800283a 	ret

00021970 <SH1106_I2C_WriteMulti>:

void SH1106_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
   21970:	deffb904 	addi	sp,sp,-284
   21974:	dfc04615 	stw	ra,280(sp)
   21978:	df004515 	stw	fp,276(sp)
   2197c:	df004504 	addi	fp,sp,276
   21980:	2807883a 	mov	r3,r5
   21984:	e1bffe15 	stw	r6,-8(fp)
   21988:	3805883a 	mov	r2,r7
   2198c:	e13ffc05 	stb	r4,-16(fp)
   21990:	e0fffd05 	stb	r3,-12(fp)
   21994:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t dt[256];
	dt[0] = reg;
   21998:	e0bffd03 	ldbu	r2,-12(fp)
   2199c:	e0bfbb45 	stb	r2,-275(fp)
	uint8_t i;
	for(i = 0; i < count; i++)
   219a0:	e03fbb05 	stb	zero,-276(fp)
   219a4:	00000c06 	br	219d8 <SH1106_I2C_WriteMulti+0x68>
		dt[i+1] = data[i];
   219a8:	e0bfbb03 	ldbu	r2,-276(fp)
   219ac:	10800044 	addi	r2,r2,1
   219b0:	e0ffbb03 	ldbu	r3,-276(fp)
   219b4:	e13ffe17 	ldw	r4,-8(fp)
   219b8:	20c7883a 	add	r3,r4,r3
   219bc:	18c00003 	ldbu	r3,0(r3)
   219c0:	e13fbb44 	addi	r4,fp,-275
   219c4:	2085883a 	add	r2,r4,r2
   219c8:	10c00005 	stb	r3,0(r2)

void SH1106_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
	uint8_t dt[256];
	dt[0] = reg;
	uint8_t i;
	for(i = 0; i < count; i++)
   219cc:	e0bfbb03 	ldbu	r2,-276(fp)
   219d0:	10800044 	addi	r2,r2,1
   219d4:	e0bfbb05 	stb	r2,-276(fp)
   219d8:	e0bfbb03 	ldbu	r2,-276(fp)
   219dc:	10ffffcc 	andi	r3,r2,65535
   219e0:	e0bfff0b 	ldhu	r2,-4(fp)
   219e4:	18bff036 	bltu	r3,r2,219a8 <__alt_data_end+0xfffe19a8>
		dt[i+1] = data[i];
	alt_avalon_i2c_master_target_set(i2c_dev,address);
   219e8:	d0a0df17 	ldw	r2,-31876(gp)
   219ec:	e0fffc03 	ldbu	r3,-16(fp)
   219f0:	180b883a 	mov	r5,r3
   219f4:	1009883a 	mov	r4,r2
   219f8:	00235e80 	call	235e8 <alt_avalon_i2c_master_target_set>
	alt_avalon_i2c_master_tx(SH1106_I2C, dt, count+1,
   219fc:	d0e0df17 	ldw	r3,-31876(gp)
   21a00:	e0bfff0b 	ldhu	r2,-4(fp)
   21a04:	10800044 	addi	r2,r2,1
   21a08:	1009883a 	mov	r4,r2
   21a0c:	e0bfbb44 	addi	r2,fp,-275
   21a10:	000f883a 	mov	r7,zero
   21a14:	200d883a 	mov	r6,r4
   21a18:	100b883a 	mov	r5,r2
   21a1c:	1809883a 	mov	r4,r3
   21a20:	00237f00 	call	237f0 <alt_avalon_i2c_master_tx>
								ALT_AVALON_I2C_NO_INTERRUPTS);
}
   21a24:	0001883a 	nop
   21a28:	e037883a 	mov	sp,fp
   21a2c:	dfc00117 	ldw	ra,4(sp)
   21a30:	df000017 	ldw	fp,0(sp)
   21a34:	dec00204 	addi	sp,sp,8
   21a38:	f800283a 	ret

00021a3c <SH1106_I2C_Write>:


void SH1106_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
   21a3c:	defffa04 	addi	sp,sp,-24
   21a40:	dfc00515 	stw	ra,20(sp)
   21a44:	df000415 	stw	fp,16(sp)
   21a48:	df000404 	addi	fp,sp,16
   21a4c:	2807883a 	mov	r3,r5
   21a50:	3005883a 	mov	r2,r6
   21a54:	e13ffd05 	stb	r4,-12(fp)
   21a58:	e0fffe05 	stb	r3,-8(fp)
   21a5c:	e0bfff05 	stb	r2,-4(fp)
	uint8_t dt[2];
	dt[0] = reg;
   21a60:	e0bffe03 	ldbu	r2,-8(fp)
   21a64:	e0bffc05 	stb	r2,-16(fp)
	dt[1] = data;
   21a68:	e0bfff03 	ldbu	r2,-4(fp)
   21a6c:	e0bffc45 	stb	r2,-15(fp)
	alt_avalon_i2c_master_target_set(i2c_dev,address);
   21a70:	d0a0df17 	ldw	r2,-31876(gp)
   21a74:	e0fffd03 	ldbu	r3,-12(fp)
   21a78:	180b883a 	mov	r5,r3
   21a7c:	1009883a 	mov	r4,r2
   21a80:	00235e80 	call	235e8 <alt_avalon_i2c_master_target_set>
	alt_avalon_i2c_master_tx(SH1106_I2C, dt, 2,
   21a84:	d0a0df17 	ldw	r2,-31876(gp)
   21a88:	000f883a 	mov	r7,zero
   21a8c:	01800084 	movi	r6,2
   21a90:	e17ffc04 	addi	r5,fp,-16
   21a94:	1009883a 	mov	r4,r2
   21a98:	00237f00 	call	237f0 <alt_avalon_i2c_master_tx>
				ALT_AVALON_I2C_NO_INTERRUPTS);
}
   21a9c:	0001883a 	nop
   21aa0:	e037883a 	mov	sp,fp
   21aa4:	dfc00117 	ldw	ra,4(sp)
   21aa8:	df000017 	ldw	fp,0(sp)
   21aac:	dec00204 	addi	sp,sp,8
   21ab0:	f800283a 	ret

00021ab4 <SH1106_InvertDisplay>:

void SH1106_InvertDisplay (int i)
{
   21ab4:	defffd04 	addi	sp,sp,-12
   21ab8:	dfc00215 	stw	ra,8(sp)
   21abc:	df000115 	stw	fp,4(sp)
   21ac0:	df000104 	addi	fp,sp,4
   21ac4:	e13fff15 	stw	r4,-4(fp)
  if (i) SH1106_WRITECOMMAND (SH1106_INVERTDISPLAY);
   21ac8:	e0bfff17 	ldw	r2,-4(fp)
   21acc:	10000526 	beq	r2,zero,21ae4 <SH1106_InvertDisplay+0x30>
   21ad0:	018029c4 	movi	r6,167
   21ad4:	000b883a 	mov	r5,zero
   21ad8:	01000f04 	movi	r4,60
   21adc:	0021a3c0 	call	21a3c <SH1106_I2C_Write>

  else SH1106_WRITECOMMAND (SH1106_NORMALDISPLAY);

}
   21ae0:	00000406 	br	21af4 <SH1106_InvertDisplay+0x40>

void SH1106_InvertDisplay (int i)
{
  if (i) SH1106_WRITECOMMAND (SH1106_INVERTDISPLAY);

  else SH1106_WRITECOMMAND (SH1106_NORMALDISPLAY);
   21ae4:	01802984 	movi	r6,166
   21ae8:	000b883a 	mov	r5,zero
   21aec:	01000f04 	movi	r4,60
   21af0:	0021a3c0 	call	21a3c <SH1106_I2C_Write>

}
   21af4:	0001883a 	nop
   21af8:	e037883a 	mov	sp,fp
   21afc:	dfc00117 	ldw	ra,4(sp)
   21b00:	df000017 	ldw	fp,0(sp)
   21b04:	dec00204 	addi	sp,sp,8
   21b08:	f800283a 	ret

00021b0c <SH1106_DrawBitmap>:


void SH1106_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
   21b0c:	defff604 	addi	sp,sp,-40
   21b10:	dfc00915 	stw	ra,36(sp)
   21b14:	df000815 	stw	fp,32(sp)
   21b18:	df000804 	addi	fp,sp,32
   21b1c:	2011883a 	mov	r8,r4
   21b20:	e1bffc15 	stw	r6,-16(fp)
   21b24:	3809883a 	mov	r4,r7
   21b28:	e0c00217 	ldw	r3,8(fp)
   21b2c:	e0800317 	ldw	r2,12(fp)
   21b30:	e23ffa0d 	sth	r8,-24(fp)
   21b34:	e17ffb0d 	sth	r5,-20(fp)
   21b38:	e13ffd0d 	sth	r4,-12(fp)
   21b3c:	e0fffe0d 	sth	r3,-8(fp)
   21b40:	e0bfff0d 	sth	r2,-4(fp)

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   21b44:	e0bffd0f 	ldh	r2,-12(fp)
   21b48:	108001c4 	addi	r2,r2,7
   21b4c:	1000010e 	bge	r2,zero,21b54 <SH1106_DrawBitmap+0x48>
   21b50:	108001c4 	addi	r2,r2,7
   21b54:	1005d0fa 	srai	r2,r2,3
   21b58:	e0bff98d 	sth	r2,-26(fp)
    uint8_t byte = 0;
   21b5c:	e03ff805 	stb	zero,-32(fp)

    for(int16_t j=0; j<h; j++, y++)
   21b60:	e03ff88d 	sth	zero,-30(fp)
   21b64:	00003906 	br	21c4c <SH1106_DrawBitmap+0x140>
    {
        for(int16_t i=0; i<w; i++)
   21b68:	e03ff90d 	sth	zero,-28(fp)
   21b6c:	00002e06 	br	21c28 <SH1106_DrawBitmap+0x11c>
        {
            if(i & 7)
   21b70:	e0bff90b 	ldhu	r2,-28(fp)
   21b74:	10bfffcc 	andi	r2,r2,65535
   21b78:	108001cc 	andi	r2,r2,7
   21b7c:	10000426 	beq	r2,zero,21b90 <SH1106_DrawBitmap+0x84>
            {
               byte <<= 1;
   21b80:	e0bff803 	ldbu	r2,-32(fp)
   21b84:	1085883a 	add	r2,r2,r2
   21b88:	e0bff805 	stb	r2,-32(fp)
   21b8c:	00001306 	br	21bdc <SH1106_DrawBitmap+0xd0>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
   21b90:	e0bff88f 	ldh	r2,-30(fp)
   21b94:	e0fff98f 	ldh	r3,-26(fp)
   21b98:	180b883a 	mov	r5,r3
   21b9c:	1009883a 	mov	r4,r2
   21ba0:	0021d940 	call	21d94 <__mulsi3>
   21ba4:	1007883a 	mov	r3,r2
   21ba8:	e0bff90f 	ldh	r2,-28(fp)
   21bac:	1000010e 	bge	r2,zero,21bb4 <SH1106_DrawBitmap+0xa8>
   21bb0:	108001c4 	addi	r2,r2,7
   21bb4:	1005d0fa 	srai	r2,r2,3
   21bb8:	10bfffcc 	andi	r2,r2,65535
   21bbc:	10a0001c 	xori	r2,r2,32768
   21bc0:	10a00004 	addi	r2,r2,-32768
   21bc4:	1885883a 	add	r2,r3,r2
   21bc8:	1007883a 	mov	r3,r2
   21bcc:	e0bffc17 	ldw	r2,-16(fp)
   21bd0:	10c5883a 	add	r2,r2,r3
   21bd4:	10800003 	ldbu	r2,0(r2)
   21bd8:	e0bff805 	stb	r2,-32(fp)
            }
            if(byte & 0x80) SH1106_DrawPixel(x+i, y, color);
   21bdc:	e0bff803 	ldbu	r2,-32(fp)
   21be0:	10803fcc 	andi	r2,r2,255
   21be4:	1080201c 	xori	r2,r2,128
   21be8:	10bfe004 	addi	r2,r2,-128
   21bec:	10000b0e 	bge	r2,zero,21c1c <SH1106_DrawBitmap+0x110>
   21bf0:	e0fffa0b 	ldhu	r3,-24(fp)
   21bf4:	e0bff90b 	ldhu	r2,-28(fp)
   21bf8:	1885883a 	add	r2,r3,r2
   21bfc:	10bfffcc 	andi	r2,r2,65535
   21c00:	e0fffb0b 	ldhu	r3,-20(fp)
   21c04:	18ffffcc 	andi	r3,r3,65535
   21c08:	e13fff0b 	ldhu	r4,-4(fp)
   21c0c:	200d883a 	mov	r6,r4
   21c10:	180b883a 	mov	r5,r3
   21c14:	1009883a 	mov	r4,r2
   21c18:	00205b00 	call	205b0 <SH1106_DrawPixel>
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    for(int16_t j=0; j<h; j++, y++)
    {
        for(int16_t i=0; i<w; i++)
   21c1c:	e0bff90b 	ldhu	r2,-28(fp)
   21c20:	10800044 	addi	r2,r2,1
   21c24:	e0bff90d 	sth	r2,-28(fp)
   21c28:	e0fff90f 	ldh	r3,-28(fp)
   21c2c:	e0bffd0f 	ldh	r2,-12(fp)
   21c30:	18bfcf16 	blt	r3,r2,21b70 <__alt_data_end+0xfffe1b70>
{

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    for(int16_t j=0; j<h; j++, y++)
   21c34:	e0bff88b 	ldhu	r2,-30(fp)
   21c38:	10800044 	addi	r2,r2,1
   21c3c:	e0bff88d 	sth	r2,-30(fp)
   21c40:	e0bffb0b 	ldhu	r2,-20(fp)
   21c44:	10800044 	addi	r2,r2,1
   21c48:	e0bffb0d 	sth	r2,-20(fp)
   21c4c:	e0fff88f 	ldh	r3,-30(fp)
   21c50:	e0bffe0f 	ldh	r2,-8(fp)
   21c54:	18bfc416 	blt	r3,r2,21b68 <__alt_data_end+0xfffe1b68>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
            }
            if(byte & 0x80) SH1106_DrawPixel(x+i, y, color);
        }
    }
}
   21c58:	0001883a 	nop
   21c5c:	e037883a 	mov	sp,fp
   21c60:	dfc00117 	ldw	ra,4(sp)
   21c64:	df000017 	ldw	fp,0(sp)
   21c68:	dec00204 	addi	sp,sp,8
   21c6c:	f800283a 	ret

00021c70 <FONTS_GetStringSize>:
	16,
	26,
	Font16x26
};

char* FONTS_GetStringSize(char* str, FONTS_SIZE_t* SizeStruct, FontDef_t* Font) {
   21c70:	defffa04 	addi	sp,sp,-24
   21c74:	dfc00515 	stw	ra,20(sp)
   21c78:	df000415 	stw	fp,16(sp)
   21c7c:	dc000315 	stw	r16,12(sp)
   21c80:	df000404 	addi	fp,sp,16
   21c84:	e13ffc15 	stw	r4,-16(fp)
   21c88:	e17ffd15 	stw	r5,-12(fp)
   21c8c:	e1bffe15 	stw	r6,-8(fp)
	/* Fill settings */
	SizeStruct->Height = Font->FontHeight;
   21c90:	e0bffe17 	ldw	r2,-8(fp)
   21c94:	10800043 	ldbu	r2,1(r2)
   21c98:	10c03fcc 	andi	r3,r2,255
   21c9c:	e0bffd17 	ldw	r2,-12(fp)
   21ca0:	10c0008d 	sth	r3,2(r2)
	SizeStruct->Length = Font->FontWidth * strlen(str);
   21ca4:	e0bffe17 	ldw	r2,-8(fp)
   21ca8:	10800003 	ldbu	r2,0(r2)
   21cac:	14003fcc 	andi	r16,r2,255
   21cb0:	e13ffc17 	ldw	r4,-16(fp)
   21cb4:	0021ef80 	call	21ef8 <strlen>
   21cb8:	100b883a 	mov	r5,r2
   21cbc:	8009883a 	mov	r4,r16
   21cc0:	0021d940 	call	21d94 <__mulsi3>
   21cc4:	1007883a 	mov	r3,r2
   21cc8:	e0bffd17 	ldw	r2,-12(fp)
   21ccc:	10c0000d 	sth	r3,0(r2)

	/* Return pointer */
	return str;
   21cd0:	e0bffc17 	ldw	r2,-16(fp)
}
   21cd4:	e6ffff04 	addi	sp,fp,-4
   21cd8:	dfc00217 	ldw	ra,8(sp)
   21cdc:	df000117 	ldw	fp,4(sp)
   21ce0:	dc000017 	ldw	r16,0(sp)
   21ce4:	dec00304 	addi	sp,sp,12
   21ce8:	f800283a 	ret

00021cec <I2C0_Init>:
#include <stdio.h>
#include "SH1106.h"

ALT_AVALON_I2C_DEV_t *i2c_dev;

void I2C0_Init(){
   21cec:	defffe04 	addi	sp,sp,-8
   21cf0:	dfc00115 	stw	ra,4(sp)
   21cf4:	df000015 	stw	fp,0(sp)
   21cf8:	d839883a 	mov	fp,sp
	/* Check if LCD connected to I2C */
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
   21cfc:	010000f4 	movhi	r4,3
   21d00:	21215104 	addi	r4,r4,-31420
   21d04:	0022e180 	call	22e18 <alt_avalon_i2c_open>
   21d08:	d0a0df15 	stw	r2,-31876(gp)
	if (NULL==i2c_dev)  {
   21d0c:	d0a0df17 	ldw	r2,-31876(gp)
   21d10:	1000041e 	bne	r2,zero,21d24 <I2C0_Init+0x38>
		printf("Error: Cannot find /dev/i2c_0\n");
   21d14:	010000f4 	movhi	r4,3
   21d18:	21215404 	addi	r4,r4,-31408
   21d1c:	0021ee40 	call	21ee4 <puts>
		return;
   21d20:	00000306 	br	21d30 <I2C0_Init+0x44>
	}
	printf("Successfully open I2C");
   21d24:	010000f4 	movhi	r4,3
   21d28:	21215c04 	addi	r4,r4,-31376
   21d2c:	0021e180 	call	21e18 <printf>
}
   21d30:	e037883a 	mov	sp,fp
   21d34:	dfc00117 	ldw	ra,4(sp)
   21d38:	df000017 	ldw	fp,0(sp)
   21d3c:	dec00204 	addi	sp,sp,8
   21d40:	f800283a 	ret

00021d44 <main>:

int main()
{
   21d44:	defffe04 	addi	sp,sp,-8
   21d48:	dfc00115 	stw	ra,4(sp)
   21d4c:	df000015 	stw	fp,0(sp)
   21d50:	d839883a 	mov	fp,sp
	I2C0_Init();
   21d54:	0021cec0 	call	21cec <I2C0_Init>
	SH1106_Init (); // initialise the display
   21d58:	002024c0 	call	2024c <SH1106_Init>
	SH1106_GotoXY (12,10); // goto 10, 10
   21d5c:	01400284 	movi	r5,10
   21d60:	01000304 	movi	r4,12
   21d64:	00207000 	call	20700 <SH1106_GotoXY>
	SH1106_Puts ("HELLO", &Font_11x18, 1); // print Hello
   21d68:	01800044 	movi	r6,1
   21d6c:	d1600204 	addi	r5,gp,-32760
   21d70:	010000f4 	movhi	r4,3
   21d74:	21216204 	addi	r4,r4,-31352
   21d78:	00208fc0 	call	208fc <SH1106_Puts>

//	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure


	return 1;
   21d7c:	00800044 	movi	r2,1
}
   21d80:	e037883a 	mov	sp,fp
   21d84:	dfc00117 	ldw	ra,4(sp)
   21d88:	df000017 	ldw	fp,0(sp)
   21d8c:	dec00204 	addi	sp,sp,8
   21d90:	f800283a 	ret

00021d94 <__mulsi3>:
   21d94:	0005883a 	mov	r2,zero
   21d98:	20000726 	beq	r4,zero,21db8 <__mulsi3+0x24>
   21d9c:	20c0004c 	andi	r3,r4,1
   21da0:	2008d07a 	srli	r4,r4,1
   21da4:	18000126 	beq	r3,zero,21dac <__mulsi3+0x18>
   21da8:	1145883a 	add	r2,r2,r5
   21dac:	294b883a 	add	r5,r5,r5
   21db0:	203ffa1e 	bne	r4,zero,21d9c <__alt_data_end+0xfffe1d9c>
   21db4:	f800283a 	ret
   21db8:	f800283a 	ret

00021dbc <memset>:
   21dbc:	2005883a 	mov	r2,r4
   21dc0:	2007883a 	mov	r3,r4
   21dc4:	218d883a 	add	r6,r4,r6
   21dc8:	19800326 	beq	r3,r6,21dd8 <memset+0x1c>
   21dcc:	19400005 	stb	r5,0(r3)
   21dd0:	18c00044 	addi	r3,r3,1
   21dd4:	003ffc06 	br	21dc8 <__alt_data_end+0xfffe1dc8>
   21dd8:	f800283a 	ret

00021ddc <_printf_r>:
   21ddc:	defffd04 	addi	sp,sp,-12
   21de0:	dfc00015 	stw	ra,0(sp)
   21de4:	d9800115 	stw	r6,4(sp)
   21de8:	d9c00215 	stw	r7,8(sp)
   21dec:	20c00217 	ldw	r3,8(r4)
   21df0:	018000b4 	movhi	r6,2
   21df4:	31893204 	addi	r6,r6,9416
   21df8:	19800115 	stw	r6,4(r3)
   21dfc:	280d883a 	mov	r6,r5
   21e00:	21400217 	ldw	r5,8(r4)
   21e04:	d9c00104 	addi	r7,sp,4
   21e08:	0021f800 	call	21f80 <___vfprintf_internal_r>
   21e0c:	dfc00017 	ldw	ra,0(sp)
   21e10:	dec00304 	addi	sp,sp,12
   21e14:	f800283a 	ret

00021e18 <printf>:
   21e18:	defffc04 	addi	sp,sp,-16
   21e1c:	dfc00015 	stw	ra,0(sp)
   21e20:	d9400115 	stw	r5,4(sp)
   21e24:	d9800215 	stw	r6,8(sp)
   21e28:	d9c00315 	stw	r7,12(sp)
   21e2c:	008000f4 	movhi	r2,3
   21e30:	10a23f04 	addi	r2,r2,-30468
   21e34:	10800017 	ldw	r2,0(r2)
   21e38:	014000b4 	movhi	r5,2
   21e3c:	29493204 	addi	r5,r5,9416
   21e40:	10c00217 	ldw	r3,8(r2)
   21e44:	d9800104 	addi	r6,sp,4
   21e48:	19400115 	stw	r5,4(r3)
   21e4c:	200b883a 	mov	r5,r4
   21e50:	11000217 	ldw	r4,8(r2)
   21e54:	00224ac0 	call	224ac <__vfprintf_internal>
   21e58:	dfc00017 	ldw	ra,0(sp)
   21e5c:	dec00404 	addi	sp,sp,16
   21e60:	f800283a 	ret

00021e64 <_puts_r>:
   21e64:	defffd04 	addi	sp,sp,-12
   21e68:	dc000015 	stw	r16,0(sp)
   21e6c:	2021883a 	mov	r16,r4
   21e70:	2809883a 	mov	r4,r5
   21e74:	dfc00215 	stw	ra,8(sp)
   21e78:	dc400115 	stw	r17,4(sp)
   21e7c:	2823883a 	mov	r17,r5
   21e80:	0021ef80 	call	21ef8 <strlen>
   21e84:	81400217 	ldw	r5,8(r16)
   21e88:	010000b4 	movhi	r4,2
   21e8c:	21093204 	addi	r4,r4,9416
   21e90:	29000115 	stw	r4,4(r5)
   21e94:	100f883a 	mov	r7,r2
   21e98:	880d883a 	mov	r6,r17
   21e9c:	8009883a 	mov	r4,r16
   21ea0:	00224c80 	call	224c8 <__sfvwrite_small_dev>
   21ea4:	00ffffc4 	movi	r3,-1
   21ea8:	10c00926 	beq	r2,r3,21ed0 <_puts_r+0x6c>
   21eac:	81400217 	ldw	r5,8(r16)
   21eb0:	018000f4 	movhi	r6,3
   21eb4:	01c00044 	movi	r7,1
   21eb8:	28800117 	ldw	r2,4(r5)
   21ebc:	31a16404 	addi	r6,r6,-31344
   21ec0:	8009883a 	mov	r4,r16
   21ec4:	103ee83a 	callr	r2
   21ec8:	10bfffe0 	cmpeqi	r2,r2,-1
   21ecc:	0085c83a 	sub	r2,zero,r2
   21ed0:	dfc00217 	ldw	ra,8(sp)
   21ed4:	dc400117 	ldw	r17,4(sp)
   21ed8:	dc000017 	ldw	r16,0(sp)
   21edc:	dec00304 	addi	sp,sp,12
   21ee0:	f800283a 	ret

00021ee4 <puts>:
   21ee4:	008000f4 	movhi	r2,3
   21ee8:	10a23f04 	addi	r2,r2,-30468
   21eec:	200b883a 	mov	r5,r4
   21ef0:	11000017 	ldw	r4,0(r2)
   21ef4:	0021e641 	jmpi	21e64 <_puts_r>

00021ef8 <strlen>:
   21ef8:	2005883a 	mov	r2,r4
   21efc:	10c00007 	ldb	r3,0(r2)
   21f00:	18000226 	beq	r3,zero,21f0c <strlen+0x14>
   21f04:	10800044 	addi	r2,r2,1
   21f08:	003ffc06 	br	21efc <__alt_data_end+0xfffe1efc>
   21f0c:	1105c83a 	sub	r2,r2,r4
   21f10:	f800283a 	ret

00021f14 <print_repeat>:
   21f14:	defffb04 	addi	sp,sp,-20
   21f18:	dc800315 	stw	r18,12(sp)
   21f1c:	dc400215 	stw	r17,8(sp)
   21f20:	dc000115 	stw	r16,4(sp)
   21f24:	dfc00415 	stw	ra,16(sp)
   21f28:	2025883a 	mov	r18,r4
   21f2c:	2823883a 	mov	r17,r5
   21f30:	d9800005 	stb	r6,0(sp)
   21f34:	3821883a 	mov	r16,r7
   21f38:	04000a0e 	bge	zero,r16,21f64 <print_repeat+0x50>
   21f3c:	88800117 	ldw	r2,4(r17)
   21f40:	01c00044 	movi	r7,1
   21f44:	d80d883a 	mov	r6,sp
   21f48:	880b883a 	mov	r5,r17
   21f4c:	9009883a 	mov	r4,r18
   21f50:	103ee83a 	callr	r2
   21f54:	843fffc4 	addi	r16,r16,-1
   21f58:	103ff726 	beq	r2,zero,21f38 <__alt_data_end+0xfffe1f38>
   21f5c:	00bfffc4 	movi	r2,-1
   21f60:	00000106 	br	21f68 <print_repeat+0x54>
   21f64:	0005883a 	mov	r2,zero
   21f68:	dfc00417 	ldw	ra,16(sp)
   21f6c:	dc800317 	ldw	r18,12(sp)
   21f70:	dc400217 	ldw	r17,8(sp)
   21f74:	dc000117 	ldw	r16,4(sp)
   21f78:	dec00504 	addi	sp,sp,20
   21f7c:	f800283a 	ret

00021f80 <___vfprintf_internal_r>:
   21f80:	deffe504 	addi	sp,sp,-108
   21f84:	d8c00804 	addi	r3,sp,32
   21f88:	ddc01815 	stw	r23,96(sp)
   21f8c:	dd801715 	stw	r22,92(sp)
   21f90:	dd401615 	stw	r21,88(sp)
   21f94:	dd001515 	stw	r20,84(sp)
   21f98:	dcc01415 	stw	r19,80(sp)
   21f9c:	dc801315 	stw	r18,76(sp)
   21fa0:	dc401215 	stw	r17,72(sp)
   21fa4:	dc001115 	stw	r16,68(sp)
   21fa8:	dfc01a15 	stw	ra,104(sp)
   21fac:	df001915 	stw	fp,100(sp)
   21fb0:	2029883a 	mov	r20,r4
   21fb4:	2823883a 	mov	r17,r5
   21fb8:	382d883a 	mov	r22,r7
   21fbc:	d9800f15 	stw	r6,60(sp)
   21fc0:	0021883a 	mov	r16,zero
   21fc4:	d8000e15 	stw	zero,56(sp)
   21fc8:	d8000a15 	stw	zero,40(sp)
   21fcc:	002b883a 	mov	r21,zero
   21fd0:	0027883a 	mov	r19,zero
   21fd4:	0025883a 	mov	r18,zero
   21fd8:	d8000c15 	stw	zero,48(sp)
   21fdc:	d8000b15 	stw	zero,44(sp)
   21fe0:	002f883a 	mov	r23,zero
   21fe4:	d8c00915 	stw	r3,36(sp)
   21fe8:	d8c00f17 	ldw	r3,60(sp)
   21fec:	19000003 	ldbu	r4,0(r3)
   21ff0:	20803fcc 	andi	r2,r4,255
   21ff4:	1080201c 	xori	r2,r2,128
   21ff8:	10bfe004 	addi	r2,r2,-128
   21ffc:	10011e26 	beq	r2,zero,22478 <___vfprintf_internal_r+0x4f8>
   22000:	00c00044 	movi	r3,1
   22004:	b8c01426 	beq	r23,r3,22058 <___vfprintf_internal_r+0xd8>
   22008:	1dc00216 	blt	r3,r23,22014 <___vfprintf_internal_r+0x94>
   2200c:	b8000626 	beq	r23,zero,22028 <___vfprintf_internal_r+0xa8>
   22010:	00011506 	br	22468 <___vfprintf_internal_r+0x4e8>
   22014:	01400084 	movi	r5,2
   22018:	b9401d26 	beq	r23,r5,22090 <___vfprintf_internal_r+0x110>
   2201c:	014000c4 	movi	r5,3
   22020:	b9402b26 	beq	r23,r5,220d0 <___vfprintf_internal_r+0x150>
   22024:	00011006 	br	22468 <___vfprintf_internal_r+0x4e8>
   22028:	01400944 	movi	r5,37
   2202c:	1140fc26 	beq	r2,r5,22420 <___vfprintf_internal_r+0x4a0>
   22030:	88800117 	ldw	r2,4(r17)
   22034:	d9000005 	stb	r4,0(sp)
   22038:	01c00044 	movi	r7,1
   2203c:	d80d883a 	mov	r6,sp
   22040:	880b883a 	mov	r5,r17
   22044:	a009883a 	mov	r4,r20
   22048:	103ee83a 	callr	r2
   2204c:	1000d81e 	bne	r2,zero,223b0 <___vfprintf_internal_r+0x430>
   22050:	84000044 	addi	r16,r16,1
   22054:	00010406 	br	22468 <___vfprintf_internal_r+0x4e8>
   22058:	01400c04 	movi	r5,48
   2205c:	1140fa26 	beq	r2,r5,22448 <___vfprintf_internal_r+0x4c8>
   22060:	01400944 	movi	r5,37
   22064:	11400a1e 	bne	r2,r5,22090 <___vfprintf_internal_r+0x110>
   22068:	d8800005 	stb	r2,0(sp)
   2206c:	88800117 	ldw	r2,4(r17)
   22070:	b80f883a 	mov	r7,r23
   22074:	d80d883a 	mov	r6,sp
   22078:	880b883a 	mov	r5,r17
   2207c:	a009883a 	mov	r4,r20
   22080:	103ee83a 	callr	r2
   22084:	1000ca1e 	bne	r2,zero,223b0 <___vfprintf_internal_r+0x430>
   22088:	84000044 	addi	r16,r16,1
   2208c:	0000f506 	br	22464 <___vfprintf_internal_r+0x4e4>
   22090:	25fff404 	addi	r23,r4,-48
   22094:	bdc03fcc 	andi	r23,r23,255
   22098:	00c00244 	movi	r3,9
   2209c:	1dc00936 	bltu	r3,r23,220c4 <___vfprintf_internal_r+0x144>
   220a0:	00bfffc4 	movi	r2,-1
   220a4:	90800426 	beq	r18,r2,220b8 <___vfprintf_internal_r+0x138>
   220a8:	01400284 	movi	r5,10
   220ac:	9009883a 	mov	r4,r18
   220b0:	0021d940 	call	21d94 <__mulsi3>
   220b4:	00000106 	br	220bc <___vfprintf_internal_r+0x13c>
   220b8:	0005883a 	mov	r2,zero
   220bc:	b8a5883a 	add	r18,r23,r2
   220c0:	0000e206 	br	2244c <___vfprintf_internal_r+0x4cc>
   220c4:	01400b84 	movi	r5,46
   220c8:	1140e426 	beq	r2,r5,2245c <___vfprintf_internal_r+0x4dc>
   220cc:	05c00084 	movi	r23,2
   220d0:	213ff404 	addi	r4,r4,-48
   220d4:	27003fcc 	andi	fp,r4,255
   220d8:	00c00244 	movi	r3,9
   220dc:	1f000936 	bltu	r3,fp,22104 <___vfprintf_internal_r+0x184>
   220e0:	00bfffc4 	movi	r2,-1
   220e4:	98800426 	beq	r19,r2,220f8 <___vfprintf_internal_r+0x178>
   220e8:	01400284 	movi	r5,10
   220ec:	9809883a 	mov	r4,r19
   220f0:	0021d940 	call	21d94 <__mulsi3>
   220f4:	00000106 	br	220fc <___vfprintf_internal_r+0x17c>
   220f8:	0005883a 	mov	r2,zero
   220fc:	e0a7883a 	add	r19,fp,r2
   22100:	0000d906 	br	22468 <___vfprintf_internal_r+0x4e8>
   22104:	00c01b04 	movi	r3,108
   22108:	10c0d226 	beq	r2,r3,22454 <___vfprintf_internal_r+0x4d4>
   2210c:	013fffc4 	movi	r4,-1
   22110:	99000226 	beq	r19,r4,2211c <___vfprintf_internal_r+0x19c>
   22114:	d8000b15 	stw	zero,44(sp)
   22118:	00000106 	br	22120 <___vfprintf_internal_r+0x1a0>
   2211c:	04c00044 	movi	r19,1
   22120:	01001a44 	movi	r4,105
   22124:	11001626 	beq	r2,r4,22180 <___vfprintf_internal_r+0x200>
   22128:	20800916 	blt	r4,r2,22150 <___vfprintf_internal_r+0x1d0>
   2212c:	010018c4 	movi	r4,99
   22130:	11008826 	beq	r2,r4,22354 <___vfprintf_internal_r+0x3d4>
   22134:	01001904 	movi	r4,100
   22138:	11001126 	beq	r2,r4,22180 <___vfprintf_internal_r+0x200>
   2213c:	01001604 	movi	r4,88
   22140:	1100c81e 	bne	r2,r4,22464 <___vfprintf_internal_r+0x4e4>
   22144:	00c00044 	movi	r3,1
   22148:	d8c00e15 	stw	r3,56(sp)
   2214c:	00001506 	br	221a4 <___vfprintf_internal_r+0x224>
   22150:	01001cc4 	movi	r4,115
   22154:	11009826 	beq	r2,r4,223b8 <___vfprintf_internal_r+0x438>
   22158:	20800416 	blt	r4,r2,2216c <___vfprintf_internal_r+0x1ec>
   2215c:	01001bc4 	movi	r4,111
   22160:	1100c01e 	bne	r2,r4,22464 <___vfprintf_internal_r+0x4e4>
   22164:	05400204 	movi	r21,8
   22168:	00000f06 	br	221a8 <___vfprintf_internal_r+0x228>
   2216c:	01001d44 	movi	r4,117
   22170:	11000d26 	beq	r2,r4,221a8 <___vfprintf_internal_r+0x228>
   22174:	01001e04 	movi	r4,120
   22178:	11000a26 	beq	r2,r4,221a4 <___vfprintf_internal_r+0x224>
   2217c:	0000b906 	br	22464 <___vfprintf_internal_r+0x4e4>
   22180:	d8c00a17 	ldw	r3,40(sp)
   22184:	b7000104 	addi	fp,r22,4
   22188:	18000726 	beq	r3,zero,221a8 <___vfprintf_internal_r+0x228>
   2218c:	df000d15 	stw	fp,52(sp)
   22190:	b5c00017 	ldw	r23,0(r22)
   22194:	b800080e 	bge	r23,zero,221b8 <___vfprintf_internal_r+0x238>
   22198:	05efc83a 	sub	r23,zero,r23
   2219c:	02400044 	movi	r9,1
   221a0:	00000606 	br	221bc <___vfprintf_internal_r+0x23c>
   221a4:	05400404 	movi	r21,16
   221a8:	b0c00104 	addi	r3,r22,4
   221ac:	d8c00d15 	stw	r3,52(sp)
   221b0:	b5c00017 	ldw	r23,0(r22)
   221b4:	d8000a15 	stw	zero,40(sp)
   221b8:	0013883a 	mov	r9,zero
   221bc:	d839883a 	mov	fp,sp
   221c0:	b8001726 	beq	r23,zero,22220 <___vfprintf_internal_r+0x2a0>
   221c4:	a80b883a 	mov	r5,r21
   221c8:	b809883a 	mov	r4,r23
   221cc:	da401015 	stw	r9,64(sp)
   221d0:	00226d00 	call	226d0 <__udivsi3>
   221d4:	a80b883a 	mov	r5,r21
   221d8:	1009883a 	mov	r4,r2
   221dc:	102d883a 	mov	r22,r2
   221e0:	0021d940 	call	21d94 <__mulsi3>
   221e4:	b885c83a 	sub	r2,r23,r2
   221e8:	00c00244 	movi	r3,9
   221ec:	da401017 	ldw	r9,64(sp)
   221f0:	18800216 	blt	r3,r2,221fc <___vfprintf_internal_r+0x27c>
   221f4:	10800c04 	addi	r2,r2,48
   221f8:	00000506 	br	22210 <___vfprintf_internal_r+0x290>
   221fc:	d8c00e17 	ldw	r3,56(sp)
   22200:	18000226 	beq	r3,zero,2220c <___vfprintf_internal_r+0x28c>
   22204:	10800dc4 	addi	r2,r2,55
   22208:	00000106 	br	22210 <___vfprintf_internal_r+0x290>
   2220c:	108015c4 	addi	r2,r2,87
   22210:	e0800005 	stb	r2,0(fp)
   22214:	b02f883a 	mov	r23,r22
   22218:	e7000044 	addi	fp,fp,1
   2221c:	003fe806 	br	221c0 <__alt_data_end+0xfffe21c0>
   22220:	e6efc83a 	sub	r23,fp,sp
   22224:	9dc5c83a 	sub	r2,r19,r23
   22228:	0080090e 	bge	zero,r2,22250 <___vfprintf_internal_r+0x2d0>
   2222c:	e085883a 	add	r2,fp,r2
   22230:	01400c04 	movi	r5,48
   22234:	d8c00917 	ldw	r3,36(sp)
   22238:	e009883a 	mov	r4,fp
   2223c:	e0c0032e 	bgeu	fp,r3,2224c <___vfprintf_internal_r+0x2cc>
   22240:	e7000044 	addi	fp,fp,1
   22244:	21400005 	stb	r5,0(r4)
   22248:	e0bffa1e 	bne	fp,r2,22234 <__alt_data_end+0xfffe2234>
   2224c:	e6efc83a 	sub	r23,fp,sp
   22250:	d8c00b17 	ldw	r3,44(sp)
   22254:	4dd1883a 	add	r8,r9,r23
   22258:	922dc83a 	sub	r22,r18,r8
   2225c:	18001626 	beq	r3,zero,222b8 <___vfprintf_internal_r+0x338>
   22260:	48000a26 	beq	r9,zero,2228c <___vfprintf_internal_r+0x30c>
   22264:	00800b44 	movi	r2,45
   22268:	d8800805 	stb	r2,32(sp)
   2226c:	88800117 	ldw	r2,4(r17)
   22270:	01c00044 	movi	r7,1
   22274:	d9800804 	addi	r6,sp,32
   22278:	880b883a 	mov	r5,r17
   2227c:	a009883a 	mov	r4,r20
   22280:	103ee83a 	callr	r2
   22284:	10004a1e 	bne	r2,zero,223b0 <___vfprintf_internal_r+0x430>
   22288:	84000044 	addi	r16,r16,1
   2228c:	0580070e 	bge	zero,r22,222ac <___vfprintf_internal_r+0x32c>
   22290:	b00f883a 	mov	r7,r22
   22294:	01800c04 	movi	r6,48
   22298:	880b883a 	mov	r5,r17
   2229c:	a009883a 	mov	r4,r20
   222a0:	0021f140 	call	21f14 <print_repeat>
   222a4:	1000421e 	bne	r2,zero,223b0 <___vfprintf_internal_r+0x430>
   222a8:	85a1883a 	add	r16,r16,r22
   222ac:	e02d883a 	mov	r22,fp
   222b0:	bf2fc83a 	sub	r23,r23,fp
   222b4:	00002006 	br	22338 <___vfprintf_internal_r+0x3b8>
   222b8:	0580090e 	bge	zero,r22,222e0 <___vfprintf_internal_r+0x360>
   222bc:	b00f883a 	mov	r7,r22
   222c0:	01800804 	movi	r6,32
   222c4:	880b883a 	mov	r5,r17
   222c8:	a009883a 	mov	r4,r20
   222cc:	da401015 	stw	r9,64(sp)
   222d0:	0021f140 	call	21f14 <print_repeat>
   222d4:	da401017 	ldw	r9,64(sp)
   222d8:	1000351e 	bne	r2,zero,223b0 <___vfprintf_internal_r+0x430>
   222dc:	85a1883a 	add	r16,r16,r22
   222e0:	483ff226 	beq	r9,zero,222ac <__alt_data_end+0xfffe22ac>
   222e4:	00800b44 	movi	r2,45
   222e8:	d8800805 	stb	r2,32(sp)
   222ec:	88800117 	ldw	r2,4(r17)
   222f0:	01c00044 	movi	r7,1
   222f4:	d9800804 	addi	r6,sp,32
   222f8:	880b883a 	mov	r5,r17
   222fc:	a009883a 	mov	r4,r20
   22300:	103ee83a 	callr	r2
   22304:	10002a1e 	bne	r2,zero,223b0 <___vfprintf_internal_r+0x430>
   22308:	84000044 	addi	r16,r16,1
   2230c:	003fe706 	br	222ac <__alt_data_end+0xfffe22ac>
   22310:	b5bfffc4 	addi	r22,r22,-1
   22314:	b0800003 	ldbu	r2,0(r22)
   22318:	01c00044 	movi	r7,1
   2231c:	d9800804 	addi	r6,sp,32
   22320:	d8800805 	stb	r2,32(sp)
   22324:	88800117 	ldw	r2,4(r17)
   22328:	880b883a 	mov	r5,r17
   2232c:	a009883a 	mov	r4,r20
   22330:	103ee83a 	callr	r2
   22334:	10001e1e 	bne	r2,zero,223b0 <___vfprintf_internal_r+0x430>
   22338:	8585c83a 	sub	r2,r16,r22
   2233c:	b5c9883a 	add	r4,r22,r23
   22340:	e085883a 	add	r2,fp,r2
   22344:	013ff216 	blt	zero,r4,22310 <__alt_data_end+0xfffe2310>
   22348:	1021883a 	mov	r16,r2
   2234c:	dd800d17 	ldw	r22,52(sp)
   22350:	00004406 	br	22464 <___vfprintf_internal_r+0x4e4>
   22354:	00800044 	movi	r2,1
   22358:	1480080e 	bge	r2,r18,2237c <___vfprintf_internal_r+0x3fc>
   2235c:	95ffffc4 	addi	r23,r18,-1
   22360:	b80f883a 	mov	r7,r23
   22364:	01800804 	movi	r6,32
   22368:	880b883a 	mov	r5,r17
   2236c:	a009883a 	mov	r4,r20
   22370:	0021f140 	call	21f14 <print_repeat>
   22374:	10000e1e 	bne	r2,zero,223b0 <___vfprintf_internal_r+0x430>
   22378:	85e1883a 	add	r16,r16,r23
   2237c:	b0800017 	ldw	r2,0(r22)
   22380:	01c00044 	movi	r7,1
   22384:	d80d883a 	mov	r6,sp
   22388:	d8800005 	stb	r2,0(sp)
   2238c:	88800117 	ldw	r2,4(r17)
   22390:	880b883a 	mov	r5,r17
   22394:	a009883a 	mov	r4,r20
   22398:	b5c00104 	addi	r23,r22,4
   2239c:	103ee83a 	callr	r2
   223a0:	1000031e 	bne	r2,zero,223b0 <___vfprintf_internal_r+0x430>
   223a4:	84000044 	addi	r16,r16,1
   223a8:	b82d883a 	mov	r22,r23
   223ac:	00002d06 	br	22464 <___vfprintf_internal_r+0x4e4>
   223b0:	00bfffc4 	movi	r2,-1
   223b4:	00003106 	br	2247c <___vfprintf_internal_r+0x4fc>
   223b8:	b5c00017 	ldw	r23,0(r22)
   223bc:	b7000104 	addi	fp,r22,4
   223c0:	b809883a 	mov	r4,r23
   223c4:	0021ef80 	call	21ef8 <strlen>
   223c8:	9091c83a 	sub	r8,r18,r2
   223cc:	102d883a 	mov	r22,r2
   223d0:	0200090e 	bge	zero,r8,223f8 <___vfprintf_internal_r+0x478>
   223d4:	400f883a 	mov	r7,r8
   223d8:	01800804 	movi	r6,32
   223dc:	880b883a 	mov	r5,r17
   223e0:	a009883a 	mov	r4,r20
   223e4:	da001015 	stw	r8,64(sp)
   223e8:	0021f140 	call	21f14 <print_repeat>
   223ec:	da001017 	ldw	r8,64(sp)
   223f0:	103fef1e 	bne	r2,zero,223b0 <__alt_data_end+0xfffe23b0>
   223f4:	8221883a 	add	r16,r16,r8
   223f8:	88800117 	ldw	r2,4(r17)
   223fc:	b00f883a 	mov	r7,r22
   22400:	b80d883a 	mov	r6,r23
   22404:	880b883a 	mov	r5,r17
   22408:	a009883a 	mov	r4,r20
   2240c:	103ee83a 	callr	r2
   22410:	103fe71e 	bne	r2,zero,223b0 <__alt_data_end+0xfffe23b0>
   22414:	85a1883a 	add	r16,r16,r22
   22418:	e02d883a 	mov	r22,fp
   2241c:	00001106 	br	22464 <___vfprintf_internal_r+0x4e4>
   22420:	00c00044 	movi	r3,1
   22424:	04ffffc4 	movi	r19,-1
   22428:	d8000e15 	stw	zero,56(sp)
   2242c:	d8c00a15 	stw	r3,40(sp)
   22430:	05400284 	movi	r21,10
   22434:	9825883a 	mov	r18,r19
   22438:	d8000c15 	stw	zero,48(sp)
   2243c:	d8000b15 	stw	zero,44(sp)
   22440:	182f883a 	mov	r23,r3
   22444:	00000806 	br	22468 <___vfprintf_internal_r+0x4e8>
   22448:	ddc00b15 	stw	r23,44(sp)
   2244c:	05c00084 	movi	r23,2
   22450:	00000506 	br	22468 <___vfprintf_internal_r+0x4e8>
   22454:	00c00044 	movi	r3,1
   22458:	d8c00c15 	stw	r3,48(sp)
   2245c:	05c000c4 	movi	r23,3
   22460:	00000106 	br	22468 <___vfprintf_internal_r+0x4e8>
   22464:	002f883a 	mov	r23,zero
   22468:	d8c00f17 	ldw	r3,60(sp)
   2246c:	18c00044 	addi	r3,r3,1
   22470:	d8c00f15 	stw	r3,60(sp)
   22474:	003edc06 	br	21fe8 <__alt_data_end+0xfffe1fe8>
   22478:	8005883a 	mov	r2,r16
   2247c:	dfc01a17 	ldw	ra,104(sp)
   22480:	df001917 	ldw	fp,100(sp)
   22484:	ddc01817 	ldw	r23,96(sp)
   22488:	dd801717 	ldw	r22,92(sp)
   2248c:	dd401617 	ldw	r21,88(sp)
   22490:	dd001517 	ldw	r20,84(sp)
   22494:	dcc01417 	ldw	r19,80(sp)
   22498:	dc801317 	ldw	r18,76(sp)
   2249c:	dc401217 	ldw	r17,72(sp)
   224a0:	dc001117 	ldw	r16,68(sp)
   224a4:	dec01b04 	addi	sp,sp,108
   224a8:	f800283a 	ret

000224ac <__vfprintf_internal>:
   224ac:	008000f4 	movhi	r2,3
   224b0:	10a23f04 	addi	r2,r2,-30468
   224b4:	300f883a 	mov	r7,r6
   224b8:	280d883a 	mov	r6,r5
   224bc:	200b883a 	mov	r5,r4
   224c0:	11000017 	ldw	r4,0(r2)
   224c4:	0021f801 	jmpi	21f80 <___vfprintf_internal_r>

000224c8 <__sfvwrite_small_dev>:
   224c8:	2880000b 	ldhu	r2,0(r5)
   224cc:	1080020c 	andi	r2,r2,8
   224d0:	10002126 	beq	r2,zero,22558 <__sfvwrite_small_dev+0x90>
   224d4:	2880008f 	ldh	r2,2(r5)
   224d8:	defffa04 	addi	sp,sp,-24
   224dc:	dc000015 	stw	r16,0(sp)
   224e0:	dfc00515 	stw	ra,20(sp)
   224e4:	dd000415 	stw	r20,16(sp)
   224e8:	dcc00315 	stw	r19,12(sp)
   224ec:	dc800215 	stw	r18,8(sp)
   224f0:	dc400115 	stw	r17,4(sp)
   224f4:	2821883a 	mov	r16,r5
   224f8:	10001216 	blt	r2,zero,22544 <__sfvwrite_small_dev+0x7c>
   224fc:	2027883a 	mov	r19,r4
   22500:	3025883a 	mov	r18,r6
   22504:	3823883a 	mov	r17,r7
   22508:	05010004 	movi	r20,1024
   2250c:	04400b0e 	bge	zero,r17,2253c <__sfvwrite_small_dev+0x74>
   22510:	880f883a 	mov	r7,r17
   22514:	a440010e 	bge	r20,r17,2251c <__sfvwrite_small_dev+0x54>
   22518:	01c10004 	movi	r7,1024
   2251c:	8140008f 	ldh	r5,2(r16)
   22520:	900d883a 	mov	r6,r18
   22524:	9809883a 	mov	r4,r19
   22528:	00225800 	call	22580 <_write_r>
   2252c:	0080050e 	bge	zero,r2,22544 <__sfvwrite_small_dev+0x7c>
   22530:	88a3c83a 	sub	r17,r17,r2
   22534:	90a5883a 	add	r18,r18,r2
   22538:	003ff406 	br	2250c <__alt_data_end+0xfffe250c>
   2253c:	0005883a 	mov	r2,zero
   22540:	00000706 	br	22560 <__sfvwrite_small_dev+0x98>
   22544:	8080000b 	ldhu	r2,0(r16)
   22548:	10801014 	ori	r2,r2,64
   2254c:	8080000d 	sth	r2,0(r16)
   22550:	00bfffc4 	movi	r2,-1
   22554:	00000206 	br	22560 <__sfvwrite_small_dev+0x98>
   22558:	00bfffc4 	movi	r2,-1
   2255c:	f800283a 	ret
   22560:	dfc00517 	ldw	ra,20(sp)
   22564:	dd000417 	ldw	r20,16(sp)
   22568:	dcc00317 	ldw	r19,12(sp)
   2256c:	dc800217 	ldw	r18,8(sp)
   22570:	dc400117 	ldw	r17,4(sp)
   22574:	dc000017 	ldw	r16,0(sp)
   22578:	dec00604 	addi	sp,sp,24
   2257c:	f800283a 	ret

00022580 <_write_r>:
   22580:	defffd04 	addi	sp,sp,-12
   22584:	dc000015 	stw	r16,0(sp)
   22588:	040000f4 	movhi	r16,3
   2258c:	dc400115 	stw	r17,4(sp)
   22590:	84231804 	addi	r16,r16,-29600
   22594:	2023883a 	mov	r17,r4
   22598:	2809883a 	mov	r4,r5
   2259c:	300b883a 	mov	r5,r6
   225a0:	380d883a 	mov	r6,r7
   225a4:	dfc00215 	stw	ra,8(sp)
   225a8:	80000015 	stw	zero,0(r16)
   225ac:	00229300 	call	22930 <write>
   225b0:	00ffffc4 	movi	r3,-1
   225b4:	10c0031e 	bne	r2,r3,225c4 <_write_r+0x44>
   225b8:	80c00017 	ldw	r3,0(r16)
   225bc:	18000126 	beq	r3,zero,225c4 <_write_r+0x44>
   225c0:	88c00015 	stw	r3,0(r17)
   225c4:	dfc00217 	ldw	ra,8(sp)
   225c8:	dc400117 	ldw	r17,4(sp)
   225cc:	dc000017 	ldw	r16,0(sp)
   225d0:	dec00304 	addi	sp,sp,12
   225d4:	f800283a 	ret

000225d8 <__divsi3>:
   225d8:	20001b16 	blt	r4,zero,22648 <__divsi3+0x70>
   225dc:	000f883a 	mov	r7,zero
   225e0:	28001616 	blt	r5,zero,2263c <__divsi3+0x64>
   225e4:	200d883a 	mov	r6,r4
   225e8:	29001a2e 	bgeu	r5,r4,22654 <__divsi3+0x7c>
   225ec:	00800804 	movi	r2,32
   225f0:	00c00044 	movi	r3,1
   225f4:	00000106 	br	225fc <__divsi3+0x24>
   225f8:	10000d26 	beq	r2,zero,22630 <__divsi3+0x58>
   225fc:	294b883a 	add	r5,r5,r5
   22600:	10bfffc4 	addi	r2,r2,-1
   22604:	18c7883a 	add	r3,r3,r3
   22608:	293ffb36 	bltu	r5,r4,225f8 <__alt_data_end+0xfffe25f8>
   2260c:	0005883a 	mov	r2,zero
   22610:	18000726 	beq	r3,zero,22630 <__divsi3+0x58>
   22614:	0005883a 	mov	r2,zero
   22618:	31400236 	bltu	r6,r5,22624 <__divsi3+0x4c>
   2261c:	314dc83a 	sub	r6,r6,r5
   22620:	10c4b03a 	or	r2,r2,r3
   22624:	1806d07a 	srli	r3,r3,1
   22628:	280ad07a 	srli	r5,r5,1
   2262c:	183ffa1e 	bne	r3,zero,22618 <__alt_data_end+0xfffe2618>
   22630:	38000126 	beq	r7,zero,22638 <__divsi3+0x60>
   22634:	0085c83a 	sub	r2,zero,r2
   22638:	f800283a 	ret
   2263c:	014bc83a 	sub	r5,zero,r5
   22640:	39c0005c 	xori	r7,r7,1
   22644:	003fe706 	br	225e4 <__alt_data_end+0xfffe25e4>
   22648:	0109c83a 	sub	r4,zero,r4
   2264c:	01c00044 	movi	r7,1
   22650:	003fe306 	br	225e0 <__alt_data_end+0xfffe25e0>
   22654:	00c00044 	movi	r3,1
   22658:	003fee06 	br	22614 <__alt_data_end+0xfffe2614>

0002265c <__modsi3>:
   2265c:	20001716 	blt	r4,zero,226bc <__modsi3+0x60>
   22660:	000f883a 	mov	r7,zero
   22664:	2005883a 	mov	r2,r4
   22668:	28001216 	blt	r5,zero,226b4 <__modsi3+0x58>
   2266c:	2900162e 	bgeu	r5,r4,226c8 <__modsi3+0x6c>
   22670:	01800804 	movi	r6,32
   22674:	00c00044 	movi	r3,1
   22678:	00000106 	br	22680 <__modsi3+0x24>
   2267c:	30000a26 	beq	r6,zero,226a8 <__modsi3+0x4c>
   22680:	294b883a 	add	r5,r5,r5
   22684:	31bfffc4 	addi	r6,r6,-1
   22688:	18c7883a 	add	r3,r3,r3
   2268c:	293ffb36 	bltu	r5,r4,2267c <__alt_data_end+0xfffe267c>
   22690:	18000526 	beq	r3,zero,226a8 <__modsi3+0x4c>
   22694:	1806d07a 	srli	r3,r3,1
   22698:	11400136 	bltu	r2,r5,226a0 <__modsi3+0x44>
   2269c:	1145c83a 	sub	r2,r2,r5
   226a0:	280ad07a 	srli	r5,r5,1
   226a4:	183ffb1e 	bne	r3,zero,22694 <__alt_data_end+0xfffe2694>
   226a8:	38000126 	beq	r7,zero,226b0 <__modsi3+0x54>
   226ac:	0085c83a 	sub	r2,zero,r2
   226b0:	f800283a 	ret
   226b4:	014bc83a 	sub	r5,zero,r5
   226b8:	003fec06 	br	2266c <__alt_data_end+0xfffe266c>
   226bc:	0109c83a 	sub	r4,zero,r4
   226c0:	01c00044 	movi	r7,1
   226c4:	003fe706 	br	22664 <__alt_data_end+0xfffe2664>
   226c8:	00c00044 	movi	r3,1
   226cc:	003ff106 	br	22694 <__alt_data_end+0xfffe2694>

000226d0 <__udivsi3>:
   226d0:	200d883a 	mov	r6,r4
   226d4:	2900152e 	bgeu	r5,r4,2272c <__udivsi3+0x5c>
   226d8:	28001416 	blt	r5,zero,2272c <__udivsi3+0x5c>
   226dc:	00800804 	movi	r2,32
   226e0:	00c00044 	movi	r3,1
   226e4:	00000206 	br	226f0 <__udivsi3+0x20>
   226e8:	10000e26 	beq	r2,zero,22724 <__udivsi3+0x54>
   226ec:	28000516 	blt	r5,zero,22704 <__udivsi3+0x34>
   226f0:	294b883a 	add	r5,r5,r5
   226f4:	10bfffc4 	addi	r2,r2,-1
   226f8:	18c7883a 	add	r3,r3,r3
   226fc:	293ffa36 	bltu	r5,r4,226e8 <__alt_data_end+0xfffe26e8>
   22700:	18000826 	beq	r3,zero,22724 <__udivsi3+0x54>
   22704:	0005883a 	mov	r2,zero
   22708:	31400236 	bltu	r6,r5,22714 <__udivsi3+0x44>
   2270c:	314dc83a 	sub	r6,r6,r5
   22710:	10c4b03a 	or	r2,r2,r3
   22714:	1806d07a 	srli	r3,r3,1
   22718:	280ad07a 	srli	r5,r5,1
   2271c:	183ffa1e 	bne	r3,zero,22708 <__alt_data_end+0xfffe2708>
   22720:	f800283a 	ret
   22724:	0005883a 	mov	r2,zero
   22728:	f800283a 	ret
   2272c:	00c00044 	movi	r3,1
   22730:	003ff406 	br	22704 <__alt_data_end+0xfffe2704>

00022734 <__umodsi3>:
   22734:	2005883a 	mov	r2,r4
   22738:	2900122e 	bgeu	r5,r4,22784 <__umodsi3+0x50>
   2273c:	28001116 	blt	r5,zero,22784 <__umodsi3+0x50>
   22740:	01800804 	movi	r6,32
   22744:	00c00044 	movi	r3,1
   22748:	00000206 	br	22754 <__umodsi3+0x20>
   2274c:	30000c26 	beq	r6,zero,22780 <__umodsi3+0x4c>
   22750:	28000516 	blt	r5,zero,22768 <__umodsi3+0x34>
   22754:	294b883a 	add	r5,r5,r5
   22758:	31bfffc4 	addi	r6,r6,-1
   2275c:	18c7883a 	add	r3,r3,r3
   22760:	293ffa36 	bltu	r5,r4,2274c <__alt_data_end+0xfffe274c>
   22764:	18000626 	beq	r3,zero,22780 <__umodsi3+0x4c>
   22768:	1806d07a 	srli	r3,r3,1
   2276c:	11400136 	bltu	r2,r5,22774 <__umodsi3+0x40>
   22770:	1145c83a 	sub	r2,r2,r5
   22774:	280ad07a 	srli	r5,r5,1
   22778:	183ffb1e 	bne	r3,zero,22768 <__alt_data_end+0xfffe2768>
   2277c:	f800283a 	ret
   22780:	f800283a 	ret
   22784:	00c00044 	movi	r3,1
   22788:	003ff706 	br	22768 <__alt_data_end+0xfffe2768>

0002278c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2278c:	defffc04 	addi	sp,sp,-16
   22790:	df000315 	stw	fp,12(sp)
   22794:	df000304 	addi	fp,sp,12
   22798:	e13ffd15 	stw	r4,-12(fp)
   2279c:	e17ffe15 	stw	r5,-8(fp)
   227a0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   227a4:	e0fffe17 	ldw	r3,-8(fp)
   227a8:	e0bffd17 	ldw	r2,-12(fp)
   227ac:	18800c26 	beq	r3,r2,227e0 <alt_load_section+0x54>
  {
    while( to != end )
   227b0:	00000806 	br	227d4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   227b4:	e0bffe17 	ldw	r2,-8(fp)
   227b8:	10c00104 	addi	r3,r2,4
   227bc:	e0fffe15 	stw	r3,-8(fp)
   227c0:	e0fffd17 	ldw	r3,-12(fp)
   227c4:	19000104 	addi	r4,r3,4
   227c8:	e13ffd15 	stw	r4,-12(fp)
   227cc:	18c00017 	ldw	r3,0(r3)
   227d0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   227d4:	e0fffe17 	ldw	r3,-8(fp)
   227d8:	e0bfff17 	ldw	r2,-4(fp)
   227dc:	18bff51e 	bne	r3,r2,227b4 <__alt_data_end+0xfffe27b4>
    {
      *to++ = *from++;
    }
  }
}
   227e0:	0001883a 	nop
   227e4:	e037883a 	mov	sp,fp
   227e8:	df000017 	ldw	fp,0(sp)
   227ec:	dec00104 	addi	sp,sp,4
   227f0:	f800283a 	ret

000227f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   227f4:	defffe04 	addi	sp,sp,-8
   227f8:	dfc00115 	stw	ra,4(sp)
   227fc:	df000015 	stw	fp,0(sp)
   22800:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   22804:	018000f4 	movhi	r6,3
   22808:	31a24904 	addi	r6,r6,-30428
   2280c:	014000f4 	movhi	r5,3
   22810:	29617d04 	addi	r5,r5,-31244
   22814:	010000f4 	movhi	r4,3
   22818:	21224904 	addi	r4,r4,-30428
   2281c:	002278c0 	call	2278c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   22820:	018000b4 	movhi	r6,2
   22824:	31808c04 	addi	r6,r6,560
   22828:	014000b4 	movhi	r5,2
   2282c:	29400804 	addi	r5,r5,32
   22830:	010000b4 	movhi	r4,2
   22834:	21000804 	addi	r4,r4,32
   22838:	002278c0 	call	2278c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2283c:	018000f4 	movhi	r6,3
   22840:	31a17d04 	addi	r6,r6,-31244
   22844:	014000b4 	movhi	r5,2
   22848:	29574c04 	addi	r5,r5,23856
   2284c:	010000b4 	movhi	r4,2
   22850:	21174c04 	addi	r4,r4,23856
   22854:	002278c0 	call	2278c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   22858:	0024a6c0 	call	24a6c <alt_dcache_flush_all>
  alt_icache_flush_all();
   2285c:	0024ce80 	call	24ce8 <alt_icache_flush_all>
}
   22860:	0001883a 	nop
   22864:	e037883a 	mov	sp,fp
   22868:	dfc00117 	ldw	ra,4(sp)
   2286c:	df000017 	ldw	fp,0(sp)
   22870:	dec00204 	addi	sp,sp,8
   22874:	f800283a 	ret

00022878 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   22878:	defffd04 	addi	sp,sp,-12
   2287c:	dfc00215 	stw	ra,8(sp)
   22880:	df000115 	stw	fp,4(sp)
   22884:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   22888:	0009883a 	mov	r4,zero
   2288c:	0022a640 	call	22a64 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   22890:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   22894:	0022a9c0 	call	22a9c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   22898:	018000f4 	movhi	r6,3
   2289c:	31a16504 	addi	r6,r6,-31340
   228a0:	014000f4 	movhi	r5,3
   228a4:	29616504 	addi	r5,r5,-31340
   228a8:	010000f4 	movhi	r4,3
   228ac:	21216504 	addi	r4,r4,-31340
   228b0:	002508c0 	call	2508c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   228b4:	0024b980 	call	24b98 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   228b8:	010000b4 	movhi	r4,2
   228bc:	2112fe04 	addi	r4,r4,19448
   228c0:	00259040 	call	25904 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   228c4:	d0a0e117 	ldw	r2,-31868(gp)
   228c8:	d0e0e217 	ldw	r3,-31864(gp)
   228cc:	d120e317 	ldw	r4,-31860(gp)
   228d0:	200d883a 	mov	r6,r4
   228d4:	180b883a 	mov	r5,r3
   228d8:	1009883a 	mov	r4,r2
   228dc:	0021d440 	call	21d44 <main>
   228e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   228e4:	01000044 	movi	r4,1
   228e8:	00249940 	call	24994 <close>
  exit (result);
   228ec:	e13fff17 	ldw	r4,-4(fp)
   228f0:	00259180 	call	25918 <exit>

000228f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   228f4:	defffe04 	addi	sp,sp,-8
   228f8:	dfc00115 	stw	ra,4(sp)
   228fc:	df000015 	stw	fp,0(sp)
   22900:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22904:	d0a00f17 	ldw	r2,-32708(gp)
   22908:	10000326 	beq	r2,zero,22918 <alt_get_errno+0x24>
   2290c:	d0a00f17 	ldw	r2,-32708(gp)
   22910:	103ee83a 	callr	r2
   22914:	00000106 	br	2291c <alt_get_errno+0x28>
   22918:	d0a0e004 	addi	r2,gp,-31872
}
   2291c:	e037883a 	mov	sp,fp
   22920:	dfc00117 	ldw	ra,4(sp)
   22924:	df000017 	ldw	fp,0(sp)
   22928:	dec00204 	addi	sp,sp,8
   2292c:	f800283a 	ret

00022930 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   22930:	defff904 	addi	sp,sp,-28
   22934:	dfc00615 	stw	ra,24(sp)
   22938:	df000515 	stw	fp,20(sp)
   2293c:	df000504 	addi	fp,sp,20
   22940:	e13ffd15 	stw	r4,-12(fp)
   22944:	e17ffe15 	stw	r5,-8(fp)
   22948:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2294c:	e0bffd17 	ldw	r2,-12(fp)
   22950:	10000816 	blt	r2,zero,22974 <write+0x44>
   22954:	01400304 	movi	r5,12
   22958:	e13ffd17 	ldw	r4,-12(fp)
   2295c:	0021d940 	call	21d94 <__mulsi3>
   22960:	1007883a 	mov	r3,r2
   22964:	008000f4 	movhi	r2,3
   22968:	10a1d804 	addi	r2,r2,-30880
   2296c:	1885883a 	add	r2,r3,r2
   22970:	00000106 	br	22978 <write+0x48>
   22974:	0005883a 	mov	r2,zero
   22978:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2297c:	e0bffb17 	ldw	r2,-20(fp)
   22980:	10002126 	beq	r2,zero,22a08 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   22984:	e0bffb17 	ldw	r2,-20(fp)
   22988:	10800217 	ldw	r2,8(r2)
   2298c:	108000cc 	andi	r2,r2,3
   22990:	10001826 	beq	r2,zero,229f4 <write+0xc4>
   22994:	e0bffb17 	ldw	r2,-20(fp)
   22998:	10800017 	ldw	r2,0(r2)
   2299c:	10800617 	ldw	r2,24(r2)
   229a0:	10001426 	beq	r2,zero,229f4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   229a4:	e0bffb17 	ldw	r2,-20(fp)
   229a8:	10800017 	ldw	r2,0(r2)
   229ac:	10800617 	ldw	r2,24(r2)
   229b0:	e0ffff17 	ldw	r3,-4(fp)
   229b4:	180d883a 	mov	r6,r3
   229b8:	e17ffe17 	ldw	r5,-8(fp)
   229bc:	e13ffb17 	ldw	r4,-20(fp)
   229c0:	103ee83a 	callr	r2
   229c4:	e0bffc15 	stw	r2,-16(fp)
   229c8:	e0bffc17 	ldw	r2,-16(fp)
   229cc:	1000070e 	bge	r2,zero,229ec <write+0xbc>
      {
        ALT_ERRNO = -rval;
   229d0:	00228f40 	call	228f4 <alt_get_errno>
   229d4:	1007883a 	mov	r3,r2
   229d8:	e0bffc17 	ldw	r2,-16(fp)
   229dc:	0085c83a 	sub	r2,zero,r2
   229e0:	18800015 	stw	r2,0(r3)
        return -1;
   229e4:	00bfffc4 	movi	r2,-1
   229e8:	00000c06 	br	22a1c <write+0xec>
      }
      return rval;
   229ec:	e0bffc17 	ldw	r2,-16(fp)
   229f0:	00000a06 	br	22a1c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   229f4:	00228f40 	call	228f4 <alt_get_errno>
   229f8:	1007883a 	mov	r3,r2
   229fc:	00800344 	movi	r2,13
   22a00:	18800015 	stw	r2,0(r3)
   22a04:	00000406 	br	22a18 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   22a08:	00228f40 	call	228f4 <alt_get_errno>
   22a0c:	1007883a 	mov	r3,r2
   22a10:	00801444 	movi	r2,81
   22a14:	18800015 	stw	r2,0(r3)
  }
  return -1;
   22a18:	00bfffc4 	movi	r2,-1
}
   22a1c:	e037883a 	mov	sp,fp
   22a20:	dfc00117 	ldw	ra,4(sp)
   22a24:	df000017 	ldw	fp,0(sp)
   22a28:	dec00204 	addi	sp,sp,8
   22a2c:	f800283a 	ret

00022a30 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   22a30:	defffd04 	addi	sp,sp,-12
   22a34:	dfc00215 	stw	ra,8(sp)
   22a38:	df000115 	stw	fp,4(sp)
   22a3c:	df000104 	addi	fp,sp,4
   22a40:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   22a44:	d1600c04 	addi	r5,gp,-32720
   22a48:	e13fff17 	ldw	r4,-4(fp)
   22a4c:	0024af40 	call	24af4 <alt_dev_llist_insert>
}
   22a50:	e037883a 	mov	sp,fp
   22a54:	dfc00117 	ldw	ra,4(sp)
   22a58:	df000017 	ldw	fp,0(sp)
   22a5c:	dec00204 	addi	sp,sp,8
   22a60:	f800283a 	ret

00022a64 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   22a64:	defffd04 	addi	sp,sp,-12
   22a68:	dfc00215 	stw	ra,8(sp)
   22a6c:	df000115 	stw	fp,4(sp)
   22a70:	df000104 	addi	fp,sp,4
   22a74:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   22a78:	00256780 	call	25678 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   22a7c:	00800044 	movi	r2,1
   22a80:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   22a84:	0001883a 	nop
   22a88:	e037883a 	mov	sp,fp
   22a8c:	dfc00117 	ldw	ra,4(sp)
   22a90:	df000017 	ldw	fp,0(sp)
   22a94:	dec00204 	addi	sp,sp,8
   22a98:	f800283a 	ret

00022a9c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   22a9c:	defffe04 	addi	sp,sp,-8
   22aa0:	dfc00115 	stw	ra,4(sp)
   22aa4:	df000015 	stw	fp,0(sp)
   22aa8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   22aac:	010000f4 	movhi	r4,3
   22ab0:	2121b504 	addi	r4,r4,-31020
   22ab4:	0022d2c0 	call	22d2c <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   22ab8:	010000f4 	movhi	r4,3
   22abc:	2121c304 	addi	r4,r4,-30964
   22ac0:	0022a300 	call	22a30 <alt_dev_reg>
}
   22ac4:	0001883a 	nop
   22ac8:	e037883a 	mov	sp,fp
   22acc:	dfc00117 	ldw	ra,4(sp)
   22ad0:	df000017 	ldw	fp,0(sp)
   22ad4:	dec00204 	addi	sp,sp,8
   22ad8:	f800283a 	ret

00022adc <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   22adc:	defff904 	addi	sp,sp,-28
   22ae0:	dfc00615 	stw	ra,24(sp)
   22ae4:	df000515 	stw	fp,20(sp)
   22ae8:	df000504 	addi	fp,sp,20
   22aec:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   22af0:	008000b4 	movhi	r2,2
   22af4:	10a1a804 	addi	r2,r2,-31072
   22af8:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   22afc:	e0bfff17 	ldw	r2,-4(fp)
   22b00:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   22b04:	e0bffc17 	ldw	r2,-16(fp)
   22b08:	10800717 	ldw	r2,28(r2)
   22b0c:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   22b10:	e0bffd17 	ldw	r2,-12(fp)
   22b14:	10800217 	ldw	r2,8(r2)
   22b18:	10800098 	cmpnei	r2,r2,2
   22b1c:	1000251e 	bne	r2,zero,22bb4 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   22b20:	e0bffd17 	ldw	r2,-12(fp)
   22b24:	10c00017 	ldw	r3,0(r2)
   22b28:	e0bffd17 	ldw	r2,-12(fp)
   22b2c:	10800117 	ldw	r2,4(r2)
   22b30:	e13ffe04 	addi	r4,fp,-8
   22b34:	200f883a 	mov	r7,r4
   22b38:	100d883a 	mov	r6,r2
   22b3c:	180b883a 	mov	r5,r3
   22b40:	e13ffc17 	ldw	r4,-16(fp)
   22b44:	002328c0 	call	2328c <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   22b48:	e0bffd17 	ldw	r2,-12(fp)
   22b4c:	10c00117 	ldw	r3,4(r2)
   22b50:	e0bffe17 	ldw	r2,-8(fp)
   22b54:	1887c83a 	sub	r3,r3,r2
   22b58:	e0bffd17 	ldw	r2,-12(fp)
   22b5c:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   22b60:	e0bffd17 	ldw	r2,-12(fp)
   22b64:	10c00017 	ldw	r3,0(r2)
   22b68:	e0bffe17 	ldw	r2,-8(fp)
   22b6c:	1887883a 	add	r3,r3,r2
   22b70:	e0bffd17 	ldw	r2,-12(fp)
   22b74:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   22b78:	e0bffd17 	ldw	r2,-12(fp)
   22b7c:	10800117 	ldw	r2,4(r2)
   22b80:	10000c26 	beq	r2,zero,22bb4 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   22b84:	01400704 	movi	r5,28
   22b88:	e13ffc17 	ldw	r4,-16(fp)
   22b8c:	00244440 	call	24444 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   22b90:	01400084 	movi	r5,2
   22b94:	e13ffc17 	ldw	r4,-16(fp)
   22b98:	00244e80 	call	244e8 <alt_avalon_i2c_int_enable>
   22b9c:	00000e06 	br	22bd8 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   22ba0:	e0bffb17 	ldw	r2,-20(fp)
   22ba4:	10bfffc4 	addi	r2,r2,-1
   22ba8:	e0bffb15 	stw	r2,-20(fp)
   22bac:	e0bffb17 	ldw	r2,-20(fp)
   22bb0:	10000426 	beq	r2,zero,22bc4 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   22bb4:	e13ffc17 	ldw	r4,-16(fp)
   22bb8:	00232480 	call	23248 <alt_avalon_i2c_is_busy>
   22bbc:	103ff81e 	bne	r2,zero,22ba0 <__alt_data_end+0xfffe2ba0>
   22bc0:	00000106 	br	22bc8 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   22bc4:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   22bc8:	e13ffc17 	ldw	r4,-16(fp)
   22bcc:	0022ef00 	call	22ef0 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   22bd0:	e0bffd17 	ldw	r2,-12(fp)
   22bd4:	10000215 	stw	zero,8(r2)
}
   22bd8:	e037883a 	mov	sp,fp
   22bdc:	dfc00117 	ldw	ra,4(sp)
   22be0:	df000017 	ldw	fp,0(sp)
   22be4:	dec00204 	addi	sp,sp,8
   22be8:	f800283a 	ret

00022bec <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   22bec:	defffc04 	addi	sp,sp,-16
   22bf0:	dfc00315 	stw	ra,12(sp)
   22bf4:	df000215 	stw	fp,8(sp)
   22bf8:	df000204 	addi	fp,sp,8
   22bfc:	e13ffe15 	stw	r4,-8(fp)
   22c00:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   22c04:	e0bfff17 	ldw	r2,-4(fp)
   22c08:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   22c0c:	e1ffff17 	ldw	r7,-4(fp)
   22c10:	000d883a 	mov	r6,zero
   22c14:	014000b4 	movhi	r5,2
   22c18:	294ab704 	addi	r5,r5,10972
   22c1c:	e13ffe17 	ldw	r4,-8(fp)
   22c20:	0022cd80 	call	22cd8 <alt_avalon_i2c_register_callback>
}
   22c24:	0001883a 	nop
   22c28:	e037883a 	mov	sp,fp
   22c2c:	dfc00117 	ldw	ra,4(sp)
   22c30:	df000017 	ldw	fp,0(sp)
   22c34:	dec00204 	addi	sp,sp,8
   22c38:	f800283a 	ret

00022c3c <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   22c3c:	defff904 	addi	sp,sp,-28
   22c40:	dfc00615 	stw	ra,24(sp)
   22c44:	df000515 	stw	fp,20(sp)
   22c48:	df000504 	addi	fp,sp,20
   22c4c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   22c50:	e0bfff17 	ldw	r2,-4(fp)
   22c54:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   22c58:	014007c4 	movi	r5,31
   22c5c:	e13ffb17 	ldw	r4,-20(fp)
   22c60:	00244800 	call	24480 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   22c64:	01400704 	movi	r5,28
   22c68:	e13ffb17 	ldw	r4,-20(fp)
   22c6c:	00244440 	call	24444 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   22c70:	e0bffb17 	ldw	r2,-20(fp)
   22c74:	10800617 	ldw	r2,24(r2)
   22c78:	10001126 	beq	r2,zero,22cc0 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22c7c:	0005303a 	rdctl	r2,status
   22c80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22c84:	e0fffd17 	ldw	r3,-12(fp)
   22c88:	00bfff84 	movi	r2,-2
   22c8c:	1884703a 	and	r2,r3,r2
   22c90:	1001703a 	wrctl	status,r2
  
  return context;
   22c94:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   22c98:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   22c9c:	e0bffb17 	ldw	r2,-20(fp)
   22ca0:	10800617 	ldw	r2,24(r2)
   22ca4:	e13ffb17 	ldw	r4,-20(fp)
   22ca8:	103ee83a 	callr	r2
   22cac:	e0bffc17 	ldw	r2,-16(fp)
   22cb0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22cb4:	e0bffe17 	ldw	r2,-8(fp)
   22cb8:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   22cbc:	0001883a 	nop
   22cc0:	0001883a 	nop
}
   22cc4:	e037883a 	mov	sp,fp
   22cc8:	dfc00117 	ldw	ra,4(sp)
   22ccc:	df000017 	ldw	fp,0(sp)
   22cd0:	dec00204 	addi	sp,sp,8
   22cd4:	f800283a 	ret

00022cd8 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   22cd8:	defffb04 	addi	sp,sp,-20
   22cdc:	df000415 	stw	fp,16(sp)
   22ce0:	df000404 	addi	fp,sp,16
   22ce4:	e13ffc15 	stw	r4,-16(fp)
   22ce8:	e17ffd15 	stw	r5,-12(fp)
   22cec:	e1bffe15 	stw	r6,-8(fp)
   22cf0:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   22cf4:	e0bffc17 	ldw	r2,-16(fp)
   22cf8:	e0fffd17 	ldw	r3,-12(fp)
   22cfc:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   22d00:	e0bffc17 	ldw	r2,-16(fp)
   22d04:	e0ffff17 	ldw	r3,-4(fp)
   22d08:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   22d0c:	e0bffc17 	ldw	r2,-16(fp)
   22d10:	e0fffe17 	ldw	r3,-8(fp)
   22d14:	10c00815 	stw	r3,32(r2)

    return ;
   22d18:	0001883a 	nop
}
   22d1c:	e037883a 	mov	sp,fp
   22d20:	df000017 	ldw	fp,0(sp)
   22d24:	dec00104 	addi	sp,sp,4
   22d28:	f800283a 	ret

00022d2c <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   22d2c:	defff704 	addi	sp,sp,-36
   22d30:	dfc00815 	stw	ra,32(sp)
   22d34:	df000715 	stw	fp,28(sp)
   22d38:	df000704 	addi	fp,sp,28
   22d3c:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   22d40:	e13fff17 	ldw	r4,-4(fp)
   22d44:	0022ef00 	call	22ef0 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   22d48:	014007c4 	movi	r5,31
   22d4c:	e13fff17 	ldw	r4,-4(fp)
   22d50:	00244800 	call	24480 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   22d54:	01400704 	movi	r5,28
   22d58:	e13fff17 	ldw	r4,-4(fp)
   22d5c:	00244440 	call	24444 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   22d60:	014000c4 	movi	r5,3
   22d64:	e13fff17 	ldw	r4,-4(fp)
   22d68:	002468c0 	call	2468c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   22d6c:	014000c4 	movi	r5,3
   22d70:	e13fff17 	ldw	r4,-4(fp)
   22d74:	00245dc0 	call	245dc <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   22d78:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   22d7c:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   22d80:	e0bffb04 	addi	r2,fp,-20
   22d84:	018000b4 	movhi	r6,2
   22d88:	31a1a804 	addi	r6,r6,-31072
   22d8c:	100b883a 	mov	r5,r2
   22d90:	e13fff17 	ldw	r4,-4(fp)
   22d94:	002314c0 	call	2314c <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   22d98:	e0bffb04 	addi	r2,fp,-20
   22d9c:	100b883a 	mov	r5,r2
   22da0:	e13fff17 	ldw	r4,-4(fp)
   22da4:	0022fec0 	call	22fec <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   22da8:	d1600804 	addi	r5,gp,-32736
   22dac:	e13fff17 	ldw	r4,-4(fp)
   22db0:	0024af40 	call	24af4 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   22db4:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   22db8:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   22dbc:	e0bffa17 	ldw	r2,-24(fp)
   22dc0:	10000c1e 	bne	r2,zero,22df4 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   22dc4:	e0bfff17 	ldw	r2,-4(fp)
   22dc8:	10c00417 	ldw	r3,16(r2)
   22dcc:	e0bfff17 	ldw	r2,-4(fp)
   22dd0:	10800517 	ldw	r2,20(r2)
   22dd4:	d8000015 	stw	zero,0(sp)
   22dd8:	e1ffff17 	ldw	r7,-4(fp)
   22ddc:	018000b4 	movhi	r6,2
   22de0:	318b0f04 	addi	r6,r6,11324
   22de4:	100b883a 	mov	r5,r2
   22de8:	1809883a 	mov	r4,r3
   22dec:	0024d080 	call	24d08 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   22df0:	00000406 	br	22e04 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   22df4:	010000f4 	movhi	r4,3
   22df8:	21217204 	addi	r4,r4,-31288
   22dfc:	002538c0 	call	2538c <alt_printf>
    }

    return;
   22e00:	0001883a 	nop

}
   22e04:	e037883a 	mov	sp,fp
   22e08:	dfc00117 	ldw	ra,4(sp)
   22e0c:	df000017 	ldw	fp,0(sp)
   22e10:	dec00204 	addi	sp,sp,8
   22e14:	f800283a 	ret

00022e18 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   22e18:	defffc04 	addi	sp,sp,-16
   22e1c:	dfc00315 	stw	ra,12(sp)
   22e20:	df000215 	stw	fp,8(sp)
   22e24:	df000204 	addi	fp,sp,8
   22e28:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   22e2c:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   22e30:	d1600804 	addi	r5,gp,-32736
   22e34:	e13fff17 	ldw	r4,-4(fp)
   22e38:	0024c580 	call	24c58 <alt_find_dev>
   22e3c:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   22e40:	e0bffe17 	ldw	r2,-8(fp)
}
   22e44:	e037883a 	mov	sp,fp
   22e48:	dfc00117 	ldw	ra,4(sp)
   22e4c:	df000017 	ldw	fp,0(sp)
   22e50:	dec00204 	addi	sp,sp,8
   22e54:	f800283a 	ret

00022e58 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   22e58:	defffc04 	addi	sp,sp,-16
   22e5c:	df000315 	stw	fp,12(sp)
   22e60:	df000304 	addi	fp,sp,12
   22e64:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   22e68:	e0bfff17 	ldw	r2,-4(fp)
   22e6c:	10800717 	ldw	r2,28(r2)
   22e70:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   22e74:	e0bfff17 	ldw	r2,-4(fp)
   22e78:	10800317 	ldw	r2,12(r2)
   22e7c:	10800204 	addi	r2,r2,8
   22e80:	10800037 	ldwio	r2,0(r2)
   22e84:	1080004c 	andi	r2,r2,1
   22e88:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   22e8c:	e0bffe17 	ldw	r2,-8(fp)
   22e90:	10000226 	beq	r2,zero,22e9c <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   22e94:	00bffe44 	movi	r2,-7
   22e98:	00001106 	br	22ee0 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   22e9c:	e0bfff17 	ldw	r2,-4(fp)
   22ea0:	10c00617 	ldw	r3,24(r2)
   22ea4:	008000b4 	movhi	r2,2
   22ea8:	108ab704 	addi	r2,r2,10972
   22eac:	1880021e 	bne	r3,r2,22eb8 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   22eb0:	e0bffd17 	ldw	r2,-12(fp)
   22eb4:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   22eb8:	e0bfff17 	ldw	r2,-4(fp)
   22ebc:	10800317 	ldw	r2,12(r2)
   22ec0:	10800204 	addi	r2,r2,8
   22ec4:	e0ffff17 	ldw	r3,-4(fp)
   22ec8:	18c00317 	ldw	r3,12(r3)
   22ecc:	18c00204 	addi	r3,r3,8
   22ed0:	18c00037 	ldwio	r3,0(r3)
   22ed4:	18c00054 	ori	r3,r3,1
   22ed8:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   22edc:	0005883a 	mov	r2,zero
}
   22ee0:	e037883a 	mov	sp,fp
   22ee4:	df000017 	ldw	fp,0(sp)
   22ee8:	dec00104 	addi	sp,sp,4
   22eec:	f800283a 	ret

00022ef0 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   22ef0:	defffe04 	addi	sp,sp,-8
   22ef4:	df000115 	stw	fp,4(sp)
   22ef8:	df000104 	addi	fp,sp,4
   22efc:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   22f00:	e0bfff17 	ldw	r2,-4(fp)
   22f04:	10800317 	ldw	r2,12(r2)
   22f08:	10800204 	addi	r2,r2,8
   22f0c:	e0ffff17 	ldw	r3,-4(fp)
   22f10:	18c00317 	ldw	r3,12(r3)
   22f14:	18c00204 	addi	r3,r3,8
   22f18:	19000037 	ldwio	r4,0(r3)
   22f1c:	00ffff84 	movi	r3,-2
   22f20:	20c6703a 	and	r3,r4,r3
   22f24:	10c00035 	stwio	r3,0(r2)

}
   22f28:	0001883a 	nop
   22f2c:	e037883a 	mov	sp,fp
   22f30:	df000017 	ldw	fp,0(sp)
   22f34:	dec00104 	addi	sp,sp,4
   22f38:	f800283a 	ret

00022f3c <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   22f3c:	defffd04 	addi	sp,sp,-12
   22f40:	df000215 	stw	fp,8(sp)
   22f44:	df000204 	addi	fp,sp,8
   22f48:	e13ffe15 	stw	r4,-8(fp)
   22f4c:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   22f50:	e0bffe17 	ldw	r2,-8(fp)
   22f54:	10c00d17 	ldw	r3,52(r2)
   22f58:	e0bfff17 	ldw	r2,-4(fp)
   22f5c:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   22f60:	e0bffe17 	ldw	r2,-8(fp)
   22f64:	10800317 	ldw	r2,12(r2)
   22f68:	10800204 	addi	r2,r2,8
   22f6c:	10800037 	ldwio	r2,0(r2)
   22f70:	1080008c 	andi	r2,r2,2
   22f74:	1005d07a 	srai	r2,r2,1
   22f78:	1007883a 	mov	r3,r2
   22f7c:	e0bfff17 	ldw	r2,-4(fp)
   22f80:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   22f84:	e0bffe17 	ldw	r2,-8(fp)
   22f88:	10800317 	ldw	r2,12(r2)
   22f8c:	10800904 	addi	r2,r2,36
   22f90:	10800037 	ldwio	r2,0(r2)
   22f94:	1007883a 	mov	r3,r2
   22f98:	e0bfff17 	ldw	r2,-4(fp)
   22f9c:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   22fa0:	e0bffe17 	ldw	r2,-8(fp)
   22fa4:	10800317 	ldw	r2,12(r2)
   22fa8:	10800804 	addi	r2,r2,32
   22fac:	10800037 	ldwio	r2,0(r2)
   22fb0:	1007883a 	mov	r3,r2
   22fb4:	e0bfff17 	ldw	r2,-4(fp)
   22fb8:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   22fbc:	e0bffe17 	ldw	r2,-8(fp)
   22fc0:	10800317 	ldw	r2,12(r2)
   22fc4:	10800a04 	addi	r2,r2,40
   22fc8:	10800037 	ldwio	r2,0(r2)
   22fcc:	1007883a 	mov	r3,r2
   22fd0:	e0bfff17 	ldw	r2,-4(fp)
   22fd4:	10c0030d 	sth	r3,12(r2)
}
   22fd8:	0001883a 	nop
   22fdc:	e037883a 	mov	sp,fp
   22fe0:	df000017 	ldw	fp,0(sp)
   22fe4:	dec00104 	addi	sp,sp,4
   22fe8:	f800283a 	ret

00022fec <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   22fec:	defffd04 	addi	sp,sp,-12
   22ff0:	df000215 	stw	fp,8(sp)
   22ff4:	df000204 	addi	fp,sp,8
   22ff8:	e13ffe15 	stw	r4,-8(fp)
   22ffc:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   23000:	e0bfff17 	ldw	r2,-4(fp)
   23004:	10c00017 	ldw	r3,0(r2)
   23008:	e0bffe17 	ldw	r2,-8(fp)
   2300c:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   23010:	e0bffe17 	ldw	r2,-8(fp)
   23014:	10800317 	ldw	r2,12(r2)
   23018:	10c00204 	addi	r3,r2,8
   2301c:	e0bffe17 	ldw	r2,-8(fp)
   23020:	10800317 	ldw	r2,12(r2)
   23024:	10800204 	addi	r2,r2,8
   23028:	10800037 	ldwio	r2,0(r2)
   2302c:	1009883a 	mov	r4,r2
   23030:	00bfff44 	movi	r2,-3
   23034:	2088703a 	and	r4,r4,r2
   23038:	e0bfff17 	ldw	r2,-4(fp)
   2303c:	10800117 	ldw	r2,4(r2)
   23040:	1085883a 	add	r2,r2,r2
   23044:	1080008c 	andi	r2,r2,2
   23048:	2084b03a 	or	r2,r4,r2
   2304c:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   23050:	e0bffe17 	ldw	r2,-8(fp)
   23054:	10800317 	ldw	r2,12(r2)
   23058:	10800904 	addi	r2,r2,36
   2305c:	e0ffff17 	ldw	r3,-4(fp)
   23060:	18c0020b 	ldhu	r3,8(r3)
   23064:	18ffffcc 	andi	r3,r3,65535
   23068:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   2306c:	e0bffe17 	ldw	r2,-8(fp)
   23070:	10800317 	ldw	r2,12(r2)
   23074:	10800804 	addi	r2,r2,32
   23078:	e0ffff17 	ldw	r3,-4(fp)
   2307c:	18c0028b 	ldhu	r3,10(r3)
   23080:	18ffffcc 	andi	r3,r3,65535
   23084:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   23088:	e0bffe17 	ldw	r2,-8(fp)
   2308c:	10800317 	ldw	r2,12(r2)
   23090:	10800a04 	addi	r2,r2,40
   23094:	e0ffff17 	ldw	r3,-4(fp)
   23098:	18c0030b 	ldhu	r3,12(r3)
   2309c:	18ffffcc 	andi	r3,r3,65535
   230a0:	10c00035 	stwio	r3,0(r2)
}
   230a4:	0001883a 	nop
   230a8:	e037883a 	mov	sp,fp
   230ac:	df000017 	ldw	fp,0(sp)
   230b0:	dec00104 	addi	sp,sp,4
   230b4:	f800283a 	ret

000230b8 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   230b8:	defffb04 	addi	sp,sp,-20
   230bc:	dfc00415 	stw	ra,16(sp)
   230c0:	df000315 	stw	fp,12(sp)
   230c4:	df000304 	addi	fp,sp,12
   230c8:	e13ffd15 	stw	r4,-12(fp)
   230cc:	e17ffe15 	stw	r5,-8(fp)
   230d0:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   230d4:	e0bffe17 	ldw	r2,-8(fp)
   230d8:	1080028b 	ldhu	r2,10(r2)
   230dc:	10bfffcc 	andi	r2,r2,65535
   230e0:	10000426 	beq	r2,zero,230f4 <alt_avalon_i2c_master_config_speed_get+0x3c>
   230e4:	e0bffe17 	ldw	r2,-8(fp)
   230e8:	1080020b 	ldhu	r2,8(r2)
   230ec:	10bfffcc 	andi	r2,r2,65535
   230f0:	1000021e 	bne	r2,zero,230fc <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   230f4:	00bfff44 	movi	r2,-3
   230f8:	00000f06 	br	23138 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   230fc:	e0bffd17 	ldw	r2,-12(fp)
   23100:	11000c17 	ldw	r4,48(r2)
   23104:	e0bffe17 	ldw	r2,-8(fp)
   23108:	1080028b 	ldhu	r2,10(r2)
   2310c:	10ffffcc 	andi	r3,r2,65535
   23110:	e0bffe17 	ldw	r2,-8(fp)
   23114:	1080020b 	ldhu	r2,8(r2)
   23118:	10bfffcc 	andi	r2,r2,65535
   2311c:	1885883a 	add	r2,r3,r2
   23120:	100b883a 	mov	r5,r2
   23124:	00226d00 	call	226d0 <__udivsi3>
   23128:	1007883a 	mov	r3,r2
   2312c:	e0bfff17 	ldw	r2,-4(fp)
   23130:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   23134:	0005883a 	mov	r2,zero
}
   23138:	e037883a 	mov	sp,fp
   2313c:	dfc00117 	ldw	ra,4(sp)
   23140:	df000017 	ldw	fp,0(sp)
   23144:	dec00204 	addi	sp,sp,8
   23148:	f800283a 	ret

0002314c <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   2314c:	defff904 	addi	sp,sp,-28
   23150:	dfc00615 	stw	ra,24(sp)
   23154:	df000515 	stw	fp,20(sp)
   23158:	df000504 	addi	fp,sp,20
   2315c:	e13ffd15 	stw	r4,-12(fp)
   23160:	e17ffe15 	stw	r5,-8(fp)
   23164:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   23168:	e0ffff17 	ldw	r3,-4(fp)
   2316c:	008001b4 	movhi	r2,6
   23170:	1086a004 	addi	r2,r2,6784
   23174:	10c00436 	bltu	r2,r3,23188 <alt_avalon_i2c_master_config_speed_set+0x3c>
   23178:	e0bfff17 	ldw	r2,-4(fp)
   2317c:	10000226 	beq	r2,zero,23188 <alt_avalon_i2c_master_config_speed_set+0x3c>
   23180:	e0bfff17 	ldw	r2,-4(fp)
   23184:	1000021e 	bne	r2,zero,23190 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   23188:	00bfff04 	movi	r2,-4
   2318c:	00002906 	br	23234 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   23190:	e0bffd17 	ldw	r2,-12(fp)
   23194:	10c00c17 	ldw	r3,48(r2)
   23198:	e0bfff17 	ldw	r2,-4(fp)
   2319c:	1085883a 	add	r2,r2,r2
   231a0:	100b883a 	mov	r5,r2
   231a4:	1809883a 	mov	r4,r3
   231a8:	00226d00 	call	226d0 <__udivsi3>
   231ac:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   231b0:	e0bffb17 	ldw	r2,-20(fp)
   231b4:	10800f04 	addi	r2,r2,60
   231b8:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   231bc:	e0bffb17 	ldw	r2,-20(fp)
   231c0:	10bff104 	addi	r2,r2,-60
   231c4:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   231c8:	e0ffff17 	ldw	r3,-4(fp)
   231cc:	008000b4 	movhi	r2,2
   231d0:	10a1a804 	addi	r2,r2,-31072
   231d4:	10c0042e 	bgeu	r2,r3,231e8 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   231d8:	e0bffe17 	ldw	r2,-8(fp)
   231dc:	00c00044 	movi	r3,1
   231e0:	10c00115 	stw	r3,4(r2)
   231e4:	00000206 	br	231f0 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   231e8:	e0bffe17 	ldw	r2,-8(fp)
   231ec:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   231f0:	e0bffb17 	ldw	r2,-20(fp)
   231f4:	1007883a 	mov	r3,r2
   231f8:	e0bffe17 	ldw	r2,-8(fp)
   231fc:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   23200:	e0bffc17 	ldw	r2,-16(fp)
   23204:	1007883a 	mov	r3,r2
   23208:	e0bffe17 	ldw	r2,-8(fp)
   2320c:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   23210:	e0bffb17 	ldw	r2,-20(fp)
   23214:	1007883a 	mov	r3,r2
   23218:	e0bffb17 	ldw	r2,-20(fp)
   2321c:	1004d07a 	srli	r2,r2,1
   23220:	1885c83a 	sub	r2,r3,r2
   23224:	1007883a 	mov	r3,r2
   23228:	e0bffe17 	ldw	r2,-8(fp)
   2322c:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   23230:	0005883a 	mov	r2,zero

}
   23234:	e037883a 	mov	sp,fp
   23238:	dfc00117 	ldw	ra,4(sp)
   2323c:	df000017 	ldw	fp,0(sp)
   23240:	dec00204 	addi	sp,sp,8
   23244:	f800283a 	ret

00023248 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   23248:	defffe04 	addi	sp,sp,-8
   2324c:	df000115 	stw	fp,4(sp)
   23250:	df000104 	addi	fp,sp,4
   23254:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   23258:	e0bfff17 	ldw	r2,-4(fp)
   2325c:	10800317 	ldw	r2,12(r2)
   23260:	10800504 	addi	r2,r2,20
   23264:	10800037 	ldwio	r2,0(r2)
   23268:	1080004c 	andi	r2,r2,1
   2326c:	10000226 	beq	r2,zero,23278 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   23270:	00800044 	movi	r2,1
   23274:	00000106 	br	2327c <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   23278:	0005883a 	mov	r2,zero
}
   2327c:	e037883a 	mov	sp,fp
   23280:	df000017 	ldw	fp,0(sp)
   23284:	dec00104 	addi	sp,sp,4
   23288:	f800283a 	ret

0002328c <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   2328c:	defffb04 	addi	sp,sp,-20
   23290:	df000415 	stw	fp,16(sp)
   23294:	df000404 	addi	fp,sp,16
   23298:	e13ffc15 	stw	r4,-16(fp)
   2329c:	e17ffd15 	stw	r5,-12(fp)
   232a0:	e1bffe15 	stw	r6,-8(fp)
   232a4:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   232a8:	e0bfff17 	ldw	r2,-4(fp)
   232ac:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   232b0:	00001406 	br	23304 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   232b4:	e0bfff17 	ldw	r2,-4(fp)
   232b8:	10800017 	ldw	r2,0(r2)
   232bc:	e0fffd17 	ldw	r3,-12(fp)
   232c0:	1885883a 	add	r2,r3,r2
   232c4:	e0fffc17 	ldw	r3,-16(fp)
   232c8:	18c00317 	ldw	r3,12(r3)
   232cc:	18c00104 	addi	r3,r3,4
   232d0:	18c00037 	ldwio	r3,0(r3)
   232d4:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   232d8:	e0bfff17 	ldw	r2,-4(fp)
   232dc:	10800017 	ldw	r2,0(r2)
   232e0:	10c00044 	addi	r3,r2,1
   232e4:	e0bfff17 	ldw	r2,-4(fp)
   232e8:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   232ec:	e0bfff17 	ldw	r2,-4(fp)
   232f0:	10c00017 	ldw	r3,0(r2)
   232f4:	e0bffe17 	ldw	r2,-8(fp)
   232f8:	1880021e 	bne	r3,r2,23304 <alt_avalon_i2c_rx_read_available+0x78>
   232fc:	e0bffe17 	ldw	r2,-8(fp)
   23300:	1000061e 	bne	r2,zero,2331c <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   23304:	e0bffc17 	ldw	r2,-16(fp)
   23308:	10800317 	ldw	r2,12(r2)
   2330c:	10800704 	addi	r2,r2,28
   23310:	10800037 	ldwio	r2,0(r2)
   23314:	103fe71e 	bne	r2,zero,232b4 <__alt_data_end+0xfffe32b4>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   23318:	00000106 	br	23320 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   2331c:	0001883a 	nop
    }
}
   23320:	0001883a 	nop
   23324:	e037883a 	mov	sp,fp
   23328:	df000017 	ldw	fp,0(sp)
   2332c:	dec00104 	addi	sp,sp,4
   23330:	f800283a 	ret

00023334 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   23334:	defffa04 	addi	sp,sp,-24
   23338:	dfc00515 	stw	ra,20(sp)
   2333c:	df000415 	stw	fp,16(sp)
   23340:	df000404 	addi	fp,sp,16
   23344:	e13ffe15 	stw	r4,-8(fp)
   23348:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   2334c:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   23350:	008000b4 	movhi	r2,2
   23354:	10a1a804 	addi	r2,r2,-31072
   23358:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   2335c:	00000d06 	br	23394 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   23360:	e0bffd17 	ldw	r2,-12(fp)
   23364:	108002a8 	cmpgeui	r2,r2,10
   23368:	1000021e 	bne	r2,zero,23374 <alt_avalon_i2c_rx_read+0x40>
   2336c:	0109c404 	movi	r4,10000
   23370:	00249340 	call	24934 <alt_busy_sleep>
      if (--timeout == 0)
   23374:	e0bffd17 	ldw	r2,-12(fp)
   23378:	10bfffc4 	addi	r2,r2,-1
   2337c:	e0bffd15 	stw	r2,-12(fp)
   23380:	e0bffd17 	ldw	r2,-12(fp)
   23384:	1000031e 	bne	r2,zero,23394 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   23388:	00bfff84 	movi	r2,-2
   2338c:	e0bffc15 	stw	r2,-16(fp)
        break;
   23390:	00000506 	br	233a8 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   23394:	e0bffe17 	ldw	r2,-8(fp)
   23398:	10800317 	ldw	r2,12(r2)
   2339c:	10800704 	addi	r2,r2,28
   233a0:	10800037 	ldwio	r2,0(r2)
   233a4:	103fee26 	beq	r2,zero,23360 <__alt_data_end+0xfffe3360>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   233a8:	e0bffe17 	ldw	r2,-8(fp)
   233ac:	10800317 	ldw	r2,12(r2)
   233b0:	10800104 	addi	r2,r2,4
   233b4:	10800037 	ldwio	r2,0(r2)
   233b8:	1007883a 	mov	r3,r2
   233bc:	e0bfff17 	ldw	r2,-4(fp)
   233c0:	10c00005 	stb	r3,0(r2)
        
    return status;
   233c4:	e0bffc17 	ldw	r2,-16(fp)
}
   233c8:	e037883a 	mov	sp,fp
   233cc:	dfc00117 	ldw	ra,4(sp)
   233d0:	df000017 	ldw	fp,0(sp)
   233d4:	dec00204 	addi	sp,sp,8
   233d8:	f800283a 	ret

000233dc <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   233dc:	defff804 	addi	sp,sp,-32
   233e0:	dfc00715 	stw	ra,28(sp)
   233e4:	df000615 	stw	fp,24(sp)
   233e8:	df000604 	addi	fp,sp,24
   233ec:	e13ffc15 	stw	r4,-16(fp)
   233f0:	2809883a 	mov	r4,r5
   233f4:	3007883a 	mov	r3,r6
   233f8:	3805883a 	mov	r2,r7
   233fc:	e13ffd05 	stb	r4,-12(fp)
   23400:	e0fffe05 	stb	r3,-8(fp)
   23404:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   23408:	0089c404 	movi	r2,10000
   2340c:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   23410:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   23414:	00000c06 	br	23448 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   23418:	e0bffa17 	ldw	r2,-24(fp)
   2341c:	108002a8 	cmpgeui	r2,r2,10
   23420:	1000021e 	bne	r2,zero,2342c <alt_avalon_i2c_cmd_write+0x50>
   23424:	0109c404 	movi	r4,10000
   23428:	00249340 	call	24934 <alt_busy_sleep>
      if (--timeout == 0)
   2342c:	e0bffa17 	ldw	r2,-24(fp)
   23430:	10bfffc4 	addi	r2,r2,-1
   23434:	e0bffa15 	stw	r2,-24(fp)
   23438:	e0bffa17 	ldw	r2,-24(fp)
   2343c:	1000021e 	bne	r2,zero,23448 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   23440:	00bfff84 	movi	r2,-2
   23444:	00001906 	br	234ac <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   23448:	e0bffc17 	ldw	r2,-16(fp)
   2344c:	10800317 	ldw	r2,12(r2)
   23450:	10800404 	addi	r2,r2,16
   23454:	10800037 	ldwio	r2,0(r2)
   23458:	1080004c 	andi	r2,r2,1
   2345c:	103fee26 	beq	r2,zero,23418 <__alt_data_end+0xfffe3418>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   23460:	e0bffc17 	ldw	r2,-16(fp)
   23464:	10800317 	ldw	r2,12(r2)
   23468:	e13ffd03 	ldbu	r4,-12(fp)
   2346c:	e0fffe03 	ldbu	r3,-8(fp)
   23470:	1806927a 	slli	r3,r3,9
   23474:	20c8b03a 	or	r4,r4,r3
   23478:	e0ffff03 	ldbu	r3,-4(fp)
   2347c:	1806923a 	slli	r3,r3,8
   23480:	20c6b03a 	or	r3,r4,r3
   23484:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   23488:	e0bffb04 	addi	r2,fp,-20
   2348c:	100b883a 	mov	r5,r2
   23490:	e13ffc17 	ldw	r4,-16(fp)
   23494:	002361c0 	call	2361c <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   23498:	e0bffb04 	addi	r2,fp,-20
   2349c:	100b883a 	mov	r5,r2
   234a0:	e13ffc17 	ldw	r4,-16(fp)
   234a4:	00236680 	call	23668 <alt_avalon_i2c_check_arblost>
    
    return status;
   234a8:	e0bffb17 	ldw	r2,-20(fp)
}
   234ac:	e037883a 	mov	sp,fp
   234b0:	dfc00117 	ldw	ra,4(sp)
   234b4:	df000017 	ldw	fp,0(sp)
   234b8:	dec00204 	addi	sp,sp,8
   234bc:	f800283a 	ret

000234c0 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   234c0:	defffa04 	addi	sp,sp,-24
   234c4:	dfc00515 	stw	ra,20(sp)
   234c8:	df000415 	stw	fp,16(sp)
   234cc:	df000404 	addi	fp,sp,16
   234d0:	e13ffd15 	stw	r4,-12(fp)
   234d4:	e17ffe15 	stw	r5,-8(fp)
   234d8:	3005883a 	mov	r2,r6
   234dc:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   234e0:	e0bffd17 	ldw	r2,-12(fp)
   234e4:	10800d17 	ldw	r2,52(r2)
   234e8:	10800058 	cmpnei	r2,r2,1
   234ec:	10001c1e 	bne	r2,zero,23560 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   234f0:	e0bffd17 	ldw	r2,-12(fp)
   234f4:	10800917 	ldw	r2,36(r2)
   234f8:	109e0014 	ori	r2,r2,30720
   234fc:	1004d1fa 	srli	r2,r2,7
   23500:	1007883a 	mov	r3,r2
   23504:	00bfff84 	movi	r2,-2
   23508:	1884703a 	and	r2,r3,r2
   2350c:	1007883a 	mov	r3,r2
   23510:	e0bffe17 	ldw	r2,-8(fp)
   23514:	1884b03a 	or	r2,r3,r2
   23518:	10803fcc 	andi	r2,r2,255
   2351c:	e0ffff03 	ldbu	r3,-4(fp)
   23520:	000f883a 	mov	r7,zero
   23524:	180d883a 	mov	r6,r3
   23528:	100b883a 	mov	r5,r2
   2352c:	e13ffd17 	ldw	r4,-12(fp)
   23530:	00233dc0 	call	233dc <alt_avalon_i2c_cmd_write>
   23534:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   23538:	e0bffd17 	ldw	r2,-12(fp)
   2353c:	10800917 	ldw	r2,36(r2)
   23540:	10803fcc 	andi	r2,r2,255
   23544:	000f883a 	mov	r7,zero
   23548:	000d883a 	mov	r6,zero
   2354c:	100b883a 	mov	r5,r2
   23550:	e13ffd17 	ldw	r4,-12(fp)
   23554:	00233dc0 	call	233dc <alt_avalon_i2c_cmd_write>
   23558:	e0bffc15 	stw	r2,-16(fp)
   2355c:	00000e06 	br	23598 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   23560:	e0bffd17 	ldw	r2,-12(fp)
   23564:	10800917 	ldw	r2,36(r2)
   23568:	1085883a 	add	r2,r2,r2
   2356c:	1007883a 	mov	r3,r2
   23570:	e0bffe17 	ldw	r2,-8(fp)
   23574:	1884b03a 	or	r2,r3,r2
   23578:	10803fcc 	andi	r2,r2,255
   2357c:	e0ffff03 	ldbu	r3,-4(fp)
   23580:	000f883a 	mov	r7,zero
   23584:	180d883a 	mov	r6,r3
   23588:	100b883a 	mov	r5,r2
   2358c:	e13ffd17 	ldw	r4,-12(fp)
   23590:	00233dc0 	call	233dc <alt_avalon_i2c_cmd_write>
   23594:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   23598:	e0bffc17 	ldw	r2,-16(fp)
}
   2359c:	e037883a 	mov	sp,fp
   235a0:	dfc00117 	ldw	ra,4(sp)
   235a4:	df000017 	ldw	fp,0(sp)
   235a8:	dec00204 	addi	sp,sp,8
   235ac:	f800283a 	ret

000235b0 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   235b0:	defffd04 	addi	sp,sp,-12
   235b4:	df000215 	stw	fp,8(sp)
   235b8:	df000204 	addi	fp,sp,8
   235bc:	e13ffe15 	stw	r4,-8(fp)
   235c0:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   235c4:	e0bffe17 	ldw	r2,-8(fp)
   235c8:	10c00917 	ldw	r3,36(r2)
   235cc:	e0bfff17 	ldw	r2,-4(fp)
   235d0:	10c00015 	stw	r3,0(r2)
}
   235d4:	0001883a 	nop
   235d8:	e037883a 	mov	sp,fp
   235dc:	df000017 	ldw	fp,0(sp)
   235e0:	dec00104 	addi	sp,sp,4
   235e4:	f800283a 	ret

000235e8 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   235e8:	defffd04 	addi	sp,sp,-12
   235ec:	df000215 	stw	fp,8(sp)
   235f0:	df000204 	addi	fp,sp,8
   235f4:	e13ffe15 	stw	r4,-8(fp)
   235f8:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   235fc:	e0bffe17 	ldw	r2,-8(fp)
   23600:	e0ffff17 	ldw	r3,-4(fp)
   23604:	10c00915 	stw	r3,36(r2)
}
   23608:	0001883a 	nop
   2360c:	e037883a 	mov	sp,fp
   23610:	df000017 	ldw	fp,0(sp)
   23614:	dec00104 	addi	sp,sp,4
   23618:	f800283a 	ret

0002361c <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   2361c:	defffd04 	addi	sp,sp,-12
   23620:	df000215 	stw	fp,8(sp)
   23624:	df000204 	addi	fp,sp,8
   23628:	e13ffe15 	stw	r4,-8(fp)
   2362c:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   23630:	e0bffe17 	ldw	r2,-8(fp)
   23634:	10800317 	ldw	r2,12(r2)
   23638:	10800404 	addi	r2,r2,16
   2363c:	10800037 	ldwio	r2,0(r2)
   23640:	1080010c 	andi	r2,r2,4
   23644:	10000326 	beq	r2,zero,23654 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   23648:	e0bfff17 	ldw	r2,-4(fp)
   2364c:	00fffec4 	movi	r3,-5
   23650:	10c00015 	stw	r3,0(r2)
    }
}
   23654:	0001883a 	nop
   23658:	e037883a 	mov	sp,fp
   2365c:	df000017 	ldw	fp,0(sp)
   23660:	dec00104 	addi	sp,sp,4
   23664:	f800283a 	ret

00023668 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   23668:	defffd04 	addi	sp,sp,-12
   2366c:	df000215 	stw	fp,8(sp)
   23670:	df000204 	addi	fp,sp,8
   23674:	e13ffe15 	stw	r4,-8(fp)
   23678:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   2367c:	e0bffe17 	ldw	r2,-8(fp)
   23680:	10800317 	ldw	r2,12(r2)
   23684:	10800404 	addi	r2,r2,16
   23688:	10800037 	ldwio	r2,0(r2)
   2368c:	1080020c 	andi	r2,r2,8
   23690:	10000326 	beq	r2,zero,236a0 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   23694:	e0bfff17 	ldw	r2,-4(fp)
   23698:	00fffe84 	movi	r3,-6
   2369c:	10c00015 	stw	r3,0(r2)
    }
}
   236a0:	0001883a 	nop
   236a4:	e037883a 	mov	sp,fp
   236a8:	df000017 	ldw	fp,0(sp)
   236ac:	dec00104 	addi	sp,sp,4
   236b0:	f800283a 	ret

000236b4 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   236b4:	defff804 	addi	sp,sp,-32
   236b8:	dfc00715 	stw	ra,28(sp)
   236bc:	df000615 	stw	fp,24(sp)
   236c0:	df000604 	addi	fp,sp,24
   236c4:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   236c8:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   236cc:	e0bfff17 	ldw	r2,-4(fp)
   236d0:	10800717 	ldw	r2,28(r2)
   236d4:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   236d8:	e0bffb17 	ldw	r2,-20(fp)
   236dc:	10800117 	ldw	r2,4(r2)
   236e0:	10800044 	addi	r2,r2,1
   236e4:	0149c404 	movi	r5,10000
   236e8:	1009883a 	mov	r4,r2
   236ec:	0021d940 	call	21d94 <__mulsi3>
   236f0:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   236f4:	e0bffd04 	addi	r2,fp,-12
   236f8:	100b883a 	mov	r5,r2
   236fc:	e13fff17 	ldw	r4,-4(fp)
   23700:	002454c0 	call	2454c <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   23704:	e0bffd17 	ldw	r2,-12(fp)
   23708:	100b883a 	mov	r5,r2
   2370c:	e13fff17 	ldw	r4,-4(fp)
   23710:	00244800 	call	24480 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   23714:	e0bffc04 	addi	r2,fp,-16
   23718:	100b883a 	mov	r5,r2
   2371c:	e13fff17 	ldw	r4,-4(fp)
   23720:	002361c0 	call	2361c <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   23724:	e0bffc17 	ldw	r2,-16(fp)
   23728:	10002226 	beq	r2,zero,237b4 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   2372c:	e0bffb17 	ldw	r2,-20(fp)
   23730:	10800217 	ldw	r2,8(r2)
   23734:	10001d26 	beq	r2,zero,237ac <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   23738:	00000d06 	br	23770 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   2373c:	e0bffa17 	ldw	r2,-24(fp)
   23740:	108002a8 	cmpgeui	r2,r2,10
   23744:	1000021e 	bne	r2,zero,23750 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   23748:	0109c404 	movi	r4,10000
   2374c:	00249340 	call	24934 <alt_busy_sleep>
              if (--timeout == 0)
   23750:	e0bffa17 	ldw	r2,-24(fp)
   23754:	10bfffc4 	addi	r2,r2,-1
   23758:	e0bffa15 	stw	r2,-24(fp)
   2375c:	e0bffa17 	ldw	r2,-24(fp)
   23760:	1000031e 	bne	r2,zero,23770 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   23764:	00bfff84 	movi	r2,-2
   23768:	e0bffc15 	stw	r2,-16(fp)
                 break;
   2376c:	00000306 	br	2377c <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   23770:	e13fff17 	ldw	r4,-4(fp)
   23774:	00232480 	call	23248 <alt_avalon_i2c_is_busy>
   23778:	103ff01e 	bne	r2,zero,2373c <__alt_data_end+0xfffe373c>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   2377c:	e0bffb17 	ldw	r2,-20(fp)
   23780:	10800017 	ldw	r2,0(r2)
   23784:	e0fffe04 	addi	r3,fp,-8
   23788:	180f883a 	mov	r7,r3
   2378c:	000d883a 	mov	r6,zero
   23790:	100b883a 	mov	r5,r2
   23794:	e13fff17 	ldw	r4,-4(fp)
   23798:	002328c0 	call	2328c <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   2379c:	e13fff17 	ldw	r4,-4(fp)
   237a0:	0022ef00 	call	22ef0 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   237a4:	e0bffb17 	ldw	r2,-20(fp)
   237a8:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   237ac:	e0bffc17 	ldw	r2,-16(fp)
   237b0:	00000a06 	br	237dc <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   237b4:	e0bffb17 	ldw	r2,-20(fp)
   237b8:	10800217 	ldw	r2,8(r2)
   237bc:	10000626 	beq	r2,zero,237d8 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   237c0:	e0bffd17 	ldw	r2,-12(fp)
   237c4:	100b883a 	mov	r5,r2
   237c8:	e13fff17 	ldw	r4,-4(fp)
   237cc:	00244e80 	call	244e8 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   237d0:	00bffe44 	movi	r2,-7
   237d4:	00000106 	br	237dc <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   237d8:	0005883a 	mov	r2,zero
}
   237dc:	e037883a 	mov	sp,fp
   237e0:	dfc00117 	ldw	ra,4(sp)
   237e4:	df000017 	ldw	fp,0(sp)
   237e8:	dec00204 	addi	sp,sp,8
   237ec:	f800283a 	ret

000237f0 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   237f0:	defff704 	addi	sp,sp,-36
   237f4:	dfc00815 	stw	ra,32(sp)
   237f8:	df000715 	stw	fp,28(sp)
   237fc:	df000704 	addi	fp,sp,28
   23800:	e13ffc15 	stw	r4,-16(fp)
   23804:	e17ffd15 	stw	r5,-12(fp)
   23808:	e1bffe15 	stw	r6,-8(fp)
   2380c:	3805883a 	mov	r2,r7
   23810:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   23814:	0089c404 	movi	r2,10000
   23818:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   2381c:	00002206 	br	238a8 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   23820:	e0bffb17 	ldw	r2,-20(fp)
   23824:	108002a8 	cmpgeui	r2,r2,10
   23828:	1000021e 	bne	r2,zero,23834 <alt_avalon_i2c_master_tx+0x44>
   2382c:	0109c404 	movi	r4,10000
   23830:	00249340 	call	24934 <alt_busy_sleep>
      if (use_interrupts)
   23834:	e0bfff03 	ldbu	r2,-4(fp)
   23838:	10000926 	beq	r2,zero,23860 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   2383c:	00800044 	movi	r2,1
   23840:	d8800015 	stw	r2,0(sp)
   23844:	000f883a 	mov	r7,zero
   23848:	e1bffe17 	ldw	r6,-8(fp)
   2384c:	e17ffd17 	ldw	r5,-12(fp)
   23850:	e13ffc17 	ldw	r4,-16(fp)
   23854:	0023d9c0 	call	23d9c <alt_avalon_i2c_master_transmit_using_interrupts>
   23858:	e0bffa15 	stw	r2,-24(fp)
   2385c:	00000806 	br	23880 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   23860:	00800044 	movi	r2,1
   23864:	d8800015 	stw	r2,0(sp)
   23868:	000f883a 	mov	r7,zero
   2386c:	e1bffe17 	ldw	r6,-8(fp)
   23870:	e17ffd17 	ldw	r5,-12(fp)
   23874:	e13ffc17 	ldw	r4,-16(fp)
   23878:	0023bdc0 	call	23bdc <alt_avalon_i2c_master_transmit>
   2387c:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   23880:	e0bffa17 	ldw	r2,-24(fp)
   23884:	10bffea0 	cmpeqi	r2,r2,-6
   23888:	1000061e 	bne	r2,zero,238a4 <alt_avalon_i2c_master_tx+0xb4>
   2388c:	e0bffa17 	ldw	r2,-24(fp)
   23890:	10bffee0 	cmpeqi	r2,r2,-5
   23894:	1000031e 	bne	r2,zero,238a4 <alt_avalon_i2c_master_tx+0xb4>
   23898:	e0bffa17 	ldw	r2,-24(fp)
   2389c:	10bffe58 	cmpnei	r2,r2,-7
   238a0:	1000061e 	bne	r2,zero,238bc <alt_avalon_i2c_master_tx+0xcc>
   238a4:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   238a8:	e0bffb17 	ldw	r2,-20(fp)
   238ac:	10ffffc4 	addi	r3,r2,-1
   238b0:	e0fffb15 	stw	r3,-20(fp)
   238b4:	103fda1e 	bne	r2,zero,23820 <__alt_data_end+0xfffe3820>
   238b8:	00000106 	br	238c0 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   238bc:	0001883a 	nop
    }

    return status;
   238c0:	e0bffa17 	ldw	r2,-24(fp)
}        
   238c4:	e037883a 	mov	sp,fp
   238c8:	dfc00117 	ldw	ra,4(sp)
   238cc:	df000017 	ldw	fp,0(sp)
   238d0:	dec00204 	addi	sp,sp,8
   238d4:	f800283a 	ret

000238d8 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   238d8:	defff704 	addi	sp,sp,-36
   238dc:	dfc00815 	stw	ra,32(sp)
   238e0:	df000715 	stw	fp,28(sp)
   238e4:	df000704 	addi	fp,sp,28
   238e8:	e13ffc15 	stw	r4,-16(fp)
   238ec:	e17ffd15 	stw	r5,-12(fp)
   238f0:	e1bffe15 	stw	r6,-8(fp)
   238f4:	3805883a 	mov	r2,r7
   238f8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   238fc:	0089c404 	movi	r2,10000
   23900:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   23904:	e0bfff03 	ldbu	r2,-4(fp)
   23908:	10003426 	beq	r2,zero,239dc <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   2390c:	00001706 	br	2396c <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   23910:	e0bffb17 	ldw	r2,-20(fp)
   23914:	108002a8 	cmpgeui	r2,r2,10
   23918:	1000021e 	bne	r2,zero,23924 <alt_avalon_i2c_master_rx+0x4c>
   2391c:	0109c404 	movi	r4,10000
   23920:	00249340 	call	24934 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   23924:	00800044 	movi	r2,1
   23928:	d8800015 	stw	r2,0(sp)
   2392c:	000f883a 	mov	r7,zero
   23930:	e1bffe17 	ldw	r6,-8(fp)
   23934:	e17ffd17 	ldw	r5,-12(fp)
   23938:	e13ffc17 	ldw	r4,-16(fp)
   2393c:	00241b80 	call	241b8 <alt_avalon_i2c_master_receive_using_interrupts>
   23940:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   23944:	e0bffa17 	ldw	r2,-24(fp)
   23948:	10bffea0 	cmpeqi	r2,r2,-6
   2394c:	1000061e 	bne	r2,zero,23968 <alt_avalon_i2c_master_rx+0x90>
   23950:	e0bffa17 	ldw	r2,-24(fp)
   23954:	10bffee0 	cmpeqi	r2,r2,-5
   23958:	1000031e 	bne	r2,zero,23968 <alt_avalon_i2c_master_rx+0x90>
   2395c:	e0bffa17 	ldw	r2,-24(fp)
   23960:	10bffe58 	cmpnei	r2,r2,-7
   23964:	1000221e 	bne	r2,zero,239f0 <alt_avalon_i2c_master_rx+0x118>
   23968:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   2396c:	e0bffb17 	ldw	r2,-20(fp)
   23970:	10ffffc4 	addi	r3,r2,-1
   23974:	e0fffb15 	stw	r3,-20(fp)
   23978:	103fe51e 	bne	r2,zero,23910 <__alt_data_end+0xfffe3910>
   2397c:	00001f06 	br	239fc <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   23980:	e0bffb17 	ldw	r2,-20(fp)
   23984:	108002a8 	cmpgeui	r2,r2,10
   23988:	1000021e 	bne	r2,zero,23994 <alt_avalon_i2c_master_rx+0xbc>
   2398c:	0109c404 	movi	r4,10000
   23990:	00249340 	call	24934 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   23994:	00800044 	movi	r2,1
   23998:	d8800015 	stw	r2,0(sp)
   2399c:	000f883a 	mov	r7,zero
   239a0:	e1bffe17 	ldw	r6,-8(fp)
   239a4:	e17ffd17 	ldw	r5,-12(fp)
   239a8:	e13ffc17 	ldw	r4,-16(fp)
   239ac:	0023fa80 	call	23fa8 <alt_avalon_i2c_master_receive>
   239b0:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   239b4:	e0bffa17 	ldw	r2,-24(fp)
   239b8:	10bffea0 	cmpeqi	r2,r2,-6
   239bc:	1000061e 	bne	r2,zero,239d8 <alt_avalon_i2c_master_rx+0x100>
   239c0:	e0bffa17 	ldw	r2,-24(fp)
   239c4:	10bffee0 	cmpeqi	r2,r2,-5
   239c8:	1000031e 	bne	r2,zero,239d8 <alt_avalon_i2c_master_rx+0x100>
   239cc:	e0bffa17 	ldw	r2,-24(fp)
   239d0:	10bffe58 	cmpnei	r2,r2,-7
   239d4:	1000081e 	bne	r2,zero,239f8 <alt_avalon_i2c_master_rx+0x120>
   239d8:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   239dc:	e0bffb17 	ldw	r2,-20(fp)
   239e0:	10ffffc4 	addi	r3,r2,-1
   239e4:	e0fffb15 	stw	r3,-20(fp)
   239e8:	103fe51e 	bne	r2,zero,23980 <__alt_data_end+0xfffe3980>
   239ec:	00000306 	br	239fc <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   239f0:	0001883a 	nop
   239f4:	00000106 	br	239fc <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   239f8:	0001883a 	nop
      }
    }
    
    return status;
   239fc:	e0bffa17 	ldw	r2,-24(fp)
}        
   23a00:	e037883a 	mov	sp,fp
   23a04:	dfc00117 	ldw	ra,4(sp)
   23a08:	df000017 	ldw	fp,0(sp)
   23a0c:	dec00204 	addi	sp,sp,8
   23a10:	f800283a 	ret

00023a14 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   23a14:	defff604 	addi	sp,sp,-40
   23a18:	dfc00915 	stw	ra,36(sp)
   23a1c:	df000815 	stw	fp,32(sp)
   23a20:	df000804 	addi	fp,sp,32
   23a24:	e13ffb15 	stw	r4,-20(fp)
   23a28:	e17ffc15 	stw	r5,-16(fp)
   23a2c:	e1bffd15 	stw	r6,-12(fp)
   23a30:	e1fffe15 	stw	r7,-8(fp)
   23a34:	e0800317 	ldw	r2,12(fp)
   23a38:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   23a3c:	0089c404 	movi	r2,10000
   23a40:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   23a44:	e0bfff03 	ldbu	r2,-4(fp)
   23a48:	10005626 	beq	r2,zero,23ba4 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   23a4c:	00002806 	br	23af0 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   23a50:	e0bffa17 	ldw	r2,-24(fp)
   23a54:	108002a8 	cmpgeui	r2,r2,10
   23a58:	1000021e 	bne	r2,zero,23a64 <alt_avalon_i2c_master_tx_rx+0x50>
   23a5c:	0109c404 	movi	r4,10000
   23a60:	00249340 	call	24934 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   23a64:	d8000015 	stw	zero,0(sp)
   23a68:	000f883a 	mov	r7,zero
   23a6c:	e1bffd17 	ldw	r6,-12(fp)
   23a70:	e17ffc17 	ldw	r5,-16(fp)
   23a74:	e13ffb17 	ldw	r4,-20(fp)
   23a78:	0023d9c0 	call	23d9c <alt_avalon_i2c_master_transmit_using_interrupts>
   23a7c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   23a80:	e0bff917 	ldw	r2,-28(fp)
   23a84:	10bffea0 	cmpeqi	r2,r2,-6
   23a88:	1000191e 	bne	r2,zero,23af0 <alt_avalon_i2c_master_tx_rx+0xdc>
   23a8c:	e0bff917 	ldw	r2,-28(fp)
   23a90:	10bffee0 	cmpeqi	r2,r2,-5
   23a94:	1000161e 	bne	r2,zero,23af0 <alt_avalon_i2c_master_tx_rx+0xdc>
   23a98:	e0bff917 	ldw	r2,-28(fp)
   23a9c:	10bffe58 	cmpnei	r2,r2,-7
   23aa0:	1000011e 	bne	r2,zero,23aa8 <alt_avalon_i2c_master_tx_rx+0x94>
   23aa4:	00001206 	br	23af0 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   23aa8:	00800044 	movi	r2,1
   23aac:	d8800015 	stw	r2,0(sp)
   23ab0:	01c00044 	movi	r7,1
   23ab4:	e1800217 	ldw	r6,8(fp)
   23ab8:	e17ffe17 	ldw	r5,-8(fp)
   23abc:	e13ffb17 	ldw	r4,-20(fp)
   23ac0:	00241b80 	call	241b8 <alt_avalon_i2c_master_receive_using_interrupts>
   23ac4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   23ac8:	e0bff917 	ldw	r2,-28(fp)
   23acc:	10bffea0 	cmpeqi	r2,r2,-6
   23ad0:	1000061e 	bne	r2,zero,23aec <alt_avalon_i2c_master_tx_rx+0xd8>
   23ad4:	e0bff917 	ldw	r2,-28(fp)
   23ad8:	10bffee0 	cmpeqi	r2,r2,-5
   23adc:	1000031e 	bne	r2,zero,23aec <alt_avalon_i2c_master_tx_rx+0xd8>
   23ae0:	e0bff917 	ldw	r2,-28(fp)
   23ae4:	10bffe58 	cmpnei	r2,r2,-7
   23ae8:	1000331e 	bne	r2,zero,23bb8 <alt_avalon_i2c_master_tx_rx+0x1a4>
   23aec:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   23af0:	e0bffa17 	ldw	r2,-24(fp)
   23af4:	10ffffc4 	addi	r3,r2,-1
   23af8:	e0fffa15 	stw	r3,-24(fp)
   23afc:	103fd41e 	bne	r2,zero,23a50 <__alt_data_end+0xfffe3a50>
   23b00:	00003006 	br	23bc4 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   23b04:	e0bffa17 	ldw	r2,-24(fp)
   23b08:	108002a8 	cmpgeui	r2,r2,10
   23b0c:	1000021e 	bne	r2,zero,23b18 <alt_avalon_i2c_master_tx_rx+0x104>
   23b10:	0109c404 	movi	r4,10000
   23b14:	00249340 	call	24934 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   23b18:	d8000015 	stw	zero,0(sp)
   23b1c:	000f883a 	mov	r7,zero
   23b20:	e1bffd17 	ldw	r6,-12(fp)
   23b24:	e17ffc17 	ldw	r5,-16(fp)
   23b28:	e13ffb17 	ldw	r4,-20(fp)
   23b2c:	0023bdc0 	call	23bdc <alt_avalon_i2c_master_transmit>
   23b30:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   23b34:	e0bff917 	ldw	r2,-28(fp)
   23b38:	10bffea0 	cmpeqi	r2,r2,-6
   23b3c:	1000191e 	bne	r2,zero,23ba4 <alt_avalon_i2c_master_tx_rx+0x190>
   23b40:	e0bff917 	ldw	r2,-28(fp)
   23b44:	10bffee0 	cmpeqi	r2,r2,-5
   23b48:	1000161e 	bne	r2,zero,23ba4 <alt_avalon_i2c_master_tx_rx+0x190>
   23b4c:	e0bff917 	ldw	r2,-28(fp)
   23b50:	10bffe58 	cmpnei	r2,r2,-7
   23b54:	1000011e 	bne	r2,zero,23b5c <alt_avalon_i2c_master_tx_rx+0x148>
   23b58:	00001206 	br	23ba4 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   23b5c:	00800044 	movi	r2,1
   23b60:	d8800015 	stw	r2,0(sp)
   23b64:	01c00044 	movi	r7,1
   23b68:	e1800217 	ldw	r6,8(fp)
   23b6c:	e17ffe17 	ldw	r5,-8(fp)
   23b70:	e13ffb17 	ldw	r4,-20(fp)
   23b74:	0023fa80 	call	23fa8 <alt_avalon_i2c_master_receive>
   23b78:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   23b7c:	e0bff917 	ldw	r2,-28(fp)
   23b80:	10bffea0 	cmpeqi	r2,r2,-6
   23b84:	1000061e 	bne	r2,zero,23ba0 <alt_avalon_i2c_master_tx_rx+0x18c>
   23b88:	e0bff917 	ldw	r2,-28(fp)
   23b8c:	10bffee0 	cmpeqi	r2,r2,-5
   23b90:	1000031e 	bne	r2,zero,23ba0 <alt_avalon_i2c_master_tx_rx+0x18c>
   23b94:	e0bff917 	ldw	r2,-28(fp)
   23b98:	10bffe58 	cmpnei	r2,r2,-7
   23b9c:	1000081e 	bne	r2,zero,23bc0 <alt_avalon_i2c_master_tx_rx+0x1ac>
   23ba0:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   23ba4:	e0bffa17 	ldw	r2,-24(fp)
   23ba8:	10ffffc4 	addi	r3,r2,-1
   23bac:	e0fffa15 	stw	r3,-24(fp)
   23bb0:	103fd41e 	bne	r2,zero,23b04 <__alt_data_end+0xfffe3b04>
   23bb4:	00000306 	br	23bc4 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   23bb8:	0001883a 	nop
   23bbc:	00000106 	br	23bc4 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   23bc0:	0001883a 	nop
      }
    }
    
    return status;
   23bc4:	e0bff917 	ldw	r2,-28(fp)
}                                       
   23bc8:	e037883a 	mov	sp,fp
   23bcc:	dfc00117 	ldw	ra,4(sp)
   23bd0:	df000017 	ldw	fp,0(sp)
   23bd4:	dec00204 	addi	sp,sp,8
   23bd8:	f800283a 	ret

00023bdc <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   23bdc:	defff704 	addi	sp,sp,-36
   23be0:	dfc00815 	stw	ra,32(sp)
   23be4:	df000715 	stw	fp,28(sp)
   23be8:	df000704 	addi	fp,sp,28
   23bec:	e13ffb15 	stw	r4,-20(fp)
   23bf0:	e17ffc15 	stw	r5,-16(fp)
   23bf4:	e1bffd15 	stw	r6,-12(fp)
   23bf8:	3807883a 	mov	r3,r7
   23bfc:	e0800217 	ldw	r2,8(fp)
   23c00:	e0fffe05 	stb	r3,-8(fp)
   23c04:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   23c08:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   23c0c:	0149c404 	movi	r5,10000
   23c10:	e13ffd17 	ldw	r4,-12(fp)
   23c14:	0021d940 	call	21d94 <__mulsi3>
   23c18:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   23c1c:	e0bffd17 	ldw	r2,-12(fp)
   23c20:	1000021e 	bne	r2,zero,23c2c <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   23c24:	0005883a 	mov	r2,zero
   23c28:	00005706 	br	23d88 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   23c2c:	e0bffe03 	ldbu	r2,-8(fp)
   23c30:	10000a1e 	bne	r2,zero,23c5c <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   23c34:	e13ffb17 	ldw	r4,-20(fp)
   23c38:	0022e580 	call	22e58 <alt_avalon_i2c_enable>
   23c3c:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   23c40:	e0bffa17 	ldw	r2,-24(fp)
   23c44:	10000226 	beq	r2,zero,23c50 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   23c48:	e0bffa17 	ldw	r2,-24(fp)
   23c4c:	00004e06 	br	23d88 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   23c50:	01400704 	movi	r5,28
   23c54:	e13ffb17 	ldw	r4,-20(fp)
   23c58:	00244440 	call	24444 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   23c5c:	e0bffe03 	ldbu	r2,-8(fp)
   23c60:	100d883a 	mov	r6,r2
   23c64:	000b883a 	mov	r5,zero
   23c68:	e13ffb17 	ldw	r4,-20(fp)
   23c6c:	00234c00 	call	234c0 <alt_avalon_i2c_send_address>
   23c70:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   23c74:	e0bffa17 	ldw	r2,-24(fp)
   23c78:	1000271e 	bne	r2,zero,23d18 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   23c7c:	00000f06 	br	23cbc <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   23c80:	e0bffc17 	ldw	r2,-16(fp)
   23c84:	10800003 	ldbu	r2,0(r2)
   23c88:	10803fcc 	andi	r2,r2,255
   23c8c:	000f883a 	mov	r7,zero
   23c90:	000d883a 	mov	r6,zero
   23c94:	100b883a 	mov	r5,r2
   23c98:	e13ffb17 	ldw	r4,-20(fp)
   23c9c:	00233dc0 	call	233dc <alt_avalon_i2c_cmd_write>
   23ca0:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   23ca4:	e0bffc17 	ldw	r2,-16(fp)
   23ca8:	10800044 	addi	r2,r2,1
   23cac:	e0bffc15 	stw	r2,-16(fp)
            --size;
   23cb0:	e0bffd17 	ldw	r2,-12(fp)
   23cb4:	10bfffc4 	addi	r2,r2,-1
   23cb8:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   23cbc:	e0bffd17 	ldw	r2,-12(fp)
   23cc0:	108000b0 	cmpltui	r2,r2,2
   23cc4:	1000021e 	bne	r2,zero,23cd0 <alt_avalon_i2c_master_transmit+0xf4>
   23cc8:	e0bffa17 	ldw	r2,-24(fp)
   23ccc:	103fec26 	beq	r2,zero,23c80 <__alt_data_end+0xfffe3c80>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   23cd0:	e0bffa17 	ldw	r2,-24(fp)
   23cd4:	1000101e 	bne	r2,zero,23d18 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   23cd8:	e0bffc17 	ldw	r2,-16(fp)
   23cdc:	10800003 	ldbu	r2,0(r2)
   23ce0:	10803fcc 	andi	r2,r2,255
   23ce4:	e0ffff03 	ldbu	r3,-4(fp)
   23ce8:	180f883a 	mov	r7,r3
   23cec:	000d883a 	mov	r6,zero
   23cf0:	100b883a 	mov	r5,r2
   23cf4:	e13ffb17 	ldw	r4,-20(fp)
   23cf8:	00233dc0 	call	233dc <alt_avalon_i2c_cmd_write>
   23cfc:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   23d00:	e0bffc17 	ldw	r2,-16(fp)
   23d04:	10800044 	addi	r2,r2,1
   23d08:	e0bffc15 	stw	r2,-16(fp)
            --size;
   23d0c:	e0bffd17 	ldw	r2,-12(fp)
   23d10:	10bfffc4 	addi	r2,r2,-1
   23d14:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   23d18:	e0bfff03 	ldbu	r2,-4(fp)
   23d1c:	1000101e 	bne	r2,zero,23d60 <alt_avalon_i2c_master_transmit+0x184>
   23d20:	e0bffa17 	ldw	r2,-24(fp)
   23d24:	10001726 	beq	r2,zero,23d84 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   23d28:	00000d06 	br	23d60 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   23d2c:	e0bff917 	ldw	r2,-28(fp)
   23d30:	108002a8 	cmpgeui	r2,r2,10
   23d34:	1000021e 	bne	r2,zero,23d40 <alt_avalon_i2c_master_transmit+0x164>
   23d38:	0109c404 	movi	r4,10000
   23d3c:	00249340 	call	24934 <alt_busy_sleep>
            if (--timeout == 0)
   23d40:	e0bff917 	ldw	r2,-28(fp)
   23d44:	10bfffc4 	addi	r2,r2,-1
   23d48:	e0bff915 	stw	r2,-28(fp)
   23d4c:	e0bff917 	ldw	r2,-28(fp)
   23d50:	1000031e 	bne	r2,zero,23d60 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   23d54:	00bfff84 	movi	r2,-2
   23d58:	e0bffa15 	stw	r2,-24(fp)
               break;
   23d5c:	00000306 	br	23d6c <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   23d60:	e13ffb17 	ldw	r4,-20(fp)
   23d64:	00232480 	call	23248 <alt_avalon_i2c_is_busy>
   23d68:	103ff01e 	bne	r2,zero,23d2c <__alt_data_end+0xfffe3d2c>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   23d6c:	e0bffa04 	addi	r2,fp,-24
   23d70:	100b883a 	mov	r5,r2
   23d74:	e13ffb17 	ldw	r4,-20(fp)
   23d78:	002361c0 	call	2361c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   23d7c:	e13ffb17 	ldw	r4,-20(fp)
   23d80:	0022ef00 	call	22ef0 <alt_avalon_i2c_disable>
    }


    return status;
   23d84:	e0bffa17 	ldw	r2,-24(fp)
}
   23d88:	e037883a 	mov	sp,fp
   23d8c:	dfc00117 	ldw	ra,4(sp)
   23d90:	df000017 	ldw	fp,0(sp)
   23d94:	dec00204 	addi	sp,sp,8
   23d98:	f800283a 	ret

00023d9c <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   23d9c:	defff604 	addi	sp,sp,-40
   23da0:	dfc00915 	stw	ra,36(sp)
   23da4:	df000815 	stw	fp,32(sp)
   23da8:	df000804 	addi	fp,sp,32
   23dac:	e13ffb15 	stw	r4,-20(fp)
   23db0:	e17ffc15 	stw	r5,-16(fp)
   23db4:	e1bffd15 	stw	r6,-12(fp)
   23db8:	3807883a 	mov	r3,r7
   23dbc:	e0800217 	ldw	r2,8(fp)
   23dc0:	e0fffe05 	stb	r3,-8(fp)
   23dc4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   23dc8:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   23dcc:	0149c404 	movi	r5,10000
   23dd0:	e13ffd17 	ldw	r4,-12(fp)
   23dd4:	0021d940 	call	21d94 <__mulsi3>
   23dd8:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   23ddc:	e0bffb17 	ldw	r2,-20(fp)
   23de0:	10800717 	ldw	r2,28(r2)
   23de4:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   23de8:	e0bffd17 	ldw	r2,-12(fp)
   23dec:	1000021e 	bne	r2,zero,23df8 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   23df0:	0005883a 	mov	r2,zero
   23df4:	00006706 	br	23f94 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   23df8:	e0bffb17 	ldw	r2,-20(fp)
   23dfc:	10c00617 	ldw	r3,24(r2)
   23e00:	008000b4 	movhi	r2,2
   23e04:	108ab704 	addi	r2,r2,10972
   23e08:	18800226 	beq	r3,r2,23e14 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   23e0c:	00bfff44 	movi	r2,-3
   23e10:	00006006 	br	23f94 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   23e14:	e0bffe03 	ldbu	r2,-8(fp)
   23e18:	10000a1e 	bne	r2,zero,23e44 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   23e1c:	e13ffb17 	ldw	r4,-20(fp)
   23e20:	0022e580 	call	22e58 <alt_avalon_i2c_enable>
   23e24:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   23e28:	e0bff817 	ldw	r2,-32(fp)
   23e2c:	10000226 	beq	r2,zero,23e38 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   23e30:	e0bff817 	ldw	r2,-32(fp)
   23e34:	00005706 	br	23f94 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   23e38:	01400704 	movi	r5,28
   23e3c:	e13ffb17 	ldw	r4,-20(fp)
   23e40:	00244440 	call	24444 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   23e44:	e0bffe03 	ldbu	r2,-8(fp)
   23e48:	100d883a 	mov	r6,r2
   23e4c:	000b883a 	mov	r5,zero
   23e50:	e13ffb17 	ldw	r4,-20(fp)
   23e54:	00234c00 	call	234c0 <alt_avalon_i2c_send_address>
   23e58:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   23e5c:	e0bff817 	ldw	r2,-32(fp)
   23e60:	1000271e 	bne	r2,zero,23f00 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   23e64:	00000f06 	br	23ea4 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   23e68:	e0bffc17 	ldw	r2,-16(fp)
   23e6c:	10800003 	ldbu	r2,0(r2)
   23e70:	10803fcc 	andi	r2,r2,255
   23e74:	000f883a 	mov	r7,zero
   23e78:	000d883a 	mov	r6,zero
   23e7c:	100b883a 	mov	r5,r2
   23e80:	e13ffb17 	ldw	r4,-20(fp)
   23e84:	00233dc0 	call	233dc <alt_avalon_i2c_cmd_write>
   23e88:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   23e8c:	e0bffc17 	ldw	r2,-16(fp)
   23e90:	10800044 	addi	r2,r2,1
   23e94:	e0bffc15 	stw	r2,-16(fp)
            --size;
   23e98:	e0bffd17 	ldw	r2,-12(fp)
   23e9c:	10bfffc4 	addi	r2,r2,-1
   23ea0:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   23ea4:	e0bffd17 	ldw	r2,-12(fp)
   23ea8:	108000b0 	cmpltui	r2,r2,2
   23eac:	1000021e 	bne	r2,zero,23eb8 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   23eb0:	e0bff817 	ldw	r2,-32(fp)
   23eb4:	103fec26 	beq	r2,zero,23e68 <__alt_data_end+0xfffe3e68>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   23eb8:	e0bff817 	ldw	r2,-32(fp)
   23ebc:	1000101e 	bne	r2,zero,23f00 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   23ec0:	e0bffc17 	ldw	r2,-16(fp)
   23ec4:	10800003 	ldbu	r2,0(r2)
   23ec8:	10803fcc 	andi	r2,r2,255
   23ecc:	e0ffff03 	ldbu	r3,-4(fp)
   23ed0:	180f883a 	mov	r7,r3
   23ed4:	000d883a 	mov	r6,zero
   23ed8:	100b883a 	mov	r5,r2
   23edc:	e13ffb17 	ldw	r4,-20(fp)
   23ee0:	00233dc0 	call	233dc <alt_avalon_i2c_cmd_write>
   23ee4:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   23ee8:	e0bffc17 	ldw	r2,-16(fp)
   23eec:	10800044 	addi	r2,r2,1
   23ef0:	e0bffc15 	stw	r2,-16(fp)
            --size;
   23ef4:	e0bffd17 	ldw	r2,-12(fp)
   23ef8:	10bfffc4 	addi	r2,r2,-1
   23efc:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   23f00:	e0bff817 	ldw	r2,-32(fp)
   23f04:	10001426 	beq	r2,zero,23f58 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   23f08:	00000d06 	br	23f40 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   23f0c:	e0bff917 	ldw	r2,-28(fp)
   23f10:	108002a8 	cmpgeui	r2,r2,10
   23f14:	1000021e 	bne	r2,zero,23f20 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   23f18:	0109c404 	movi	r4,10000
   23f1c:	00249340 	call	24934 <alt_busy_sleep>
            if (--timeout == 0)
   23f20:	e0bff917 	ldw	r2,-28(fp)
   23f24:	10bfffc4 	addi	r2,r2,-1
   23f28:	e0bff915 	stw	r2,-28(fp)
   23f2c:	e0bff917 	ldw	r2,-28(fp)
   23f30:	1000031e 	bne	r2,zero,23f40 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   23f34:	00bfff84 	movi	r2,-2
   23f38:	e0bff815 	stw	r2,-32(fp)
               break;
   23f3c:	00000306 	br	23f4c <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   23f40:	e13ffb17 	ldw	r4,-20(fp)
   23f44:	00232480 	call	23248 <alt_avalon_i2c_is_busy>
   23f48:	103ff01e 	bne	r2,zero,23f0c <__alt_data_end+0xfffe3f0c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   23f4c:	e13ffb17 	ldw	r4,-20(fp)
   23f50:	0022ef00 	call	22ef0 <alt_avalon_i2c_disable>
   23f54:	00000e06 	br	23f90 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   23f58:	e0bfff03 	ldbu	r2,-4(fp)
   23f5c:	10000c26 	beq	r2,zero,23f90 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   23f60:	01400704 	movi	r5,28
   23f64:	e13ffb17 	ldw	r4,-20(fp)
   23f68:	00244440 	call	24444 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   23f6c:	000b883a 	mov	r5,zero
   23f70:	e13ffb17 	ldw	r4,-20(fp)
   23f74:	002468c0 	call	2468c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   23f78:	e0bffa17 	ldw	r2,-24(fp)
   23f7c:	00c00044 	movi	r3,1
   23f80:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   23f84:	01400044 	movi	r5,1
   23f88:	e13ffb17 	ldw	r4,-20(fp)
   23f8c:	00244e80 	call	244e8 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   23f90:	e0bff817 	ldw	r2,-32(fp)
}
   23f94:	e037883a 	mov	sp,fp
   23f98:	dfc00117 	ldw	ra,4(sp)
   23f9c:	df000017 	ldw	fp,0(sp)
   23fa0:	dec00204 	addi	sp,sp,8
   23fa4:	f800283a 	ret

00023fa8 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   23fa8:	defff404 	addi	sp,sp,-48
   23fac:	dfc00b15 	stw	ra,44(sp)
   23fb0:	df000a15 	stw	fp,40(sp)
   23fb4:	df000a04 	addi	fp,sp,40
   23fb8:	e13ffb15 	stw	r4,-20(fp)
   23fbc:	e17ffc15 	stw	r5,-16(fp)
   23fc0:	e1bffd15 	stw	r6,-12(fp)
   23fc4:	3807883a 	mov	r3,r7
   23fc8:	e0800217 	ldw	r2,8(fp)
   23fcc:	e0fffe05 	stb	r3,-8(fp)
   23fd0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   23fd4:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   23fd8:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   23fdc:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   23fe0:	e0bffd17 	ldw	r2,-12(fp)
   23fe4:	1000021e 	bne	r2,zero,23ff0 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   23fe8:	0005883a 	mov	r2,zero
   23fec:	00006d06 	br	241a4 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   23ff0:	e0bffe03 	ldbu	r2,-8(fp)
   23ff4:	10000a1e 	bne	r2,zero,24020 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   23ff8:	e13ffb17 	ldw	r4,-20(fp)
   23ffc:	0022e580 	call	22e58 <alt_avalon_i2c_enable>
   24000:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   24004:	e0bff917 	ldw	r2,-28(fp)
   24008:	10000226 	beq	r2,zero,24014 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   2400c:	e0bff917 	ldw	r2,-28(fp)
   24010:	00006406 	br	241a4 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   24014:	01400704 	movi	r5,28
   24018:	e13ffb17 	ldw	r4,-20(fp)
   2401c:	00244440 	call	24444 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   24020:	e0bffe03 	ldbu	r2,-8(fp)
   24024:	100d883a 	mov	r6,r2
   24028:	01400044 	movi	r5,1
   2402c:	e13ffb17 	ldw	r4,-20(fp)
   24030:	00234c00 	call	234c0 <alt_avalon_i2c_send_address>
   24034:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   24038:	e0bff917 	ldw	r2,-28(fp)
   2403c:	1000341e 	bne	r2,zero,24110 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   24040:	00001906 	br	240a8 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   24044:	000f883a 	mov	r7,zero
   24048:	000d883a 	mov	r6,zero
   2404c:	000b883a 	mov	r5,zero
   24050:	e13ffb17 	ldw	r4,-20(fp)
   24054:	00233dc0 	call	233dc <alt_avalon_i2c_cmd_write>
   24058:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   2405c:	e0bff817 	ldw	r2,-32(fp)
   24060:	10800044 	addi	r2,r2,1
   24064:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   24068:	e0bff917 	ldw	r2,-28(fp)
   2406c:	10000e1e 	bne	r2,zero,240a8 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   24070:	e0bffa04 	addi	r2,fp,-24
   24074:	100f883a 	mov	r7,r2
   24078:	000d883a 	mov	r6,zero
   2407c:	e17ffc17 	ldw	r5,-16(fp)
   24080:	e13ffb17 	ldw	r4,-20(fp)
   24084:	002328c0 	call	2328c <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   24088:	e0bffa17 	ldw	r2,-24(fp)
   2408c:	e0fffc17 	ldw	r3,-16(fp)
   24090:	1885883a 	add	r2,r3,r2
   24094:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   24098:	e0bffa17 	ldw	r2,-24(fp)
   2409c:	e0fff717 	ldw	r3,-36(fp)
   240a0:	1885883a 	add	r2,r3,r2
   240a4:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   240a8:	e0bffd17 	ldw	r2,-12(fp)
   240ac:	10bfffc4 	addi	r2,r2,-1
   240b0:	e0fff817 	ldw	r3,-32(fp)
   240b4:	1880022e 	bgeu	r3,r2,240c0 <alt_avalon_i2c_master_receive+0x118>
   240b8:	e0bff917 	ldw	r2,-28(fp)
   240bc:	103fe126 	beq	r2,zero,24044 <__alt_data_end+0xfffe4044>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   240c0:	e0bff917 	ldw	r2,-28(fp)
   240c4:	1000121e 	bne	r2,zero,24110 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   240c8:	e0bfff03 	ldbu	r2,-4(fp)
   240cc:	100f883a 	mov	r7,r2
   240d0:	000d883a 	mov	r6,zero
   240d4:	000b883a 	mov	r5,zero
   240d8:	e13ffb17 	ldw	r4,-20(fp)
   240dc:	00233dc0 	call	233dc <alt_avalon_i2c_cmd_write>
   240e0:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   240e4:	00000a06 	br	24110 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   240e8:	e17ffc17 	ldw	r5,-16(fp)
   240ec:	e13ffb17 	ldw	r4,-20(fp)
   240f0:	00233340 	call	23334 <alt_avalon_i2c_rx_read>
   240f4:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   240f8:	e0bffc17 	ldw	r2,-16(fp)
   240fc:	10800044 	addi	r2,r2,1
   24100:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   24104:	e0bff717 	ldw	r2,-36(fp)
   24108:	10800044 	addi	r2,r2,1
   2410c:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   24110:	e0fff717 	ldw	r3,-36(fp)
   24114:	e0bffd17 	ldw	r2,-12(fp)
   24118:	1880022e 	bgeu	r3,r2,24124 <alt_avalon_i2c_master_receive+0x17c>
   2411c:	e0bff917 	ldw	r2,-28(fp)
   24120:	103ff126 	beq	r2,zero,240e8 <__alt_data_end+0xfffe40e8>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   24124:	e0bfff03 	ldbu	r2,-4(fp)
   24128:	1000021e 	bne	r2,zero,24134 <alt_avalon_i2c_master_receive+0x18c>
   2412c:	e0bff917 	ldw	r2,-28(fp)
   24130:	10001b26 	beq	r2,zero,241a0 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   24134:	0149c404 	movi	r5,10000
   24138:	e13ffd17 	ldw	r4,-12(fp)
   2413c:	0021d940 	call	21d94 <__mulsi3>
   24140:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   24144:	00000d06 	br	2417c <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   24148:	e0bff617 	ldw	r2,-40(fp)
   2414c:	108002a8 	cmpgeui	r2,r2,10
   24150:	1000021e 	bne	r2,zero,2415c <alt_avalon_i2c_master_receive+0x1b4>
   24154:	0109c404 	movi	r4,10000
   24158:	00249340 	call	24934 <alt_busy_sleep>
            if (--timeout == 0)
   2415c:	e0bff617 	ldw	r2,-40(fp)
   24160:	10bfffc4 	addi	r2,r2,-1
   24164:	e0bff615 	stw	r2,-40(fp)
   24168:	e0bff617 	ldw	r2,-40(fp)
   2416c:	1000031e 	bne	r2,zero,2417c <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   24170:	00bfff84 	movi	r2,-2
   24174:	e0bff915 	stw	r2,-28(fp)
               break;
   24178:	00000306 	br	24188 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2417c:	e13ffb17 	ldw	r4,-20(fp)
   24180:	00232480 	call	23248 <alt_avalon_i2c_is_busy>
   24184:	103ff01e 	bne	r2,zero,24148 <__alt_data_end+0xfffe4148>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   24188:	e0bff904 	addi	r2,fp,-28
   2418c:	100b883a 	mov	r5,r2
   24190:	e13ffb17 	ldw	r4,-20(fp)
   24194:	002361c0 	call	2361c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   24198:	e13ffb17 	ldw	r4,-20(fp)
   2419c:	0022ef00 	call	22ef0 <alt_avalon_i2c_disable>
    }

    return status;
   241a0:	e0bff917 	ldw	r2,-28(fp)
}
   241a4:	e037883a 	mov	sp,fp
   241a8:	dfc00117 	ldw	ra,4(sp)
   241ac:	df000017 	ldw	fp,0(sp)
   241b0:	dec00204 	addi	sp,sp,8
   241b4:	f800283a 	ret

000241b8 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   241b8:	defff504 	addi	sp,sp,-44
   241bc:	dfc00a15 	stw	ra,40(sp)
   241c0:	df000915 	stw	fp,36(sp)
   241c4:	df000904 	addi	fp,sp,36
   241c8:	e13ffb15 	stw	r4,-20(fp)
   241cc:	e17ffc15 	stw	r5,-16(fp)
   241d0:	e1bffd15 	stw	r6,-12(fp)
   241d4:	3807883a 	mov	r3,r7
   241d8:	e0800217 	ldw	r2,8(fp)
   241dc:	e0fffe05 	stb	r3,-8(fp)
   241e0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   241e4:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   241e8:	e0bffb17 	ldw	r2,-20(fp)
   241ec:	10800717 	ldw	r2,28(r2)
   241f0:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   241f4:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   241f8:	e0bffd17 	ldw	r2,-12(fp)
   241fc:	1000021e 	bne	r2,zero,24208 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   24200:	0005883a 	mov	r2,zero
   24204:	00006306 	br	24394 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   24208:	e0bffb17 	ldw	r2,-20(fp)
   2420c:	10c00617 	ldw	r3,24(r2)
   24210:	008000b4 	movhi	r2,2
   24214:	108ab704 	addi	r2,r2,10972
   24218:	18800226 	beq	r3,r2,24224 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   2421c:	00bfff44 	movi	r2,-3
   24220:	00005c06 	br	24394 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   24224:	e0bffe03 	ldbu	r2,-8(fp)
   24228:	10000a1e 	bne	r2,zero,24254 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2422c:	e13ffb17 	ldw	r4,-20(fp)
   24230:	0022e580 	call	22e58 <alt_avalon_i2c_enable>
   24234:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   24238:	e0bff717 	ldw	r2,-36(fp)
   2423c:	10000226 	beq	r2,zero,24248 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   24240:	e0bff717 	ldw	r2,-36(fp)
   24244:	00005306 	br	24394 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   24248:	01400704 	movi	r5,28
   2424c:	e13ffb17 	ldw	r4,-20(fp)
   24250:	00244440 	call	24444 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   24254:	e0bffe03 	ldbu	r2,-8(fp)
   24258:	100d883a 	mov	r6,r2
   2425c:	01400044 	movi	r5,1
   24260:	e13ffb17 	ldw	r4,-20(fp)
   24264:	00234c00 	call	234c0 <alt_avalon_i2c_send_address>
   24268:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   2426c:	e0bff717 	ldw	r2,-36(fp)
   24270:	1000191e 	bne	r2,zero,242d8 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   24274:	00000906 	br	2429c <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   24278:	000f883a 	mov	r7,zero
   2427c:	000d883a 	mov	r6,zero
   24280:	000b883a 	mov	r5,zero
   24284:	e13ffb17 	ldw	r4,-20(fp)
   24288:	00233dc0 	call	233dc <alt_avalon_i2c_cmd_write>
   2428c:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   24290:	e0bff917 	ldw	r2,-28(fp)
   24294:	10800044 	addi	r2,r2,1
   24298:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2429c:	e0bffd17 	ldw	r2,-12(fp)
   242a0:	10bfffc4 	addi	r2,r2,-1
   242a4:	e0fff917 	ldw	r3,-28(fp)
   242a8:	1880022e 	bgeu	r3,r2,242b4 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   242ac:	e0bff717 	ldw	r2,-36(fp)
   242b0:	103ff126 	beq	r2,zero,24278 <__alt_data_end+0xfffe4278>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   242b4:	e0bff717 	ldw	r2,-36(fp)
   242b8:	1000071e 	bne	r2,zero,242d8 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   242bc:	e0bfff03 	ldbu	r2,-4(fp)
   242c0:	100f883a 	mov	r7,r2
   242c4:	000d883a 	mov	r6,zero
   242c8:	000b883a 	mov	r5,zero
   242cc:	e13ffb17 	ldw	r4,-20(fp)
   242d0:	00233dc0 	call	233dc <alt_avalon_i2c_cmd_write>
   242d4:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   242d8:	e0bff717 	ldw	r2,-36(fp)
   242dc:	10001826 	beq	r2,zero,24340 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   242e0:	0149c404 	movi	r5,10000
   242e4:	e13ffd17 	ldw	r4,-12(fp)
   242e8:	0021d940 	call	21d94 <__mulsi3>
   242ec:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   242f0:	00000d06 	br	24328 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   242f4:	e0bff817 	ldw	r2,-32(fp)
   242f8:	108002a8 	cmpgeui	r2,r2,10
   242fc:	1000021e 	bne	r2,zero,24308 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   24300:	0109c404 	movi	r4,10000
   24304:	00249340 	call	24934 <alt_busy_sleep>
            if (--timeout == 0)
   24308:	e0bff817 	ldw	r2,-32(fp)
   2430c:	10bfffc4 	addi	r2,r2,-1
   24310:	e0bff815 	stw	r2,-32(fp)
   24314:	e0bff817 	ldw	r2,-32(fp)
   24318:	1000031e 	bne	r2,zero,24328 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2431c:	00bfff84 	movi	r2,-2
   24320:	e0bff715 	stw	r2,-36(fp)
               break;
   24324:	00000306 	br	24334 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   24328:	e13ffb17 	ldw	r4,-20(fp)
   2432c:	00232480 	call	23248 <alt_avalon_i2c_is_busy>
   24330:	103ff01e 	bne	r2,zero,242f4 <__alt_data_end+0xfffe42f4>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   24334:	e13ffb17 	ldw	r4,-20(fp)
   24338:	0022ef00 	call	22ef0 <alt_avalon_i2c_disable>
   2433c:	00001406 	br	24390 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   24340:	e0bfff03 	ldbu	r2,-4(fp)
   24344:	10001226 	beq	r2,zero,24390 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   24348:	01400704 	movi	r5,28
   2434c:	e13ffb17 	ldw	r4,-20(fp)
   24350:	00244440 	call	24444 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   24354:	000b883a 	mov	r5,zero
   24358:	e13ffb17 	ldw	r4,-20(fp)
   2435c:	00245dc0 	call	245dc <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   24360:	e0bffa17 	ldw	r2,-24(fp)
   24364:	00c00084 	movi	r3,2
   24368:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   2436c:	e0bffa17 	ldw	r2,-24(fp)
   24370:	e0fffc17 	ldw	r3,-16(fp)
   24374:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   24378:	e0bffa17 	ldw	r2,-24(fp)
   2437c:	e0fffd17 	ldw	r3,-12(fp)
   24380:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   24384:	01400084 	movi	r5,2
   24388:	e13ffb17 	ldw	r4,-20(fp)
   2438c:	00244e80 	call	244e8 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   24390:	e0bff717 	ldw	r2,-36(fp)
}
   24394:	e037883a 	mov	sp,fp
   24398:	dfc00117 	ldw	ra,4(sp)
   2439c:	df000017 	ldw	fp,0(sp)
   243a0:	dec00204 	addi	sp,sp,8
   243a4:	f800283a 	ret

000243a8 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   243a8:	defffd04 	addi	sp,sp,-12
   243ac:	df000215 	stw	fp,8(sp)
   243b0:	df000204 	addi	fp,sp,8
   243b4:	e13ffe15 	stw	r4,-8(fp)
   243b8:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   243bc:	e0bffe17 	ldw	r2,-8(fp)
   243c0:	10800317 	ldw	r2,12(r2)
   243c4:	10800404 	addi	r2,r2,16
   243c8:	10c00037 	ldwio	r3,0(r2)
   243cc:	e0bffe17 	ldw	r2,-8(fp)
   243d0:	10800317 	ldw	r2,12(r2)
   243d4:	10800304 	addi	r2,r2,12
   243d8:	10800037 	ldwio	r2,0(r2)
   243dc:	1884703a 	and	r2,r3,r2
   243e0:	1007883a 	mov	r3,r2
   243e4:	e0bfff17 	ldw	r2,-4(fp)
   243e8:	10c00015 	stw	r3,0(r2)
}
   243ec:	0001883a 	nop
   243f0:	e037883a 	mov	sp,fp
   243f4:	df000017 	ldw	fp,0(sp)
   243f8:	dec00104 	addi	sp,sp,4
   243fc:	f800283a 	ret

00024400 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   24400:	defffd04 	addi	sp,sp,-12
   24404:	df000215 	stw	fp,8(sp)
   24408:	df000204 	addi	fp,sp,8
   2440c:	e13ffe15 	stw	r4,-8(fp)
   24410:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   24414:	e0bffe17 	ldw	r2,-8(fp)
   24418:	10800317 	ldw	r2,12(r2)
   2441c:	10800404 	addi	r2,r2,16
   24420:	10800037 	ldwio	r2,0(r2)
   24424:	1007883a 	mov	r3,r2
   24428:	e0bfff17 	ldw	r2,-4(fp)
   2442c:	10c00015 	stw	r3,0(r2)
}
   24430:	0001883a 	nop
   24434:	e037883a 	mov	sp,fp
   24438:	df000017 	ldw	fp,0(sp)
   2443c:	dec00104 	addi	sp,sp,4
   24440:	f800283a 	ret

00024444 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   24444:	defffd04 	addi	sp,sp,-12
   24448:	df000215 	stw	fp,8(sp)
   2444c:	df000204 	addi	fp,sp,8
   24450:	e13ffe15 	stw	r4,-8(fp)
   24454:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   24458:	e0bffe17 	ldw	r2,-8(fp)
   2445c:	10800317 	ldw	r2,12(r2)
   24460:	10800404 	addi	r2,r2,16
   24464:	e0ffff17 	ldw	r3,-4(fp)
   24468:	10c00035 	stwio	r3,0(r2)
}
   2446c:	0001883a 	nop
   24470:	e037883a 	mov	sp,fp
   24474:	df000017 	ldw	fp,0(sp)
   24478:	dec00104 	addi	sp,sp,4
   2447c:	f800283a 	ret

00024480 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   24480:	defffb04 	addi	sp,sp,-20
   24484:	dfc00415 	stw	ra,16(sp)
   24488:	df000315 	stw	fp,12(sp)
   2448c:	df000304 	addi	fp,sp,12
   24490:	e13ffe15 	stw	r4,-8(fp)
   24494:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   24498:	e17ffd04 	addi	r5,fp,-12
   2449c:	e13ffe17 	ldw	r4,-8(fp)
   244a0:	002454c0 	call	2454c <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   244a4:	e0bfff17 	ldw	r2,-4(fp)
   244a8:	0086303a 	nor	r3,zero,r2
   244ac:	e0bffd17 	ldw	r2,-12(fp)
   244b0:	1884703a 	and	r2,r3,r2
   244b4:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   244b8:	e0bffe17 	ldw	r2,-8(fp)
   244bc:	10800317 	ldw	r2,12(r2)
   244c0:	10800304 	addi	r2,r2,12
   244c4:	e0fffd17 	ldw	r3,-12(fp)
   244c8:	18c007cc 	andi	r3,r3,31
   244cc:	10c00035 	stwio	r3,0(r2)
}
   244d0:	0001883a 	nop
   244d4:	e037883a 	mov	sp,fp
   244d8:	dfc00117 	ldw	ra,4(sp)
   244dc:	df000017 	ldw	fp,0(sp)
   244e0:	dec00204 	addi	sp,sp,8
   244e4:	f800283a 	ret

000244e8 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   244e8:	defffb04 	addi	sp,sp,-20
   244ec:	dfc00415 	stw	ra,16(sp)
   244f0:	df000315 	stw	fp,12(sp)
   244f4:	df000304 	addi	fp,sp,12
   244f8:	e13ffe15 	stw	r4,-8(fp)
   244fc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   24500:	e17ffd04 	addi	r5,fp,-12
   24504:	e13ffe17 	ldw	r4,-8(fp)
   24508:	002454c0 	call	2454c <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   2450c:	e0fffd17 	ldw	r3,-12(fp)
   24510:	e0bfff17 	ldw	r2,-4(fp)
   24514:	1884b03a 	or	r2,r3,r2
   24518:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   2451c:	e0bffe17 	ldw	r2,-8(fp)
   24520:	10800317 	ldw	r2,12(r2)
   24524:	10800304 	addi	r2,r2,12
   24528:	e0fffd17 	ldw	r3,-12(fp)
   2452c:	18c007cc 	andi	r3,r3,31
   24530:	10c00035 	stwio	r3,0(r2)
}
   24534:	0001883a 	nop
   24538:	e037883a 	mov	sp,fp
   2453c:	dfc00117 	ldw	ra,4(sp)
   24540:	df000017 	ldw	fp,0(sp)
   24544:	dec00204 	addi	sp,sp,8
   24548:	f800283a 	ret

0002454c <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   2454c:	defffd04 	addi	sp,sp,-12
   24550:	df000215 	stw	fp,8(sp)
   24554:	df000204 	addi	fp,sp,8
   24558:	e13ffe15 	stw	r4,-8(fp)
   2455c:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   24560:	e0bffe17 	ldw	r2,-8(fp)
   24564:	10800317 	ldw	r2,12(r2)
   24568:	10800304 	addi	r2,r2,12
   2456c:	10800037 	ldwio	r2,0(r2)
   24570:	10c007cc 	andi	r3,r2,31
   24574:	e0bfff17 	ldw	r2,-4(fp)
   24578:	10c00015 	stw	r3,0(r2)
}
   2457c:	0001883a 	nop
   24580:	e037883a 	mov	sp,fp
   24584:	df000017 	ldw	fp,0(sp)
   24588:	dec00104 	addi	sp,sp,4
   2458c:	f800283a 	ret

00024590 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   24590:	defffd04 	addi	sp,sp,-12
   24594:	df000215 	stw	fp,8(sp)
   24598:	df000204 	addi	fp,sp,8
   2459c:	e13ffe15 	stw	r4,-8(fp)
   245a0:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   245a4:	e0bffe17 	ldw	r2,-8(fp)
   245a8:	10800317 	ldw	r2,12(r2)
   245ac:	10800204 	addi	r2,r2,8
   245b0:	10800037 	ldwio	r2,0(r2)
   245b4:	10800c0c 	andi	r2,r2,48
   245b8:	1005d13a 	srai	r2,r2,4
   245bc:	1007883a 	mov	r3,r2
   245c0:	e0bfff17 	ldw	r2,-4(fp)
   245c4:	10c00015 	stw	r3,0(r2)
}
   245c8:	0001883a 	nop
   245cc:	e037883a 	mov	sp,fp
   245d0:	df000017 	ldw	fp,0(sp)
   245d4:	dec00104 	addi	sp,sp,4
   245d8:	f800283a 	ret

000245dc <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   245dc:	defffd04 	addi	sp,sp,-12
   245e0:	df000215 	stw	fp,8(sp)
   245e4:	df000204 	addi	fp,sp,8
   245e8:	e13ffe15 	stw	r4,-8(fp)
   245ec:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   245f0:	e0bffe17 	ldw	r2,-8(fp)
   245f4:	10800317 	ldw	r2,12(r2)
   245f8:	10800204 	addi	r2,r2,8
   245fc:	e0fffe17 	ldw	r3,-8(fp)
   24600:	18c00317 	ldw	r3,12(r3)
   24604:	18c00204 	addi	r3,r3,8
   24608:	18c00037 	ldwio	r3,0(r3)
   2460c:	1809883a 	mov	r4,r3
   24610:	00fff3c4 	movi	r3,-49
   24614:	20c8703a 	and	r4,r4,r3
   24618:	e0ffff17 	ldw	r3,-4(fp)
   2461c:	1806913a 	slli	r3,r3,4
   24620:	18c00c0c 	andi	r3,r3,48
   24624:	20c6b03a 	or	r3,r4,r3
   24628:	10c00035 	stwio	r3,0(r2)
}
   2462c:	0001883a 	nop
   24630:	e037883a 	mov	sp,fp
   24634:	df000017 	ldw	fp,0(sp)
   24638:	dec00104 	addi	sp,sp,4
   2463c:	f800283a 	ret

00024640 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   24640:	defffd04 	addi	sp,sp,-12
   24644:	df000215 	stw	fp,8(sp)
   24648:	df000204 	addi	fp,sp,8
   2464c:	e13ffe15 	stw	r4,-8(fp)
   24650:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   24654:	e0bffe17 	ldw	r2,-8(fp)
   24658:	10800317 	ldw	r2,12(r2)
   2465c:	10800204 	addi	r2,r2,8
   24660:	10800037 	ldwio	r2,0(r2)
   24664:	1080030c 	andi	r2,r2,12
   24668:	1005d0ba 	srai	r2,r2,2
   2466c:	1007883a 	mov	r3,r2
   24670:	e0bfff17 	ldw	r2,-4(fp)
   24674:	10c00015 	stw	r3,0(r2)
}
   24678:	0001883a 	nop
   2467c:	e037883a 	mov	sp,fp
   24680:	df000017 	ldw	fp,0(sp)
   24684:	dec00104 	addi	sp,sp,4
   24688:	f800283a 	ret

0002468c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   2468c:	defffd04 	addi	sp,sp,-12
   24690:	df000215 	stw	fp,8(sp)
   24694:	df000204 	addi	fp,sp,8
   24698:	e13ffe15 	stw	r4,-8(fp)
   2469c:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   246a0:	e0bffe17 	ldw	r2,-8(fp)
   246a4:	10800317 	ldw	r2,12(r2)
   246a8:	10c00204 	addi	r3,r2,8
   246ac:	e0bffe17 	ldw	r2,-8(fp)
   246b0:	10800317 	ldw	r2,12(r2)
   246b4:	10800204 	addi	r2,r2,8
   246b8:	10800037 	ldwio	r2,0(r2)
   246bc:	1009883a 	mov	r4,r2
   246c0:	00bffcc4 	movi	r2,-13
   246c4:	2088703a 	and	r4,r4,r2
   246c8:	e0bfff17 	ldw	r2,-4(fp)
   246cc:	1085883a 	add	r2,r2,r2
   246d0:	1085883a 	add	r2,r2,r2
   246d4:	1080030c 	andi	r2,r2,12
   246d8:	2084b03a 	or	r2,r4,r2
   246dc:	18800035 	stwio	r2,0(r3)
}
   246e0:	0001883a 	nop
   246e4:	e037883a 	mov	sp,fp
   246e8:	df000017 	ldw	fp,0(sp)
   246ec:	dec00104 	addi	sp,sp,4
   246f0:	f800283a 	ret

000246f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   246f4:	defffa04 	addi	sp,sp,-24
   246f8:	dfc00515 	stw	ra,20(sp)
   246fc:	df000415 	stw	fp,16(sp)
   24700:	df000404 	addi	fp,sp,16
   24704:	e13ffd15 	stw	r4,-12(fp)
   24708:	e17ffe15 	stw	r5,-8(fp)
   2470c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   24710:	e0bffd17 	ldw	r2,-12(fp)
   24714:	10800017 	ldw	r2,0(r2)
   24718:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2471c:	e0bffc17 	ldw	r2,-16(fp)
   24720:	10c00a04 	addi	r3,r2,40
   24724:	e0bffd17 	ldw	r2,-12(fp)
   24728:	10800217 	ldw	r2,8(r2)
   2472c:	100f883a 	mov	r7,r2
   24730:	e1bfff17 	ldw	r6,-4(fp)
   24734:	e17ffe17 	ldw	r5,-8(fp)
   24738:	1809883a 	mov	r4,r3
   2473c:	00247b40 	call	247b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   24740:	e037883a 	mov	sp,fp
   24744:	dfc00117 	ldw	ra,4(sp)
   24748:	df000017 	ldw	fp,0(sp)
   2474c:	dec00204 	addi	sp,sp,8
   24750:	f800283a 	ret

00024754 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   24754:	defffa04 	addi	sp,sp,-24
   24758:	dfc00515 	stw	ra,20(sp)
   2475c:	df000415 	stw	fp,16(sp)
   24760:	df000404 	addi	fp,sp,16
   24764:	e13ffd15 	stw	r4,-12(fp)
   24768:	e17ffe15 	stw	r5,-8(fp)
   2476c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   24770:	e0bffd17 	ldw	r2,-12(fp)
   24774:	10800017 	ldw	r2,0(r2)
   24778:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2477c:	e0bffc17 	ldw	r2,-16(fp)
   24780:	10c00a04 	addi	r3,r2,40
   24784:	e0bffd17 	ldw	r2,-12(fp)
   24788:	10800217 	ldw	r2,8(r2)
   2478c:	100f883a 	mov	r7,r2
   24790:	e1bfff17 	ldw	r6,-4(fp)
   24794:	e17ffe17 	ldw	r5,-8(fp)
   24798:	1809883a 	mov	r4,r3
   2479c:	00248a00 	call	248a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   247a0:	e037883a 	mov	sp,fp
   247a4:	dfc00117 	ldw	ra,4(sp)
   247a8:	df000017 	ldw	fp,0(sp)
   247ac:	dec00204 	addi	sp,sp,8
   247b0:	f800283a 	ret

000247b4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   247b4:	defff704 	addi	sp,sp,-36
   247b8:	df000815 	stw	fp,32(sp)
   247bc:	df000804 	addi	fp,sp,32
   247c0:	e13ffc15 	stw	r4,-16(fp)
   247c4:	e17ffd15 	stw	r5,-12(fp)
   247c8:	e1bffe15 	stw	r6,-8(fp)
   247cc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   247d0:	e0bffc17 	ldw	r2,-16(fp)
   247d4:	10800017 	ldw	r2,0(r2)
   247d8:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   247dc:	e0bffd17 	ldw	r2,-12(fp)
   247e0:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   247e4:	e0bffe17 	ldw	r2,-8(fp)
   247e8:	e0fffd17 	ldw	r3,-12(fp)
   247ec:	1885883a 	add	r2,r3,r2
   247f0:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   247f4:	00001206 	br	24840 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   247f8:	e0bff917 	ldw	r2,-28(fp)
   247fc:	10800037 	ldwio	r2,0(r2)
   24800:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   24804:	e0bffb17 	ldw	r2,-20(fp)
   24808:	10a0000c 	andi	r2,r2,32768
   2480c:	10000626 	beq	r2,zero,24828 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   24810:	e0bff817 	ldw	r2,-32(fp)
   24814:	10c00044 	addi	r3,r2,1
   24818:	e0fff815 	stw	r3,-32(fp)
   2481c:	e0fffb17 	ldw	r3,-20(fp)
   24820:	10c00005 	stb	r3,0(r2)
   24824:	00000606 	br	24840 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   24828:	e0fff817 	ldw	r3,-32(fp)
   2482c:	e0bffd17 	ldw	r2,-12(fp)
   24830:	1880071e 	bne	r3,r2,24850 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   24834:	e0bfff17 	ldw	r2,-4(fp)
   24838:	1090000c 	andi	r2,r2,16384
   2483c:	1000061e 	bne	r2,zero,24858 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   24840:	e0fff817 	ldw	r3,-32(fp)
   24844:	e0bffa17 	ldw	r2,-24(fp)
   24848:	18bfeb36 	bltu	r3,r2,247f8 <__alt_data_end+0xfffe47f8>
   2484c:	00000306 	br	2485c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   24850:	0001883a 	nop
   24854:	00000106 	br	2485c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   24858:	0001883a 	nop
    
  }

  if (ptr != buffer)
   2485c:	e0fff817 	ldw	r3,-32(fp)
   24860:	e0bffd17 	ldw	r2,-12(fp)
   24864:	18800426 	beq	r3,r2,24878 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   24868:	e0fff817 	ldw	r3,-32(fp)
   2486c:	e0bffd17 	ldw	r2,-12(fp)
   24870:	1885c83a 	sub	r2,r3,r2
   24874:	00000606 	br	24890 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   24878:	e0bfff17 	ldw	r2,-4(fp)
   2487c:	1090000c 	andi	r2,r2,16384
   24880:	10000226 	beq	r2,zero,2488c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   24884:	00bffd44 	movi	r2,-11
   24888:	00000106 	br	24890 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   2488c:	00bffec4 	movi	r2,-5
}
   24890:	e037883a 	mov	sp,fp
   24894:	df000017 	ldw	fp,0(sp)
   24898:	dec00104 	addi	sp,sp,4
   2489c:	f800283a 	ret

000248a0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   248a0:	defff904 	addi	sp,sp,-28
   248a4:	df000615 	stw	fp,24(sp)
   248a8:	df000604 	addi	fp,sp,24
   248ac:	e13ffc15 	stw	r4,-16(fp)
   248b0:	e17ffd15 	stw	r5,-12(fp)
   248b4:	e1bffe15 	stw	r6,-8(fp)
   248b8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   248bc:	e0bffc17 	ldw	r2,-16(fp)
   248c0:	10800017 	ldw	r2,0(r2)
   248c4:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   248c8:	e0bffe17 	ldw	r2,-8(fp)
   248cc:	e0fffd17 	ldw	r3,-12(fp)
   248d0:	1885883a 	add	r2,r3,r2
   248d4:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   248d8:	00000e06 	br	24914 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   248dc:	e0bffa17 	ldw	r2,-24(fp)
   248e0:	10800104 	addi	r2,r2,4
   248e4:	10800037 	ldwio	r2,0(r2)
   248e8:	10bfffec 	andhi	r2,r2,65535
   248ec:	10000926 	beq	r2,zero,24914 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   248f0:	e0fffa17 	ldw	r3,-24(fp)
   248f4:	e0bffd17 	ldw	r2,-12(fp)
   248f8:	11000044 	addi	r4,r2,1
   248fc:	e13ffd15 	stw	r4,-12(fp)
   24900:	10800003 	ldbu	r2,0(r2)
   24904:	10803fcc 	andi	r2,r2,255
   24908:	1080201c 	xori	r2,r2,128
   2490c:	10bfe004 	addi	r2,r2,-128
   24910:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   24914:	e0fffd17 	ldw	r3,-12(fp)
   24918:	e0bffb17 	ldw	r2,-20(fp)
   2491c:	18bfef36 	bltu	r3,r2,248dc <__alt_data_end+0xfffe48dc>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   24920:	e0bffe17 	ldw	r2,-8(fp)
}
   24924:	e037883a 	mov	sp,fp
   24928:	df000017 	ldw	fp,0(sp)
   2492c:	dec00104 	addi	sp,sp,4
   24930:	f800283a 	ret

00024934 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   24934:	defffe04 	addi	sp,sp,-8
   24938:	df000115 	stw	fp,4(sp)
   2493c:	df000104 	addi	fp,sp,4
   24940:	e13fff15 	stw	r4,-4(fp)
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   24944:	0005883a 	mov	r2,zero
}
   24948:	e037883a 	mov	sp,fp
   2494c:	df000017 	ldw	fp,0(sp)
   24950:	dec00104 	addi	sp,sp,4
   24954:	f800283a 	ret

00024958 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24958:	defffe04 	addi	sp,sp,-8
   2495c:	dfc00115 	stw	ra,4(sp)
   24960:	df000015 	stw	fp,0(sp)
   24964:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24968:	d0a00f17 	ldw	r2,-32708(gp)
   2496c:	10000326 	beq	r2,zero,2497c <alt_get_errno+0x24>
   24970:	d0a00f17 	ldw	r2,-32708(gp)
   24974:	103ee83a 	callr	r2
   24978:	00000106 	br	24980 <alt_get_errno+0x28>
   2497c:	d0a0e004 	addi	r2,gp,-31872
}
   24980:	e037883a 	mov	sp,fp
   24984:	dfc00117 	ldw	ra,4(sp)
   24988:	df000017 	ldw	fp,0(sp)
   2498c:	dec00204 	addi	sp,sp,8
   24990:	f800283a 	ret

00024994 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   24994:	defffb04 	addi	sp,sp,-20
   24998:	dfc00415 	stw	ra,16(sp)
   2499c:	df000315 	stw	fp,12(sp)
   249a0:	df000304 	addi	fp,sp,12
   249a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   249a8:	e0bfff17 	ldw	r2,-4(fp)
   249ac:	10000816 	blt	r2,zero,249d0 <close+0x3c>
   249b0:	01400304 	movi	r5,12
   249b4:	e13fff17 	ldw	r4,-4(fp)
   249b8:	0021d940 	call	21d94 <__mulsi3>
   249bc:	1007883a 	mov	r3,r2
   249c0:	008000f4 	movhi	r2,3
   249c4:	10a1d804 	addi	r2,r2,-30880
   249c8:	1885883a 	add	r2,r3,r2
   249cc:	00000106 	br	249d4 <close+0x40>
   249d0:	0005883a 	mov	r2,zero
   249d4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   249d8:	e0bffd17 	ldw	r2,-12(fp)
   249dc:	10001926 	beq	r2,zero,24a44 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   249e0:	e0bffd17 	ldw	r2,-12(fp)
   249e4:	10800017 	ldw	r2,0(r2)
   249e8:	10800417 	ldw	r2,16(r2)
   249ec:	10000626 	beq	r2,zero,24a08 <close+0x74>
   249f0:	e0bffd17 	ldw	r2,-12(fp)
   249f4:	10800017 	ldw	r2,0(r2)
   249f8:	10800417 	ldw	r2,16(r2)
   249fc:	e13ffd17 	ldw	r4,-12(fp)
   24a00:	103ee83a 	callr	r2
   24a04:	00000106 	br	24a0c <close+0x78>
   24a08:	0005883a 	mov	r2,zero
   24a0c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   24a10:	e13fff17 	ldw	r4,-4(fp)
   24a14:	00255f40 	call	255f4 <alt_release_fd>
    if (rval < 0)
   24a18:	e0bffe17 	ldw	r2,-8(fp)
   24a1c:	1000070e 	bge	r2,zero,24a3c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   24a20:	00249580 	call	24958 <alt_get_errno>
   24a24:	1007883a 	mov	r3,r2
   24a28:	e0bffe17 	ldw	r2,-8(fp)
   24a2c:	0085c83a 	sub	r2,zero,r2
   24a30:	18800015 	stw	r2,0(r3)
      return -1;
   24a34:	00bfffc4 	movi	r2,-1
   24a38:	00000706 	br	24a58 <close+0xc4>
    }
    return 0;
   24a3c:	0005883a 	mov	r2,zero
   24a40:	00000506 	br	24a58 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   24a44:	00249580 	call	24958 <alt_get_errno>
   24a48:	1007883a 	mov	r3,r2
   24a4c:	00801444 	movi	r2,81
   24a50:	18800015 	stw	r2,0(r3)
    return -1;
   24a54:	00bfffc4 	movi	r2,-1
  }
}
   24a58:	e037883a 	mov	sp,fp
   24a5c:	dfc00117 	ldw	ra,4(sp)
   24a60:	df000017 	ldw	fp,0(sp)
   24a64:	dec00204 	addi	sp,sp,8
   24a68:	f800283a 	ret

00024a6c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   24a6c:	deffff04 	addi	sp,sp,-4
   24a70:	df000015 	stw	fp,0(sp)
   24a74:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   24a78:	0001883a 	nop
   24a7c:	e037883a 	mov	sp,fp
   24a80:	df000017 	ldw	fp,0(sp)
   24a84:	dec00104 	addi	sp,sp,4
   24a88:	f800283a 	ret

00024a8c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   24a8c:	defffc04 	addi	sp,sp,-16
   24a90:	df000315 	stw	fp,12(sp)
   24a94:	df000304 	addi	fp,sp,12
   24a98:	e13ffd15 	stw	r4,-12(fp)
   24a9c:	e17ffe15 	stw	r5,-8(fp)
   24aa0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   24aa4:	e0bfff17 	ldw	r2,-4(fp)
}
   24aa8:	e037883a 	mov	sp,fp
   24aac:	df000017 	ldw	fp,0(sp)
   24ab0:	dec00104 	addi	sp,sp,4
   24ab4:	f800283a 	ret

00024ab8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24ab8:	defffe04 	addi	sp,sp,-8
   24abc:	dfc00115 	stw	ra,4(sp)
   24ac0:	df000015 	stw	fp,0(sp)
   24ac4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24ac8:	d0a00f17 	ldw	r2,-32708(gp)
   24acc:	10000326 	beq	r2,zero,24adc <alt_get_errno+0x24>
   24ad0:	d0a00f17 	ldw	r2,-32708(gp)
   24ad4:	103ee83a 	callr	r2
   24ad8:	00000106 	br	24ae0 <alt_get_errno+0x28>
   24adc:	d0a0e004 	addi	r2,gp,-31872
}
   24ae0:	e037883a 	mov	sp,fp
   24ae4:	dfc00117 	ldw	ra,4(sp)
   24ae8:	df000017 	ldw	fp,0(sp)
   24aec:	dec00204 	addi	sp,sp,8
   24af0:	f800283a 	ret

00024af4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   24af4:	defffa04 	addi	sp,sp,-24
   24af8:	dfc00515 	stw	ra,20(sp)
   24afc:	df000415 	stw	fp,16(sp)
   24b00:	df000404 	addi	fp,sp,16
   24b04:	e13ffe15 	stw	r4,-8(fp)
   24b08:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   24b0c:	e0bffe17 	ldw	r2,-8(fp)
   24b10:	10000326 	beq	r2,zero,24b20 <alt_dev_llist_insert+0x2c>
   24b14:	e0bffe17 	ldw	r2,-8(fp)
   24b18:	10800217 	ldw	r2,8(r2)
   24b1c:	1000061e 	bne	r2,zero,24b38 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   24b20:	0024ab80 	call	24ab8 <alt_get_errno>
   24b24:	1007883a 	mov	r3,r2
   24b28:	00800584 	movi	r2,22
   24b2c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   24b30:	00bffa84 	movi	r2,-22
   24b34:	00001306 	br	24b84 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   24b38:	e0bffe17 	ldw	r2,-8(fp)
   24b3c:	e0ffff17 	ldw	r3,-4(fp)
   24b40:	e0fffc15 	stw	r3,-16(fp)
   24b44:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24b48:	e0bffd17 	ldw	r2,-12(fp)
   24b4c:	e0fffc17 	ldw	r3,-16(fp)
   24b50:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24b54:	e0bffc17 	ldw	r2,-16(fp)
   24b58:	10c00017 	ldw	r3,0(r2)
   24b5c:	e0bffd17 	ldw	r2,-12(fp)
   24b60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24b64:	e0bffc17 	ldw	r2,-16(fp)
   24b68:	10800017 	ldw	r2,0(r2)
   24b6c:	e0fffd17 	ldw	r3,-12(fp)
   24b70:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24b74:	e0bffc17 	ldw	r2,-16(fp)
   24b78:	e0fffd17 	ldw	r3,-12(fp)
   24b7c:	10c00015 	stw	r3,0(r2)

  return 0;  
   24b80:	0005883a 	mov	r2,zero
}
   24b84:	e037883a 	mov	sp,fp
   24b88:	dfc00117 	ldw	ra,4(sp)
   24b8c:	df000017 	ldw	fp,0(sp)
   24b90:	dec00204 	addi	sp,sp,8
   24b94:	f800283a 	ret

00024b98 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   24b98:	defffd04 	addi	sp,sp,-12
   24b9c:	dfc00215 	stw	ra,8(sp)
   24ba0:	df000115 	stw	fp,4(sp)
   24ba4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24ba8:	008000b4 	movhi	r2,2
   24bac:	10974b04 	addi	r2,r2,23852
   24bb0:	e0bfff15 	stw	r2,-4(fp)
   24bb4:	00000606 	br	24bd0 <_do_ctors+0x38>
        (*ctor) (); 
   24bb8:	e0bfff17 	ldw	r2,-4(fp)
   24bbc:	10800017 	ldw	r2,0(r2)
   24bc0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24bc4:	e0bfff17 	ldw	r2,-4(fp)
   24bc8:	10bfff04 	addi	r2,r2,-4
   24bcc:	e0bfff15 	stw	r2,-4(fp)
   24bd0:	e0ffff17 	ldw	r3,-4(fp)
   24bd4:	008000b4 	movhi	r2,2
   24bd8:	10974c04 	addi	r2,r2,23856
   24bdc:	18bff62e 	bgeu	r3,r2,24bb8 <__alt_data_end+0xfffe4bb8>
        (*ctor) (); 
}
   24be0:	0001883a 	nop
   24be4:	e037883a 	mov	sp,fp
   24be8:	dfc00117 	ldw	ra,4(sp)
   24bec:	df000017 	ldw	fp,0(sp)
   24bf0:	dec00204 	addi	sp,sp,8
   24bf4:	f800283a 	ret

00024bf8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   24bf8:	defffd04 	addi	sp,sp,-12
   24bfc:	dfc00215 	stw	ra,8(sp)
   24c00:	df000115 	stw	fp,4(sp)
   24c04:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24c08:	008000b4 	movhi	r2,2
   24c0c:	10974b04 	addi	r2,r2,23852
   24c10:	e0bfff15 	stw	r2,-4(fp)
   24c14:	00000606 	br	24c30 <_do_dtors+0x38>
        (*dtor) (); 
   24c18:	e0bfff17 	ldw	r2,-4(fp)
   24c1c:	10800017 	ldw	r2,0(r2)
   24c20:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24c24:	e0bfff17 	ldw	r2,-4(fp)
   24c28:	10bfff04 	addi	r2,r2,-4
   24c2c:	e0bfff15 	stw	r2,-4(fp)
   24c30:	e0ffff17 	ldw	r3,-4(fp)
   24c34:	008000b4 	movhi	r2,2
   24c38:	10974c04 	addi	r2,r2,23856
   24c3c:	18bff62e 	bgeu	r3,r2,24c18 <__alt_data_end+0xfffe4c18>
        (*dtor) (); 
}
   24c40:	0001883a 	nop
   24c44:	e037883a 	mov	sp,fp
   24c48:	dfc00117 	ldw	ra,4(sp)
   24c4c:	df000017 	ldw	fp,0(sp)
   24c50:	dec00204 	addi	sp,sp,8
   24c54:	f800283a 	ret

00024c58 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   24c58:	defffa04 	addi	sp,sp,-24
   24c5c:	dfc00515 	stw	ra,20(sp)
   24c60:	df000415 	stw	fp,16(sp)
   24c64:	df000404 	addi	fp,sp,16
   24c68:	e13ffe15 	stw	r4,-8(fp)
   24c6c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   24c70:	e0bfff17 	ldw	r2,-4(fp)
   24c74:	10800017 	ldw	r2,0(r2)
   24c78:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   24c7c:	e13ffe17 	ldw	r4,-8(fp)
   24c80:	0021ef80 	call	21ef8 <strlen>
   24c84:	10800044 	addi	r2,r2,1
   24c88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24c8c:	00000d06 	br	24cc4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   24c90:	e0bffc17 	ldw	r2,-16(fp)
   24c94:	10800217 	ldw	r2,8(r2)
   24c98:	e0fffd17 	ldw	r3,-12(fp)
   24c9c:	180d883a 	mov	r6,r3
   24ca0:	e17ffe17 	ldw	r5,-8(fp)
   24ca4:	1009883a 	mov	r4,r2
   24ca8:	00259380 	call	25938 <memcmp>
   24cac:	1000021e 	bne	r2,zero,24cb8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   24cb0:	e0bffc17 	ldw	r2,-16(fp)
   24cb4:	00000706 	br	24cd4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   24cb8:	e0bffc17 	ldw	r2,-16(fp)
   24cbc:	10800017 	ldw	r2,0(r2)
   24cc0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24cc4:	e0fffc17 	ldw	r3,-16(fp)
   24cc8:	e0bfff17 	ldw	r2,-4(fp)
   24ccc:	18bff01e 	bne	r3,r2,24c90 <__alt_data_end+0xfffe4c90>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   24cd0:	0005883a 	mov	r2,zero
}
   24cd4:	e037883a 	mov	sp,fp
   24cd8:	dfc00117 	ldw	ra,4(sp)
   24cdc:	df000017 	ldw	fp,0(sp)
   24ce0:	dec00204 	addi	sp,sp,8
   24ce4:	f800283a 	ret

00024ce8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   24ce8:	deffff04 	addi	sp,sp,-4
   24cec:	df000015 	stw	fp,0(sp)
   24cf0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   24cf4:	0001883a 	nop
   24cf8:	e037883a 	mov	sp,fp
   24cfc:	df000017 	ldw	fp,0(sp)
   24d00:	dec00104 	addi	sp,sp,4
   24d04:	f800283a 	ret

00024d08 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24d08:	defff904 	addi	sp,sp,-28
   24d0c:	dfc00615 	stw	ra,24(sp)
   24d10:	df000515 	stw	fp,20(sp)
   24d14:	df000504 	addi	fp,sp,20
   24d18:	e13ffc15 	stw	r4,-16(fp)
   24d1c:	e17ffd15 	stw	r5,-12(fp)
   24d20:	e1bffe15 	stw	r6,-8(fp)
   24d24:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   24d28:	e0800217 	ldw	r2,8(fp)
   24d2c:	d8800015 	stw	r2,0(sp)
   24d30:	e1ffff17 	ldw	r7,-4(fp)
   24d34:	e1bffe17 	ldw	r6,-8(fp)
   24d38:	e17ffd17 	ldw	r5,-12(fp)
   24d3c:	e13ffc17 	ldw	r4,-16(fp)
   24d40:	0024eb80 	call	24eb8 <alt_iic_isr_register>
}  
   24d44:	e037883a 	mov	sp,fp
   24d48:	dfc00117 	ldw	ra,4(sp)
   24d4c:	df000017 	ldw	fp,0(sp)
   24d50:	dec00204 	addi	sp,sp,8
   24d54:	f800283a 	ret

00024d58 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   24d58:	defff904 	addi	sp,sp,-28
   24d5c:	df000615 	stw	fp,24(sp)
   24d60:	df000604 	addi	fp,sp,24
   24d64:	e13ffe15 	stw	r4,-8(fp)
   24d68:	e17fff15 	stw	r5,-4(fp)
   24d6c:	e0bfff17 	ldw	r2,-4(fp)
   24d70:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24d74:	0005303a 	rdctl	r2,status
   24d78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24d7c:	e0fffb17 	ldw	r3,-20(fp)
   24d80:	00bfff84 	movi	r2,-2
   24d84:	1884703a 	and	r2,r3,r2
   24d88:	1001703a 	wrctl	status,r2
  
  return context;
   24d8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   24d90:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   24d94:	00c00044 	movi	r3,1
   24d98:	e0bffa17 	ldw	r2,-24(fp)
   24d9c:	1884983a 	sll	r2,r3,r2
   24da0:	1007883a 	mov	r3,r2
   24da4:	d0a0e417 	ldw	r2,-31856(gp)
   24da8:	1884b03a 	or	r2,r3,r2
   24dac:	d0a0e415 	stw	r2,-31856(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24db0:	d0a0e417 	ldw	r2,-31856(gp)
   24db4:	100170fa 	wrctl	ienable,r2
   24db8:	e0bffc17 	ldw	r2,-16(fp)
   24dbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24dc0:	e0bffd17 	ldw	r2,-12(fp)
   24dc4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24dc8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   24dcc:	0001883a 	nop
}
   24dd0:	e037883a 	mov	sp,fp
   24dd4:	df000017 	ldw	fp,0(sp)
   24dd8:	dec00104 	addi	sp,sp,4
   24ddc:	f800283a 	ret

00024de0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   24de0:	defff904 	addi	sp,sp,-28
   24de4:	df000615 	stw	fp,24(sp)
   24de8:	df000604 	addi	fp,sp,24
   24dec:	e13ffe15 	stw	r4,-8(fp)
   24df0:	e17fff15 	stw	r5,-4(fp)
   24df4:	e0bfff17 	ldw	r2,-4(fp)
   24df8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24dfc:	0005303a 	rdctl	r2,status
   24e00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24e04:	e0fffb17 	ldw	r3,-20(fp)
   24e08:	00bfff84 	movi	r2,-2
   24e0c:	1884703a 	and	r2,r3,r2
   24e10:	1001703a 	wrctl	status,r2
  
  return context;
   24e14:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   24e18:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   24e1c:	00c00044 	movi	r3,1
   24e20:	e0bffa17 	ldw	r2,-24(fp)
   24e24:	1884983a 	sll	r2,r3,r2
   24e28:	0084303a 	nor	r2,zero,r2
   24e2c:	1007883a 	mov	r3,r2
   24e30:	d0a0e417 	ldw	r2,-31856(gp)
   24e34:	1884703a 	and	r2,r3,r2
   24e38:	d0a0e415 	stw	r2,-31856(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24e3c:	d0a0e417 	ldw	r2,-31856(gp)
   24e40:	100170fa 	wrctl	ienable,r2
   24e44:	e0bffc17 	ldw	r2,-16(fp)
   24e48:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24e4c:	e0bffd17 	ldw	r2,-12(fp)
   24e50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24e54:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   24e58:	0001883a 	nop
}
   24e5c:	e037883a 	mov	sp,fp
   24e60:	df000017 	ldw	fp,0(sp)
   24e64:	dec00104 	addi	sp,sp,4
   24e68:	f800283a 	ret

00024e6c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   24e6c:	defffc04 	addi	sp,sp,-16
   24e70:	df000315 	stw	fp,12(sp)
   24e74:	df000304 	addi	fp,sp,12
   24e78:	e13ffe15 	stw	r4,-8(fp)
   24e7c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   24e80:	000530fa 	rdctl	r2,ienable
   24e84:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   24e88:	00c00044 	movi	r3,1
   24e8c:	e0bfff17 	ldw	r2,-4(fp)
   24e90:	1884983a 	sll	r2,r3,r2
   24e94:	1007883a 	mov	r3,r2
   24e98:	e0bffd17 	ldw	r2,-12(fp)
   24e9c:	1884703a 	and	r2,r3,r2
   24ea0:	1004c03a 	cmpne	r2,r2,zero
   24ea4:	10803fcc 	andi	r2,r2,255
}
   24ea8:	e037883a 	mov	sp,fp
   24eac:	df000017 	ldw	fp,0(sp)
   24eb0:	dec00104 	addi	sp,sp,4
   24eb4:	f800283a 	ret

00024eb8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24eb8:	defff504 	addi	sp,sp,-44
   24ebc:	dfc00a15 	stw	ra,40(sp)
   24ec0:	df000915 	stw	fp,36(sp)
   24ec4:	df000904 	addi	fp,sp,36
   24ec8:	e13ffc15 	stw	r4,-16(fp)
   24ecc:	e17ffd15 	stw	r5,-12(fp)
   24ed0:	e1bffe15 	stw	r6,-8(fp)
   24ed4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   24ed8:	00bffa84 	movi	r2,-22
   24edc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   24ee0:	e0bffd17 	ldw	r2,-12(fp)
   24ee4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   24ee8:	e0bff817 	ldw	r2,-32(fp)
   24eec:	10800808 	cmpgei	r2,r2,32
   24ef0:	1000271e 	bne	r2,zero,24f90 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24ef4:	0005303a 	rdctl	r2,status
   24ef8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24efc:	e0fffb17 	ldw	r3,-20(fp)
   24f00:	00bfff84 	movi	r2,-2
   24f04:	1884703a 	and	r2,r3,r2
   24f08:	1001703a 	wrctl	status,r2
  
  return context;
   24f0c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   24f10:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   24f14:	008000f4 	movhi	r2,3
   24f18:	10a41e04 	addi	r2,r2,-28552
   24f1c:	e0fff817 	ldw	r3,-32(fp)
   24f20:	180690fa 	slli	r3,r3,3
   24f24:	10c5883a 	add	r2,r2,r3
   24f28:	e0fffe17 	ldw	r3,-8(fp)
   24f2c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   24f30:	008000f4 	movhi	r2,3
   24f34:	10a41e04 	addi	r2,r2,-28552
   24f38:	e0fff817 	ldw	r3,-32(fp)
   24f3c:	180690fa 	slli	r3,r3,3
   24f40:	10c5883a 	add	r2,r2,r3
   24f44:	10800104 	addi	r2,r2,4
   24f48:	e0ffff17 	ldw	r3,-4(fp)
   24f4c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   24f50:	e0bffe17 	ldw	r2,-8(fp)
   24f54:	10000526 	beq	r2,zero,24f6c <alt_iic_isr_register+0xb4>
   24f58:	e0bff817 	ldw	r2,-32(fp)
   24f5c:	100b883a 	mov	r5,r2
   24f60:	e13ffc17 	ldw	r4,-16(fp)
   24f64:	0024d580 	call	24d58 <alt_ic_irq_enable>
   24f68:	00000406 	br	24f7c <alt_iic_isr_register+0xc4>
   24f6c:	e0bff817 	ldw	r2,-32(fp)
   24f70:	100b883a 	mov	r5,r2
   24f74:	e13ffc17 	ldw	r4,-16(fp)
   24f78:	0024de00 	call	24de0 <alt_ic_irq_disable>
   24f7c:	e0bff715 	stw	r2,-36(fp)
   24f80:	e0bffa17 	ldw	r2,-24(fp)
   24f84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24f88:	e0bff917 	ldw	r2,-28(fp)
   24f8c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   24f90:	e0bff717 	ldw	r2,-36(fp)
}
   24f94:	e037883a 	mov	sp,fp
   24f98:	dfc00117 	ldw	ra,4(sp)
   24f9c:	df000017 	ldw	fp,0(sp)
   24fa0:	dec00204 	addi	sp,sp,8
   24fa4:	f800283a 	ret

00024fa8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   24fa8:	defff804 	addi	sp,sp,-32
   24fac:	dfc00715 	stw	ra,28(sp)
   24fb0:	df000615 	stw	fp,24(sp)
   24fb4:	dc000515 	stw	r16,20(sp)
   24fb8:	df000604 	addi	fp,sp,24
   24fbc:	e13ffb15 	stw	r4,-20(fp)
   24fc0:	e17ffc15 	stw	r5,-16(fp)
   24fc4:	e1bffd15 	stw	r6,-12(fp)
   24fc8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   24fcc:	e1bffe17 	ldw	r6,-8(fp)
   24fd0:	e17ffd17 	ldw	r5,-12(fp)
   24fd4:	e13ffc17 	ldw	r4,-16(fp)
   24fd8:	00252300 	call	25230 <open>
   24fdc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   24fe0:	e0bffa17 	ldw	r2,-24(fp)
   24fe4:	10002216 	blt	r2,zero,25070 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   24fe8:	040000f4 	movhi	r16,3
   24fec:	8421d804 	addi	r16,r16,-30880
   24ff0:	e0bffa17 	ldw	r2,-24(fp)
   24ff4:	01400304 	movi	r5,12
   24ff8:	1009883a 	mov	r4,r2
   24ffc:	0021d940 	call	21d94 <__mulsi3>
   25000:	8085883a 	add	r2,r16,r2
   25004:	10c00017 	ldw	r3,0(r2)
   25008:	e0bffb17 	ldw	r2,-20(fp)
   2500c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   25010:	040000f4 	movhi	r16,3
   25014:	8421d804 	addi	r16,r16,-30880
   25018:	e0bffa17 	ldw	r2,-24(fp)
   2501c:	01400304 	movi	r5,12
   25020:	1009883a 	mov	r4,r2
   25024:	0021d940 	call	21d94 <__mulsi3>
   25028:	8085883a 	add	r2,r16,r2
   2502c:	10800104 	addi	r2,r2,4
   25030:	10c00017 	ldw	r3,0(r2)
   25034:	e0bffb17 	ldw	r2,-20(fp)
   25038:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2503c:	040000f4 	movhi	r16,3
   25040:	8421d804 	addi	r16,r16,-30880
   25044:	e0bffa17 	ldw	r2,-24(fp)
   25048:	01400304 	movi	r5,12
   2504c:	1009883a 	mov	r4,r2
   25050:	0021d940 	call	21d94 <__mulsi3>
   25054:	8085883a 	add	r2,r16,r2
   25058:	10800204 	addi	r2,r2,8
   2505c:	10c00017 	ldw	r3,0(r2)
   25060:	e0bffb17 	ldw	r2,-20(fp)
   25064:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   25068:	e13ffa17 	ldw	r4,-24(fp)
   2506c:	00255f40 	call	255f4 <alt_release_fd>
  }
} 
   25070:	0001883a 	nop
   25074:	e6ffff04 	addi	sp,fp,-4
   25078:	dfc00217 	ldw	ra,8(sp)
   2507c:	df000117 	ldw	fp,4(sp)
   25080:	dc000017 	ldw	r16,0(sp)
   25084:	dec00304 	addi	sp,sp,12
   25088:	f800283a 	ret

0002508c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2508c:	defffb04 	addi	sp,sp,-20
   25090:	dfc00415 	stw	ra,16(sp)
   25094:	df000315 	stw	fp,12(sp)
   25098:	df000304 	addi	fp,sp,12
   2509c:	e13ffd15 	stw	r4,-12(fp)
   250a0:	e17ffe15 	stw	r5,-8(fp)
   250a4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   250a8:	01c07fc4 	movi	r7,511
   250ac:	01800044 	movi	r6,1
   250b0:	e17ffd17 	ldw	r5,-12(fp)
   250b4:	010000f4 	movhi	r4,3
   250b8:	2121db04 	addi	r4,r4,-30868
   250bc:	0024fa80 	call	24fa8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   250c0:	01c07fc4 	movi	r7,511
   250c4:	000d883a 	mov	r6,zero
   250c8:	e17ffe17 	ldw	r5,-8(fp)
   250cc:	010000f4 	movhi	r4,3
   250d0:	2121d804 	addi	r4,r4,-30880
   250d4:	0024fa80 	call	24fa8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   250d8:	01c07fc4 	movi	r7,511
   250dc:	01800044 	movi	r6,1
   250e0:	e17fff17 	ldw	r5,-4(fp)
   250e4:	010000f4 	movhi	r4,3
   250e8:	2121de04 	addi	r4,r4,-30856
   250ec:	0024fa80 	call	24fa8 <alt_open_fd>
}  
   250f0:	0001883a 	nop
   250f4:	e037883a 	mov	sp,fp
   250f8:	dfc00117 	ldw	ra,4(sp)
   250fc:	df000017 	ldw	fp,0(sp)
   25100:	dec00204 	addi	sp,sp,8
   25104:	f800283a 	ret

00025108 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25108:	defffe04 	addi	sp,sp,-8
   2510c:	dfc00115 	stw	ra,4(sp)
   25110:	df000015 	stw	fp,0(sp)
   25114:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25118:	d0a00f17 	ldw	r2,-32708(gp)
   2511c:	10000326 	beq	r2,zero,2512c <alt_get_errno+0x24>
   25120:	d0a00f17 	ldw	r2,-32708(gp)
   25124:	103ee83a 	callr	r2
   25128:	00000106 	br	25130 <alt_get_errno+0x28>
   2512c:	d0a0e004 	addi	r2,gp,-31872
}
   25130:	e037883a 	mov	sp,fp
   25134:	dfc00117 	ldw	ra,4(sp)
   25138:	df000017 	ldw	fp,0(sp)
   2513c:	dec00204 	addi	sp,sp,8
   25140:	f800283a 	ret

00025144 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   25144:	defffb04 	addi	sp,sp,-20
   25148:	dfc00415 	stw	ra,16(sp)
   2514c:	df000315 	stw	fp,12(sp)
   25150:	dc000215 	stw	r16,8(sp)
   25154:	df000304 	addi	fp,sp,12
   25158:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2515c:	e0bffe17 	ldw	r2,-8(fp)
   25160:	10800217 	ldw	r2,8(r2)
   25164:	10d00034 	orhi	r3,r2,16384
   25168:	e0bffe17 	ldw	r2,-8(fp)
   2516c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   25170:	e03ffd15 	stw	zero,-12(fp)
   25174:	00002306 	br	25204 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   25178:	040000f4 	movhi	r16,3
   2517c:	8421d804 	addi	r16,r16,-30880
   25180:	e0bffd17 	ldw	r2,-12(fp)
   25184:	01400304 	movi	r5,12
   25188:	1009883a 	mov	r4,r2
   2518c:	0021d940 	call	21d94 <__mulsi3>
   25190:	8085883a 	add	r2,r16,r2
   25194:	10c00017 	ldw	r3,0(r2)
   25198:	e0bffe17 	ldw	r2,-8(fp)
   2519c:	10800017 	ldw	r2,0(r2)
   251a0:	1880151e 	bne	r3,r2,251f8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   251a4:	040000f4 	movhi	r16,3
   251a8:	8421d804 	addi	r16,r16,-30880
   251ac:	e0bffd17 	ldw	r2,-12(fp)
   251b0:	01400304 	movi	r5,12
   251b4:	1009883a 	mov	r4,r2
   251b8:	0021d940 	call	21d94 <__mulsi3>
   251bc:	8085883a 	add	r2,r16,r2
   251c0:	10800204 	addi	r2,r2,8
   251c4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   251c8:	10000b0e 	bge	r2,zero,251f8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   251cc:	01400304 	movi	r5,12
   251d0:	e13ffd17 	ldw	r4,-12(fp)
   251d4:	0021d940 	call	21d94 <__mulsi3>
   251d8:	1007883a 	mov	r3,r2
   251dc:	008000f4 	movhi	r2,3
   251e0:	10a1d804 	addi	r2,r2,-30880
   251e4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   251e8:	e0bffe17 	ldw	r2,-8(fp)
   251ec:	18800226 	beq	r3,r2,251f8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   251f0:	00bffcc4 	movi	r2,-13
   251f4:	00000806 	br	25218 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   251f8:	e0bffd17 	ldw	r2,-12(fp)
   251fc:	10800044 	addi	r2,r2,1
   25200:	e0bffd15 	stw	r2,-12(fp)
   25204:	d0a00e17 	ldw	r2,-32712(gp)
   25208:	1007883a 	mov	r3,r2
   2520c:	e0bffd17 	ldw	r2,-12(fp)
   25210:	18bfd92e 	bgeu	r3,r2,25178 <__alt_data_end+0xfffe5178>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   25214:	0005883a 	mov	r2,zero
}
   25218:	e6ffff04 	addi	sp,fp,-4
   2521c:	dfc00217 	ldw	ra,8(sp)
   25220:	df000117 	ldw	fp,4(sp)
   25224:	dc000017 	ldw	r16,0(sp)
   25228:	dec00304 	addi	sp,sp,12
   2522c:	f800283a 	ret

00025230 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   25230:	defff604 	addi	sp,sp,-40
   25234:	dfc00915 	stw	ra,36(sp)
   25238:	df000815 	stw	fp,32(sp)
   2523c:	df000804 	addi	fp,sp,32
   25240:	e13ffd15 	stw	r4,-12(fp)
   25244:	e17ffe15 	stw	r5,-8(fp)
   25248:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2524c:	00bfffc4 	movi	r2,-1
   25250:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   25254:	00bffb44 	movi	r2,-19
   25258:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2525c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   25260:	d1600c04 	addi	r5,gp,-32720
   25264:	e13ffd17 	ldw	r4,-12(fp)
   25268:	0024c580 	call	24c58 <alt_find_dev>
   2526c:	e0bff815 	stw	r2,-32(fp)
   25270:	e0bff817 	ldw	r2,-32(fp)
   25274:	1000051e 	bne	r2,zero,2528c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   25278:	e13ffd17 	ldw	r4,-12(fp)
   2527c:	002569c0 	call	2569c <alt_find_file>
   25280:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   25284:	00800044 	movi	r2,1
   25288:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2528c:	e0bff817 	ldw	r2,-32(fp)
   25290:	10002b26 	beq	r2,zero,25340 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   25294:	e13ff817 	ldw	r4,-32(fp)
   25298:	00257a40 	call	257a4 <alt_get_fd>
   2529c:	e0bff915 	stw	r2,-28(fp)
   252a0:	e0bff917 	ldw	r2,-28(fp)
   252a4:	1000030e 	bge	r2,zero,252b4 <open+0x84>
    {
      status = index;
   252a8:	e0bff917 	ldw	r2,-28(fp)
   252ac:	e0bffa15 	stw	r2,-24(fp)
   252b0:	00002506 	br	25348 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   252b4:	01400304 	movi	r5,12
   252b8:	e13ff917 	ldw	r4,-28(fp)
   252bc:	0021d940 	call	21d94 <__mulsi3>
   252c0:	1007883a 	mov	r3,r2
   252c4:	008000f4 	movhi	r2,3
   252c8:	10a1d804 	addi	r2,r2,-30880
   252cc:	1885883a 	add	r2,r3,r2
   252d0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   252d4:	e0fffe17 	ldw	r3,-8(fp)
   252d8:	00900034 	movhi	r2,16384
   252dc:	10bfffc4 	addi	r2,r2,-1
   252e0:	1886703a 	and	r3,r3,r2
   252e4:	e0bffc17 	ldw	r2,-16(fp)
   252e8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   252ec:	e0bffb17 	ldw	r2,-20(fp)
   252f0:	1000051e 	bne	r2,zero,25308 <open+0xd8>
   252f4:	e13ffc17 	ldw	r4,-16(fp)
   252f8:	00251440 	call	25144 <alt_file_locked>
   252fc:	e0bffa15 	stw	r2,-24(fp)
   25300:	e0bffa17 	ldw	r2,-24(fp)
   25304:	10001016 	blt	r2,zero,25348 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   25308:	e0bff817 	ldw	r2,-32(fp)
   2530c:	10800317 	ldw	r2,12(r2)
   25310:	10000826 	beq	r2,zero,25334 <open+0x104>
   25314:	e0bff817 	ldw	r2,-32(fp)
   25318:	10800317 	ldw	r2,12(r2)
   2531c:	e1ffff17 	ldw	r7,-4(fp)
   25320:	e1bffe17 	ldw	r6,-8(fp)
   25324:	e17ffd17 	ldw	r5,-12(fp)
   25328:	e13ffc17 	ldw	r4,-16(fp)
   2532c:	103ee83a 	callr	r2
   25330:	00000106 	br	25338 <open+0x108>
   25334:	0005883a 	mov	r2,zero
   25338:	e0bffa15 	stw	r2,-24(fp)
   2533c:	00000206 	br	25348 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   25340:	00bffb44 	movi	r2,-19
   25344:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   25348:	e0bffa17 	ldw	r2,-24(fp)
   2534c:	1000090e 	bge	r2,zero,25374 <open+0x144>
  {
    alt_release_fd (index);  
   25350:	e13ff917 	ldw	r4,-28(fp)
   25354:	00255f40 	call	255f4 <alt_release_fd>
    ALT_ERRNO = -status;
   25358:	00251080 	call	25108 <alt_get_errno>
   2535c:	1007883a 	mov	r3,r2
   25360:	e0bffa17 	ldw	r2,-24(fp)
   25364:	0085c83a 	sub	r2,zero,r2
   25368:	18800015 	stw	r2,0(r3)
    return -1;
   2536c:	00bfffc4 	movi	r2,-1
   25370:	00000106 	br	25378 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   25374:	e0bff917 	ldw	r2,-28(fp)
}
   25378:	e037883a 	mov	sp,fp
   2537c:	dfc00117 	ldw	ra,4(sp)
   25380:	df000017 	ldw	fp,0(sp)
   25384:	dec00204 	addi	sp,sp,8
   25388:	f800283a 	ret

0002538c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   2538c:	defff204 	addi	sp,sp,-56
   25390:	dfc00a15 	stw	ra,40(sp)
   25394:	df000915 	stw	fp,36(sp)
   25398:	df000904 	addi	fp,sp,36
   2539c:	e13fff15 	stw	r4,-4(fp)
   253a0:	e1400215 	stw	r5,8(fp)
   253a4:	e1800315 	stw	r6,12(fp)
   253a8:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   253ac:	e0800204 	addi	r2,fp,8
   253b0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   253b4:	e0bfff17 	ldw	r2,-4(fp)
   253b8:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   253bc:	00006f06 	br	2557c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   253c0:	e0bff807 	ldb	r2,-32(fp)
   253c4:	10800960 	cmpeqi	r2,r2,37
   253c8:	1000041e 	bne	r2,zero,253dc <alt_printf+0x50>
        {
            alt_putchar(c);
   253cc:	e0bff807 	ldb	r2,-32(fp)
   253d0:	1009883a 	mov	r4,r2
   253d4:	00255b80 	call	255b8 <alt_putchar>
   253d8:	00006806 	br	2557c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   253dc:	e0bff717 	ldw	r2,-36(fp)
   253e0:	10c00044 	addi	r3,r2,1
   253e4:	e0fff715 	stw	r3,-36(fp)
   253e8:	10800003 	ldbu	r2,0(r2)
   253ec:	e0bff805 	stb	r2,-32(fp)
   253f0:	e0bff807 	ldb	r2,-32(fp)
   253f4:	10006926 	beq	r2,zero,2559c <alt_printf+0x210>
            {
                if (c == '%')
   253f8:	e0bff807 	ldb	r2,-32(fp)
   253fc:	10800958 	cmpnei	r2,r2,37
   25400:	1000041e 	bne	r2,zero,25414 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   25404:	e0bff807 	ldb	r2,-32(fp)
   25408:	1009883a 	mov	r4,r2
   2540c:	00255b80 	call	255b8 <alt_putchar>
   25410:	00005a06 	br	2557c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   25414:	e0bff807 	ldb	r2,-32(fp)
   25418:	108018d8 	cmpnei	r2,r2,99
   2541c:	1000081e 	bne	r2,zero,25440 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   25420:	e0bffe17 	ldw	r2,-8(fp)
   25424:	10c00104 	addi	r3,r2,4
   25428:	e0fffe15 	stw	r3,-8(fp)
   2542c:	10800017 	ldw	r2,0(r2)
   25430:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   25434:	e13ffd17 	ldw	r4,-12(fp)
   25438:	00255b80 	call	255b8 <alt_putchar>
   2543c:	00004f06 	br	2557c <alt_printf+0x1f0>
                }
                else if (c == 'x')
   25440:	e0bff807 	ldb	r2,-32(fp)
   25444:	10801e18 	cmpnei	r2,r2,120
   25448:	1000341e 	bne	r2,zero,2551c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   2544c:	e0bffe17 	ldw	r2,-8(fp)
   25450:	10c00104 	addi	r3,r2,4
   25454:	e0fffe15 	stw	r3,-8(fp)
   25458:	10800017 	ldw	r2,0(r2)
   2545c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   25460:	e0bffb17 	ldw	r2,-20(fp)
   25464:	1000031e 	bne	r2,zero,25474 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   25468:	01000c04 	movi	r4,48
   2546c:	00255b80 	call	255b8 <alt_putchar>
                        continue;
   25470:	00004206 	br	2557c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   25474:	00800704 	movi	r2,28
   25478:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   2547c:	00000306 	br	2548c <alt_printf+0x100>
                        digit_shift -= 4;
   25480:	e0bff917 	ldw	r2,-28(fp)
   25484:	10bfff04 	addi	r2,r2,-4
   25488:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   2548c:	00c003c4 	movi	r3,15
   25490:	e0bff917 	ldw	r2,-28(fp)
   25494:	1884983a 	sll	r2,r3,r2
   25498:	1007883a 	mov	r3,r2
   2549c:	e0bffb17 	ldw	r2,-20(fp)
   254a0:	1884703a 	and	r2,r3,r2
   254a4:	103ff626 	beq	r2,zero,25480 <__alt_data_end+0xfffe5480>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   254a8:	00001906 	br	25510 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   254ac:	00c003c4 	movi	r3,15
   254b0:	e0bff917 	ldw	r2,-28(fp)
   254b4:	1884983a 	sll	r2,r3,r2
   254b8:	1007883a 	mov	r3,r2
   254bc:	e0bffb17 	ldw	r2,-20(fp)
   254c0:	1886703a 	and	r3,r3,r2
   254c4:	e0bff917 	ldw	r2,-28(fp)
   254c8:	1884d83a 	srl	r2,r3,r2
   254cc:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   254d0:	e0bffc17 	ldw	r2,-16(fp)
   254d4:	108002a8 	cmpgeui	r2,r2,10
   254d8:	1000041e 	bne	r2,zero,254ec <alt_printf+0x160>
                            c = '0' + digit;
   254dc:	e0bffc17 	ldw	r2,-16(fp)
   254e0:	10800c04 	addi	r2,r2,48
   254e4:	e0bff805 	stb	r2,-32(fp)
   254e8:	00000306 	br	254f8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   254ec:	e0bffc17 	ldw	r2,-16(fp)
   254f0:	108015c4 	addi	r2,r2,87
   254f4:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   254f8:	e0bff807 	ldb	r2,-32(fp)
   254fc:	1009883a 	mov	r4,r2
   25500:	00255b80 	call	255b8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   25504:	e0bff917 	ldw	r2,-28(fp)
   25508:	10bfff04 	addi	r2,r2,-4
   2550c:	e0bff915 	stw	r2,-28(fp)
   25510:	e0bff917 	ldw	r2,-28(fp)
   25514:	103fe50e 	bge	r2,zero,254ac <__alt_data_end+0xfffe54ac>
   25518:	00001806 	br	2557c <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   2551c:	e0bff807 	ldb	r2,-32(fp)
   25520:	10801cd8 	cmpnei	r2,r2,115
   25524:	1000151e 	bne	r2,zero,2557c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   25528:	e0bffe17 	ldw	r2,-8(fp)
   2552c:	10c00104 	addi	r3,r2,4
   25530:	e0fffe15 	stw	r3,-8(fp)
   25534:	10800017 	ldw	r2,0(r2)
   25538:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   2553c:	00000906 	br	25564 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   25540:	e0bffa17 	ldw	r2,-24(fp)
   25544:	10c00044 	addi	r3,r2,1
   25548:	e0fffa15 	stw	r3,-24(fp)
   2554c:	10800003 	ldbu	r2,0(r2)
   25550:	10803fcc 	andi	r2,r2,255
   25554:	1080201c 	xori	r2,r2,128
   25558:	10bfe004 	addi	r2,r2,-128
   2555c:	1009883a 	mov	r4,r2
   25560:	00255b80 	call	255b8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   25564:	e0bffa17 	ldw	r2,-24(fp)
   25568:	10800003 	ldbu	r2,0(r2)
   2556c:	10803fcc 	andi	r2,r2,255
   25570:	1080201c 	xori	r2,r2,128
   25574:	10bfe004 	addi	r2,r2,-128
   25578:	103ff11e 	bne	r2,zero,25540 <__alt_data_end+0xfffe5540>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   2557c:	e0bff717 	ldw	r2,-36(fp)
   25580:	10c00044 	addi	r3,r2,1
   25584:	e0fff715 	stw	r3,-36(fp)
   25588:	10800003 	ldbu	r2,0(r2)
   2558c:	e0bff805 	stb	r2,-32(fp)
   25590:	e0bff807 	ldb	r2,-32(fp)
   25594:	103f8a1e 	bne	r2,zero,253c0 <__alt_data_end+0xfffe53c0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   25598:	00000106 	br	255a0 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   2559c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   255a0:	0001883a 	nop
   255a4:	e037883a 	mov	sp,fp
   255a8:	dfc00117 	ldw	ra,4(sp)
   255ac:	df000017 	ldw	fp,0(sp)
   255b0:	dec00504 	addi	sp,sp,20
   255b4:	f800283a 	ret

000255b8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   255b8:	defffd04 	addi	sp,sp,-12
   255bc:	dfc00215 	stw	ra,8(sp)
   255c0:	df000115 	stw	fp,4(sp)
   255c4:	df000104 	addi	fp,sp,4
   255c8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   255cc:	d0a00717 	ldw	r2,-32740(gp)
   255d0:	10800217 	ldw	r2,8(r2)
   255d4:	100b883a 	mov	r5,r2
   255d8:	e13fff17 	ldw	r4,-4(fp)
   255dc:	00259680 	call	25968 <putc>
#endif
#endif
}
   255e0:	e037883a 	mov	sp,fp
   255e4:	dfc00117 	ldw	ra,4(sp)
   255e8:	df000017 	ldw	fp,0(sp)
   255ec:	dec00204 	addi	sp,sp,8
   255f0:	f800283a 	ret

000255f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   255f4:	defffc04 	addi	sp,sp,-16
   255f8:	dfc00315 	stw	ra,12(sp)
   255fc:	df000215 	stw	fp,8(sp)
   25600:	dc000115 	stw	r16,4(sp)
   25604:	df000204 	addi	fp,sp,8
   25608:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   2560c:	e0bffe17 	ldw	r2,-8(fp)
   25610:	108000d0 	cmplti	r2,r2,3
   25614:	1000111e 	bne	r2,zero,2565c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   25618:	040000f4 	movhi	r16,3
   2561c:	8421d804 	addi	r16,r16,-30880
   25620:	e0bffe17 	ldw	r2,-8(fp)
   25624:	01400304 	movi	r5,12
   25628:	1009883a 	mov	r4,r2
   2562c:	0021d940 	call	21d94 <__mulsi3>
   25630:	8085883a 	add	r2,r16,r2
   25634:	10800204 	addi	r2,r2,8
   25638:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2563c:	040000f4 	movhi	r16,3
   25640:	8421d804 	addi	r16,r16,-30880
   25644:	e0bffe17 	ldw	r2,-8(fp)
   25648:	01400304 	movi	r5,12
   2564c:	1009883a 	mov	r4,r2
   25650:	0021d940 	call	21d94 <__mulsi3>
   25654:	8085883a 	add	r2,r16,r2
   25658:	10000015 	stw	zero,0(r2)
  }
}
   2565c:	0001883a 	nop
   25660:	e6ffff04 	addi	sp,fp,-4
   25664:	dfc00217 	ldw	ra,8(sp)
   25668:	df000117 	ldw	fp,4(sp)
   2566c:	dc000017 	ldw	r16,0(sp)
   25670:	dec00304 	addi	sp,sp,12
   25674:	f800283a 	ret

00025678 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   25678:	deffff04 	addi	sp,sp,-4
   2567c:	df000015 	stw	fp,0(sp)
   25680:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   25684:	000170fa 	wrctl	ienable,zero
}
   25688:	0001883a 	nop
   2568c:	e037883a 	mov	sp,fp
   25690:	df000017 	ldw	fp,0(sp)
   25694:	dec00104 	addi	sp,sp,4
   25698:	f800283a 	ret

0002569c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2569c:	defffb04 	addi	sp,sp,-20
   256a0:	dfc00415 	stw	ra,16(sp)
   256a4:	df000315 	stw	fp,12(sp)
   256a8:	df000304 	addi	fp,sp,12
   256ac:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   256b0:	d0a00a17 	ldw	r2,-32728(gp)
   256b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   256b8:	00003106 	br	25780 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   256bc:	e0bffd17 	ldw	r2,-12(fp)
   256c0:	10800217 	ldw	r2,8(r2)
   256c4:	1009883a 	mov	r4,r2
   256c8:	0021ef80 	call	21ef8 <strlen>
   256cc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   256d0:	e0bffd17 	ldw	r2,-12(fp)
   256d4:	10c00217 	ldw	r3,8(r2)
   256d8:	e0bffe17 	ldw	r2,-8(fp)
   256dc:	10bfffc4 	addi	r2,r2,-1
   256e0:	1885883a 	add	r2,r3,r2
   256e4:	10800003 	ldbu	r2,0(r2)
   256e8:	10803fcc 	andi	r2,r2,255
   256ec:	1080201c 	xori	r2,r2,128
   256f0:	10bfe004 	addi	r2,r2,-128
   256f4:	10800bd8 	cmpnei	r2,r2,47
   256f8:	1000031e 	bne	r2,zero,25708 <alt_find_file+0x6c>
    {
      len -= 1;
   256fc:	e0bffe17 	ldw	r2,-8(fp)
   25700:	10bfffc4 	addi	r2,r2,-1
   25704:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   25708:	e0bffe17 	ldw	r2,-8(fp)
   2570c:	e0ffff17 	ldw	r3,-4(fp)
   25710:	1885883a 	add	r2,r3,r2
   25714:	10800003 	ldbu	r2,0(r2)
   25718:	10803fcc 	andi	r2,r2,255
   2571c:	1080201c 	xori	r2,r2,128
   25720:	10bfe004 	addi	r2,r2,-128
   25724:	10800be0 	cmpeqi	r2,r2,47
   25728:	1000081e 	bne	r2,zero,2574c <alt_find_file+0xb0>
   2572c:	e0bffe17 	ldw	r2,-8(fp)
   25730:	e0ffff17 	ldw	r3,-4(fp)
   25734:	1885883a 	add	r2,r3,r2
   25738:	10800003 	ldbu	r2,0(r2)
   2573c:	10803fcc 	andi	r2,r2,255
   25740:	1080201c 	xori	r2,r2,128
   25744:	10bfe004 	addi	r2,r2,-128
   25748:	10000a1e 	bne	r2,zero,25774 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   2574c:	e0bffd17 	ldw	r2,-12(fp)
   25750:	10800217 	ldw	r2,8(r2)
   25754:	e0fffe17 	ldw	r3,-8(fp)
   25758:	180d883a 	mov	r6,r3
   2575c:	e17fff17 	ldw	r5,-4(fp)
   25760:	1009883a 	mov	r4,r2
   25764:	00259380 	call	25938 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   25768:	1000021e 	bne	r2,zero,25774 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2576c:	e0bffd17 	ldw	r2,-12(fp)
   25770:	00000706 	br	25790 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   25774:	e0bffd17 	ldw	r2,-12(fp)
   25778:	10800017 	ldw	r2,0(r2)
   2577c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   25780:	e0fffd17 	ldw	r3,-12(fp)
   25784:	d0a00a04 	addi	r2,gp,-32728
   25788:	18bfcc1e 	bne	r3,r2,256bc <__alt_data_end+0xfffe56bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2578c:	0005883a 	mov	r2,zero
}
   25790:	e037883a 	mov	sp,fp
   25794:	dfc00117 	ldw	ra,4(sp)
   25798:	df000017 	ldw	fp,0(sp)
   2579c:	dec00204 	addi	sp,sp,8
   257a0:	f800283a 	ret

000257a4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   257a4:	defffa04 	addi	sp,sp,-24
   257a8:	dfc00515 	stw	ra,20(sp)
   257ac:	df000415 	stw	fp,16(sp)
   257b0:	dc000315 	stw	r16,12(sp)
   257b4:	df000404 	addi	fp,sp,16
   257b8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   257bc:	00bffa04 	movi	r2,-24
   257c0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   257c4:	e03ffc15 	stw	zero,-16(fp)
   257c8:	00001d06 	br	25840 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   257cc:	040000f4 	movhi	r16,3
   257d0:	8421d804 	addi	r16,r16,-30880
   257d4:	e0bffc17 	ldw	r2,-16(fp)
   257d8:	01400304 	movi	r5,12
   257dc:	1009883a 	mov	r4,r2
   257e0:	0021d940 	call	21d94 <__mulsi3>
   257e4:	8085883a 	add	r2,r16,r2
   257e8:	10800017 	ldw	r2,0(r2)
   257ec:	1000111e 	bne	r2,zero,25834 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   257f0:	040000f4 	movhi	r16,3
   257f4:	8421d804 	addi	r16,r16,-30880
   257f8:	e0bffc17 	ldw	r2,-16(fp)
   257fc:	01400304 	movi	r5,12
   25800:	1009883a 	mov	r4,r2
   25804:	0021d940 	call	21d94 <__mulsi3>
   25808:	8085883a 	add	r2,r16,r2
   2580c:	e0fffe17 	ldw	r3,-8(fp)
   25810:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   25814:	d0e00e17 	ldw	r3,-32712(gp)
   25818:	e0bffc17 	ldw	r2,-16(fp)
   2581c:	1880020e 	bge	r3,r2,25828 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   25820:	e0bffc17 	ldw	r2,-16(fp)
   25824:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
   25828:	e0bffc17 	ldw	r2,-16(fp)
   2582c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   25830:	00000606 	br	2584c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   25834:	e0bffc17 	ldw	r2,-16(fp)
   25838:	10800044 	addi	r2,r2,1
   2583c:	e0bffc15 	stw	r2,-16(fp)
   25840:	e0bffc17 	ldw	r2,-16(fp)
   25844:	10800810 	cmplti	r2,r2,32
   25848:	103fe01e 	bne	r2,zero,257cc <__alt_data_end+0xfffe57cc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2584c:	e0bffd17 	ldw	r2,-12(fp)
}
   25850:	e6ffff04 	addi	sp,fp,-4
   25854:	dfc00217 	ldw	ra,8(sp)
   25858:	df000117 	ldw	fp,4(sp)
   2585c:	dc000017 	ldw	r16,0(sp)
   25860:	dec00304 	addi	sp,sp,12
   25864:	f800283a 	ret

00025868 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   25868:	defffe04 	addi	sp,sp,-8
   2586c:	df000115 	stw	fp,4(sp)
   25870:	df000104 	addi	fp,sp,4
   25874:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   25878:	e0bfff17 	ldw	r2,-4(fp)
   2587c:	10bffe84 	addi	r2,r2,-6
   25880:	10c00428 	cmpgeui	r3,r2,16
   25884:	18001a1e 	bne	r3,zero,258f0 <alt_exception_cause_generated_bad_addr+0x88>
   25888:	100690ba 	slli	r3,r2,2
   2588c:	008000b4 	movhi	r2,2
   25890:	10962804 	addi	r2,r2,22688
   25894:	1885883a 	add	r2,r3,r2
   25898:	10800017 	ldw	r2,0(r2)
   2589c:	1000683a 	jmp	r2
   258a0:	000258e0 	cmpeqi	zero,zero,2403
   258a4:	000258e0 	cmpeqi	zero,zero,2403
   258a8:	000258f0 	cmpltui	zero,zero,2403
   258ac:	000258f0 	cmpltui	zero,zero,2403
   258b0:	000258f0 	cmpltui	zero,zero,2403
   258b4:	000258e0 	cmpeqi	zero,zero,2403
   258b8:	000258e8 	cmpgeui	zero,zero,2403
   258bc:	000258f0 	cmpltui	zero,zero,2403
   258c0:	000258e0 	cmpeqi	zero,zero,2403
   258c4:	000258e0 	cmpeqi	zero,zero,2403
   258c8:	000258f0 	cmpltui	zero,zero,2403
   258cc:	000258e0 	cmpeqi	zero,zero,2403
   258d0:	000258e8 	cmpgeui	zero,zero,2403
   258d4:	000258f0 	cmpltui	zero,zero,2403
   258d8:	000258f0 	cmpltui	zero,zero,2403
   258dc:	000258e0 	cmpeqi	zero,zero,2403
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   258e0:	00800044 	movi	r2,1
   258e4:	00000306 	br	258f4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   258e8:	0005883a 	mov	r2,zero
   258ec:	00000106 	br	258f4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   258f0:	0005883a 	mov	r2,zero
  }
}
   258f4:	e037883a 	mov	sp,fp
   258f8:	df000017 	ldw	fp,0(sp)
   258fc:	dec00104 	addi	sp,sp,4
   25900:	f800283a 	ret

00025904 <atexit>:
   25904:	200b883a 	mov	r5,r4
   25908:	000f883a 	mov	r7,zero
   2590c:	000d883a 	mov	r6,zero
   25910:	0009883a 	mov	r4,zero
   25914:	0025a141 	jmpi	25a14 <__register_exitproc>

00025918 <exit>:
   25918:	defffe04 	addi	sp,sp,-8
   2591c:	000b883a 	mov	r5,zero
   25920:	dc000015 	stw	r16,0(sp)
   25924:	dfc00115 	stw	ra,4(sp)
   25928:	2021883a 	mov	r16,r4
   2592c:	0025b6c0 	call	25b6c <__call_exitprocs>
   25930:	8009883a 	mov	r4,r16
   25934:	0025cfc0 	call	25cfc <_exit>

00025938 <memcmp>:
   25938:	218d883a 	add	r6,r4,r6
   2593c:	21800826 	beq	r4,r6,25960 <memcmp+0x28>
   25940:	20800003 	ldbu	r2,0(r4)
   25944:	28c00003 	ldbu	r3,0(r5)
   25948:	10c00226 	beq	r2,r3,25954 <memcmp+0x1c>
   2594c:	10c5c83a 	sub	r2,r2,r3
   25950:	f800283a 	ret
   25954:	21000044 	addi	r4,r4,1
   25958:	29400044 	addi	r5,r5,1
   2595c:	003ff706 	br	2593c <__alt_data_end+0xfffe593c>
   25960:	0005883a 	mov	r2,zero
   25964:	f800283a 	ret

00025968 <putc>:
   25968:	defffd04 	addi	sp,sp,-12
   2596c:	008000b4 	movhi	r2,2
   25970:	dc000115 	stw	r16,4(sp)
   25974:	dfc00215 	stw	ra,8(sp)
   25978:	10893204 	addi	r2,r2,9416
   2597c:	28800115 	stw	r2,4(r5)
   25980:	008000f4 	movhi	r2,3
   25984:	10a23f04 	addi	r2,r2,-30468
   25988:	d9000005 	stb	r4,0(sp)
   2598c:	2021883a 	mov	r16,r4
   25990:	11000017 	ldw	r4,0(r2)
   25994:	01c00044 	movi	r7,1
   25998:	d80d883a 	mov	r6,sp
   2599c:	00224c80 	call	224c8 <__sfvwrite_small_dev>
   259a0:	00ffffc4 	movi	r3,-1
   259a4:	10c00126 	beq	r2,r3,259ac <putc+0x44>
   259a8:	8005883a 	mov	r2,r16
   259ac:	dfc00217 	ldw	ra,8(sp)
   259b0:	dc000117 	ldw	r16,4(sp)
   259b4:	dec00304 	addi	sp,sp,12
   259b8:	f800283a 	ret

000259bc <_putc_r>:
   259bc:	defffd04 	addi	sp,sp,-12
   259c0:	008000b4 	movhi	r2,2
   259c4:	dc000115 	stw	r16,4(sp)
   259c8:	dfc00215 	stw	ra,8(sp)
   259cc:	10893204 	addi	r2,r2,9416
   259d0:	30800115 	stw	r2,4(r6)
   259d4:	008000f4 	movhi	r2,3
   259d8:	10a23f04 	addi	r2,r2,-30468
   259dc:	11000017 	ldw	r4,0(r2)
   259e0:	2821883a 	mov	r16,r5
   259e4:	01c00044 	movi	r7,1
   259e8:	300b883a 	mov	r5,r6
   259ec:	d80d883a 	mov	r6,sp
   259f0:	dc000005 	stb	r16,0(sp)
   259f4:	00224c80 	call	224c8 <__sfvwrite_small_dev>
   259f8:	00ffffc4 	movi	r3,-1
   259fc:	10c00126 	beq	r2,r3,25a04 <_putc_r+0x48>
   25a00:	8005883a 	mov	r2,r16
   25a04:	dfc00217 	ldw	ra,8(sp)
   25a08:	dc000117 	ldw	r16,4(sp)
   25a0c:	dec00304 	addi	sp,sp,12
   25a10:	f800283a 	ret

00025a14 <__register_exitproc>:
   25a14:	008000f4 	movhi	r2,3
   25a18:	10a23e04 	addi	r2,r2,-30472
   25a1c:	10c00017 	ldw	r3,0(r2)
   25a20:	defff904 	addi	sp,sp,-28
   25a24:	dc000015 	stw	r16,0(sp)
   25a28:	1c000c17 	ldw	r16,48(r3)
   25a2c:	dd400515 	stw	r21,20(sp)
   25a30:	dd000415 	stw	r20,16(sp)
   25a34:	dcc00315 	stw	r19,12(sp)
   25a38:	dc800215 	stw	r18,8(sp)
   25a3c:	dc400115 	stw	r17,4(sp)
   25a40:	dfc00615 	stw	ra,24(sp)
   25a44:	202b883a 	mov	r21,r4
   25a48:	2823883a 	mov	r17,r5
   25a4c:	3027883a 	mov	r19,r6
   25a50:	3825883a 	mov	r18,r7
   25a54:	1029883a 	mov	r20,r2
   25a58:	8000021e 	bne	r16,zero,25a64 <__register_exitproc+0x50>
   25a5c:	1c000d04 	addi	r16,r3,52
   25a60:	1c000c15 	stw	r16,48(r3)
   25a64:	80800117 	ldw	r2,4(r16)
   25a68:	00c007c4 	movi	r3,31
   25a6c:	1880110e 	bge	r3,r2,25ab4 <__register_exitproc+0xa0>
   25a70:	00800034 	movhi	r2,0
   25a74:	10800004 	addi	r2,r2,0
   25a78:	1000021e 	bne	r2,zero,25a84 <__register_exitproc+0x70>
   25a7c:	00bfffc4 	movi	r2,-1
   25a80:	00003106 	br	25b48 <__register_exitproc+0x134>
   25a84:	01002304 	movi	r4,140
   25a88:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   25a8c:	1021883a 	mov	r16,r2
   25a90:	103ffa26 	beq	r2,zero,25a7c <__alt_data_end+0xfffe5a7c>
   25a94:	10000115 	stw	zero,4(r2)
   25a98:	a0800017 	ldw	r2,0(r20)
   25a9c:	10c00c17 	ldw	r3,48(r2)
   25aa0:	80c00015 	stw	r3,0(r16)
   25aa4:	14000c15 	stw	r16,48(r2)
   25aa8:	80002215 	stw	zero,136(r16)
   25aac:	a8001d26 	beq	r21,zero,25b24 <__register_exitproc+0x110>
   25ab0:	00000606 	br	25acc <__register_exitproc+0xb8>
   25ab4:	a8001b26 	beq	r21,zero,25b24 <__register_exitproc+0x110>
   25ab8:	80802217 	ldw	r2,136(r16)
   25abc:	1000091e 	bne	r2,zero,25ae4 <__register_exitproc+0xd0>
   25ac0:	00800034 	movhi	r2,0
   25ac4:	10800004 	addi	r2,r2,0
   25ac8:	103fec26 	beq	r2,zero,25a7c <__alt_data_end+0xfffe5a7c>
   25acc:	01004204 	movi	r4,264
   25ad0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   25ad4:	103fe926 	beq	r2,zero,25a7c <__alt_data_end+0xfffe5a7c>
   25ad8:	10004015 	stw	zero,256(r2)
   25adc:	10004115 	stw	zero,260(r2)
   25ae0:	80802215 	stw	r2,136(r16)
   25ae4:	81400117 	ldw	r5,4(r16)
   25ae8:	01000044 	movi	r4,1
   25aec:	2947883a 	add	r3,r5,r5
   25af0:	18c7883a 	add	r3,r3,r3
   25af4:	10c7883a 	add	r3,r2,r3
   25af8:	1cc00015 	stw	r19,0(r3)
   25afc:	2148983a 	sll	r4,r4,r5
   25b00:	11404017 	ldw	r5,256(r2)
   25b04:	290ab03a 	or	r5,r5,r4
   25b08:	11404015 	stw	r5,256(r2)
   25b0c:	1c802015 	stw	r18,128(r3)
   25b10:	00c00084 	movi	r3,2
   25b14:	a8c0031e 	bne	r21,r3,25b24 <__register_exitproc+0x110>
   25b18:	10c04117 	ldw	r3,260(r2)
   25b1c:	1908b03a 	or	r4,r3,r4
   25b20:	11004115 	stw	r4,260(r2)
   25b24:	80800117 	ldw	r2,4(r16)
   25b28:	10c00044 	addi	r3,r2,1
   25b2c:	10800084 	addi	r2,r2,2
   25b30:	1085883a 	add	r2,r2,r2
   25b34:	1085883a 	add	r2,r2,r2
   25b38:	80c00115 	stw	r3,4(r16)
   25b3c:	80a1883a 	add	r16,r16,r2
   25b40:	84400015 	stw	r17,0(r16)
   25b44:	0005883a 	mov	r2,zero
   25b48:	dfc00617 	ldw	ra,24(sp)
   25b4c:	dd400517 	ldw	r21,20(sp)
   25b50:	dd000417 	ldw	r20,16(sp)
   25b54:	dcc00317 	ldw	r19,12(sp)
   25b58:	dc800217 	ldw	r18,8(sp)
   25b5c:	dc400117 	ldw	r17,4(sp)
   25b60:	dc000017 	ldw	r16,0(sp)
   25b64:	dec00704 	addi	sp,sp,28
   25b68:	f800283a 	ret

00025b6c <__call_exitprocs>:
   25b6c:	defff504 	addi	sp,sp,-44
   25b70:	dd000515 	stw	r20,20(sp)
   25b74:	050000f4 	movhi	r20,3
   25b78:	dc800315 	stw	r18,12(sp)
   25b7c:	dfc00a15 	stw	ra,40(sp)
   25b80:	df000915 	stw	fp,36(sp)
   25b84:	ddc00815 	stw	r23,32(sp)
   25b88:	dd800715 	stw	r22,28(sp)
   25b8c:	dd400615 	stw	r21,24(sp)
   25b90:	dcc00415 	stw	r19,16(sp)
   25b94:	dc400215 	stw	r17,8(sp)
   25b98:	dc000115 	stw	r16,4(sp)
   25b9c:	d9000015 	stw	r4,0(sp)
   25ba0:	2825883a 	mov	r18,r5
   25ba4:	a5223e04 	addi	r20,r20,-30472
   25ba8:	a4400017 	ldw	r17,0(r20)
   25bac:	8cc00c17 	ldw	r19,48(r17)
   25bb0:	8c400c04 	addi	r17,r17,48
   25bb4:	98004526 	beq	r19,zero,25ccc <__call_exitprocs+0x160>
   25bb8:	9c000117 	ldw	r16,4(r19)
   25bbc:	00900034 	movhi	r2,16384
   25bc0:	10bfffc4 	addi	r2,r2,-1
   25bc4:	9d402217 	ldw	r21,136(r19)
   25bc8:	85bfffc4 	addi	r22,r16,-1
   25bcc:	80a1883a 	add	r16,r16,r2
   25bd0:	8421883a 	add	r16,r16,r16
   25bd4:	8421883a 	add	r16,r16,r16
   25bd8:	ac2f883a 	add	r23,r21,r16
   25bdc:	84000204 	addi	r16,r16,8
   25be0:	9c21883a 	add	r16,r19,r16
   25be4:	b0002716 	blt	r22,zero,25c84 <__call_exitprocs+0x118>
   25be8:	90000726 	beq	r18,zero,25c08 <__call_exitprocs+0x9c>
   25bec:	a800041e 	bne	r21,zero,25c00 <__call_exitprocs+0x94>
   25bf0:	b5bfffc4 	addi	r22,r22,-1
   25bf4:	bdffff04 	addi	r23,r23,-4
   25bf8:	843fff04 	addi	r16,r16,-4
   25bfc:	003ff906 	br	25be4 <__alt_data_end+0xfffe5be4>
   25c00:	b9002017 	ldw	r4,128(r23)
   25c04:	913ffa1e 	bne	r18,r4,25bf0 <__alt_data_end+0xfffe5bf0>
   25c08:	99000117 	ldw	r4,4(r19)
   25c0c:	82000017 	ldw	r8,0(r16)
   25c10:	213fffc4 	addi	r4,r4,-1
   25c14:	b100021e 	bne	r22,r4,25c20 <__call_exitprocs+0xb4>
   25c18:	9d800115 	stw	r22,4(r19)
   25c1c:	00000106 	br	25c24 <__call_exitprocs+0xb8>
   25c20:	80000015 	stw	zero,0(r16)
   25c24:	403ff226 	beq	r8,zero,25bf0 <__alt_data_end+0xfffe5bf0>
   25c28:	9f000117 	ldw	fp,4(r19)
   25c2c:	a8000526 	beq	r21,zero,25c44 <__call_exitprocs+0xd8>
   25c30:	00800044 	movi	r2,1
   25c34:	1592983a 	sll	r9,r2,r22
   25c38:	a9404017 	ldw	r5,256(r21)
   25c3c:	494a703a 	and	r5,r9,r5
   25c40:	2800021e 	bne	r5,zero,25c4c <__call_exitprocs+0xe0>
   25c44:	403ee83a 	callr	r8
   25c48:	00000906 	br	25c70 <__call_exitprocs+0x104>
   25c4c:	a9004117 	ldw	r4,260(r21)
   25c50:	4908703a 	and	r4,r9,r4
   25c54:	2000041e 	bne	r4,zero,25c68 <__call_exitprocs+0xfc>
   25c58:	b9400017 	ldw	r5,0(r23)
   25c5c:	d9000017 	ldw	r4,0(sp)
   25c60:	403ee83a 	callr	r8
   25c64:	00000206 	br	25c70 <__call_exitprocs+0x104>
   25c68:	b9000017 	ldw	r4,0(r23)
   25c6c:	403ee83a 	callr	r8
   25c70:	99000117 	ldw	r4,4(r19)
   25c74:	e13fcc1e 	bne	fp,r4,25ba8 <__alt_data_end+0xfffe5ba8>
   25c78:	89000017 	ldw	r4,0(r17)
   25c7c:	993fdc26 	beq	r19,r4,25bf0 <__alt_data_end+0xfffe5bf0>
   25c80:	003fc906 	br	25ba8 <__alt_data_end+0xfffe5ba8>
   25c84:	00800034 	movhi	r2,0
   25c88:	10800004 	addi	r2,r2,0
   25c8c:	10000f26 	beq	r2,zero,25ccc <__call_exitprocs+0x160>
   25c90:	99400117 	ldw	r5,4(r19)
   25c94:	99000017 	ldw	r4,0(r19)
   25c98:	2800091e 	bne	r5,zero,25cc0 <__call_exitprocs+0x154>
   25c9c:	20000826 	beq	r4,zero,25cc0 <__call_exitprocs+0x154>
   25ca0:	89000015 	stw	r4,0(r17)
   25ca4:	a8000226 	beq	r21,zero,25cb0 <__call_exitprocs+0x144>
   25ca8:	a809883a 	mov	r4,r21
   25cac:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   25cb0:	9809883a 	mov	r4,r19
   25cb4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   25cb8:	8cc00017 	ldw	r19,0(r17)
   25cbc:	003fbd06 	br	25bb4 <__alt_data_end+0xfffe5bb4>
   25cc0:	9823883a 	mov	r17,r19
   25cc4:	2027883a 	mov	r19,r4
   25cc8:	003fba06 	br	25bb4 <__alt_data_end+0xfffe5bb4>
   25ccc:	dfc00a17 	ldw	ra,40(sp)
   25cd0:	df000917 	ldw	fp,36(sp)
   25cd4:	ddc00817 	ldw	r23,32(sp)
   25cd8:	dd800717 	ldw	r22,28(sp)
   25cdc:	dd400617 	ldw	r21,24(sp)
   25ce0:	dd000517 	ldw	r20,20(sp)
   25ce4:	dcc00417 	ldw	r19,16(sp)
   25ce8:	dc800317 	ldw	r18,12(sp)
   25cec:	dc400217 	ldw	r17,8(sp)
   25cf0:	dc000117 	ldw	r16,4(sp)
   25cf4:	dec00b04 	addi	sp,sp,44
   25cf8:	f800283a 	ret

00025cfc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   25cfc:	defffd04 	addi	sp,sp,-12
   25d00:	df000215 	stw	fp,8(sp)
   25d04:	df000204 	addi	fp,sp,8
   25d08:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   25d0c:	0001883a 	nop
   25d10:	e0bfff17 	ldw	r2,-4(fp)
   25d14:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   25d18:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   25d1c:	10000226 	beq	r2,zero,25d28 <_exit+0x2c>
    ALT_SIM_FAIL();
   25d20:	002af070 	cmpltui	zero,zero,43969
   25d24:	00000106 	br	25d2c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   25d28:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   25d2c:	003fff06 	br	25d2c <__alt_data_end+0xfffe5d2c>
