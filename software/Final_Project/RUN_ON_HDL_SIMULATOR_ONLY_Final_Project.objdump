
RUN_ON_HDL_SIMULATOR_ONLY_Final_Project.elf:     file format elf32-littlenios2
RUN_ON_HDL_SIMULATOR_ONLY_Final_Project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0000f9f4 memsz 0x0000f9f4 flags r-x
    LOAD off    0x00010a14 vaddr 0x0002fa14 paddr 0x0002fd44 align 2**12
         filesz 0x00000330 memsz 0x00000330 flags rw-
    LOAD off    0x00011074 vaddr 0x00030074 paddr 0x00030074 align 2**12
         filesz 0x00000000 memsz 0x0000052c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009da8  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00005a3c  00029fd8  00029fd8  0000afd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000330  0002fa14  0002fd44  00010a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000052c  00030074  00030074  00011074  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000305a0  000305a0  00010d44  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00010d44  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000009b0  00000000  00000000  00010d68  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000f98a  00000000  00000000  00011718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004dcf  00000000  00000000  000210a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000060be  00000000  00000000  00025e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001eb4  00000000  00000000  0002bf30  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000387f  00000000  00000000  0002dde4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008b29  00000000  00000000  00031663  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d38  00000000  00000000  0003a190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0003de02  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0003de05  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0003de11  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003de12  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  0003de13  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  0003de1e  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  0003de29  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000006  00000000  00000000  0003de34  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000026  00000000  00000000  0003de3a  2**0
                  CONTENTS, READONLY
 25 .jdi          000062da  00000000  00000000  0003de60  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0003270d  00000000  00000000  0004413a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00029fd8 l    d  .rodata	00000000 .rodata
0002fa14 l    d  .rwdata	00000000 .rwdata
00030074 l    d  .bss	00000000 .bss
000305a0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Final_Project_bsp//obj/HAL/src/crt0.o
00020248 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 DS1307.c
00000000 l    df *ABS*	00000000 SH1106.c
000300a0 l     O .bss	00000400 SH1106_Buffer
00030074 l     O .bss	00000006 SH1106
00000000 l    df *ABS*	00000000 fonts.c
00000000 l    df *ABS*	00000000 source.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00025c84 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
00026238 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
0002fa14 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00026a04 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00026b9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00026cd8 l     F .text	00000034 alt_dev_reg
0002faf4 l     O .rwdata	00000038 i2c_0
0002fb2c l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00026d84 l     F .text	00000110 optional_irq_callback
00026ee4 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00028c00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00028d34 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00028d60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00029250 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000293b0 l     F .text	0000003c alt_get_errno
000293ec l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0003009c g     O .bss	00000004 alt_instruction_exception_handler
00020470 g     F .text	00000064 DS1307_SetInterruptRate
00020404 g     F .text	0000006c DS1307_SetEnableSquareWave
00026af0 g     F .text	0000007c alt_main
000206b8 g     F .text	0000002c DS1307_GetTimeZoneMin
00025af8 g     F .text	00000080 _puts_r
000304a0 g     O .bss	00000100 alt_irq
000210dc g     F .text	000000b8 SH1106_Puts
0002fd44 g       *ABS*	00000000 __flash_rwdata_start
00025aac g     F .text	0000004c printf
0002e3ec g     O .rodata	00000400 horse6
000275dc g     F .text	000000a8 alt_avalon_i2c_rx_read
0002f3ec g     O .rodata	00000400 horse10
00022c58 g     F .text	00000440 .hidden __divsf3
000209ec g     F .text	00000060 DS1307_EncodeBCD
000287f4 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00027360 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
0002024c g     F .text	00000030 DS1307_Init
0002694c g     F .text	00000060 memmove
00028044 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00023a68 g     F .text	00000070 .hidden __fixsfsi
00022150 g     F .text	000000cc SH1106_I2C_WriteMulti
00029920 g     F .text	00000024 altera_nios2_gen2_irq_init
000268a4 g     F .text	000000a8 __sfvwrite_small_str
00020000 g     F .entry	0000000c __reset
000222ec g     F .text	00000164 SH1106_DrawBitmap
0002099c g     F .text	00000050 DS1307_DecodeBCD
00020020 g       *ABS*	00000000 __flash_exceptions_start
00021194 g     F .text	00000320 SH1106_DrawLine
00022294 g     F .text	00000058 SH1106_InvertDisplay
00030088 g     O .bss	00000004 errno
000220f8 g     F .text	00000058 SH1106_OFF
00030090 g     O .bss	00000004 alt_argv
000224cc g     F .text	00000058 I2C0_Init
00037d00 g       *ABS*	00000000 _gp
00026b6c g     F .text	00000030 usleep
00028838 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00023584 g     F .text	000004e4 .hidden __subsf3
000274f0 g     F .text	00000044 alt_avalon_i2c_is_busy
0002fb80 g     O .rwdata	00000180 alt_fd_list
0002057c g     F .text	00000060 DS1307_GetYear
000214b4 g     F .text	00000190 SH1106_DrawRectangle
00027294 g     F .text	000000cc alt_avalon_i2c_master_config_set
00028f00 g     F .text	00000090 alt_find_dev
0002fd10 g     O .rwdata	00000008 Font_16x26
00029334 g     F .text	0000007c alt_io_redirect
00029fd8 g       *ABS*	00000000 __DTOR_END__
00027e84 g     F .text	000001c0 alt_avalon_i2c_master_transmit
00025b78 g     F .text	00000014 puts
00029b10 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00028a5c g     F .text	000000ec altera_avalon_jtag_uart_read
00025a70 g     F .text	0000003c _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00022b74 g     F .text	00000064 .hidden __udivsi3
00020544 g     F .text	00000038 DS1307_GetMonth
00027100 g     F .text	00000098 alt_avalon_i2c_enable
000202ec g     F .text	00000034 DS1307_GetClockHalt
00028728 g     F .text	00000068 alt_avalon_i2c_int_disable
0003007c g     O .bss	00000004 Temp
0002efec g     O .rodata	00000400 horse9
0002fd38 g     O .rwdata	00000004 alt_max_fd
00028250 g     F .text	00000210 alt_avalon_i2c_master_receive
00025734 g     F .text	00000110 .hidden __extendsfdf2
00028790 g     F .text	00000064 alt_avalon_i2c_int_enable
0002fd18 g     O .rwdata	00000004 _global_impure_ptr
0002a744 g     O .rodata	00000d5c Font11x18
000305a0 g       *ABS*	00000000 __bss_end
00029160 g     F .text	000000f0 alt_iic_isr_register
00021644 g     F .text	00000114 SH1106_DrawFilledRectangle
00028650 g     F .text	00000058 alt_avalon_i2c_int_status_get
0002ebec g     O .rodata	00000400 horse8
00029114 g     F .text	0000004c alt_ic_irq_enabled
00026f80 g     F .text	00000054 alt_avalon_i2c_register_callback
00030098 g     O .bss	00000004 alt_irq_active
00026fd4 g     F .text	000000ec alt_avalon_i2c_init
00022524 g     F .text	000002c8 AHT20_Read
000200fc g     F .exceptions	000000d4 alt_irq_handler
0002fb58 g     O .rwdata	00000028 alt_dev_null
000220a0 g     F .text	00000058 SH1106_ON
000205dc g     F .text	0000003c DS1307_GetHour
000204d4 g     F .text	00000038 DS1307_GetDayOfWeek
00028d14 g     F .text	00000020 alt_dcache_flush_all
0002068c g     F .text	0000002c DS1307_GetTimeZoneHour
0002fd44 g       *ABS*	00000000 __ram_rwdata_end
0002fd30 g     O .rwdata	00000008 alt_dev_list
00026bd8 g     F .text	00000100 write
00029c64 g     F .text	00000058 _putc_r
00027910 g     F .text	0000004c alt_avalon_i2c_check_arblost
00023098 g     F .text	000000bc .hidden __gtsf2
000286ec g     F .text	0000003c alt_avalon_i2c_int_clear
0002fa14 g       *ABS*	00000000 __ram_rodata_end
00020618 g     F .text	00000038 DS1307_GetMinute
0002fd20 g     O .rwdata	00000008 alt_avalon_i2c_list
0002077c g     F .text	0000004c DS1307_SetMonth
0002dfec g     O .rodata	00000400 horse5
00020d3c g     F .text	00000054 SH1106_Fill
00022bd8 g     F .text	00000058 .hidden __umodsi3
0002221c g     F .text	00000078 SH1106_I2C_Write
000305a0 g       *ABS*	00000000 end
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000270c0 g     F .text	00000040 alt_avalon_i2c_open
00030080 g     O .bss	00000004 Humid
00029fd8 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
00027a98 g     F .text	000000e8 alt_avalon_i2c_master_tx
000259ec g     F .text	00000064 .hidden __clzsi2
00028b48 g     F .text	00000094 altera_avalon_jtag_uart_write
000262a4 g     F .text	0000052c ___vfprintf_internal_r
00025b8c g     F .text	00000064 _sprintf_r
00029634 g     F .text	0000022c alt_printf
00020320 g     F .text	00000070 DS1307_SetRegByte
00029e14 g     F .text	00000190 __call_exitprocs
00026e94 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00020230 g     F .text	0000001c _start
0002050c g     F .text	00000038 DS1307_GetDate
00028460 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
00028884 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
000206e4 g     F .text	0000004c DS1307_SetDayOfWeek
00026d44 g     F .text	00000040 alt_sys_init
00023ad8 g     F .text	00000124 .hidden __floatsisf
00029cbc g     F .text	00000158 __register_exitproc
00027cbc g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
0002d3ec g     O .rodata	00000400 horse2
00021d70 g     F .text	000002fc SH1106_DrawFilledCircle
00022c30 g     F .text	00000028 .hidden __mulsi3
0002fa14 g       *ABS*	00000000 __ram_rwdata_start
00029fd8 g       *ABS*	00000000 __ram_rodata_start
00020ee0 g     F .text	00000040 SH1106_GotoXY
0002899c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00029a4c g     F .text	000000c4 alt_get_fd
00028bdc g     F .text	00000024 alt_busy_sleep
0002d7ec g     O .rodata	00000400 horse3
0002cbec g     O .rodata	00000400 LOGO_BW_map
00029be0 g     F .text	00000030 memcmp
00027534 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
000305a0 g       *ABS*	00000000 __alt_stack_base
00030084 g     O .bss	00000004 i2c_dev
00023bfc g     F .text	000009d0 .hidden __divdf3
000245cc g     F .text	0000086c .hidden __muldf3
00020a4c g     F .text	000001c4 SH1106_Init
00029944 g     F .text	00000108 alt_find_file
00029fd8 g     O .rodata	0000076c Font7x10
00028d9c g     F .text	000000a4 alt_dev_llist_insert
00025cf0 g     F .text	0000052c ___svfprintf_internal_r
0002795c g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
000278c4 g     F .text	0000004c alt_avalon_i2c_check_nack
000267ec g     F .text	000000b8 __sfvwrite_small_dev
00030074 g       *ABS*	00000000 __bss_start
00025a50 g     F .text	00000020 memset
000227ec g     F .text	00000230 main
00027890 g     F .text	00000034 alt_avalon_i2c_master_target_set
00030094 g     O .bss	00000004 alt_envp
000289fc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000286a8 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00025844 g     F .text	000001a8 .hidden __truncdfsf2
00021834 g     F .text	00000264 SH1106_DrawFilledTriangle
0002fd3c g     O .rwdata	00000004 alt_errno
00020390 g     F .text	00000074 DS1307_GetRegByte
00029c10 g     F .text	00000054 putc
00022a7c g     F .text	00000084 .hidden __divsi3
00020c10 g     F .text	000000ac SH1106_UpdateScreen
00029fd8 g       *ABS*	00000000 __CTOR_END__
00023154 g     F .text	00000430 .hidden __mulsf3
00020894 g     F .text	0000004c DS1307_SetMinute
00029fd8 g       *ABS*	00000000 __flash_rodata_start
00029fd8 g       *ABS*	00000000 __DTOR_LIST__
00021758 g     F .text	000000dc SH1106_DrawTriangle
00026d0c g     F .text	00000038 alt_irq_init
0002989c g     F .text	00000084 alt_release_fd
00025bf0 g     F .text	00000078 sprintf
0002f8ae g     O .rodata	00000100 .hidden __clz_tab
0002e7ec g     O .rodata	00000400 horse7
00020844 g     F .text	00000050 DS1307_SetHour
00029bac g     F .text	00000014 atexit
00023098 g     F .text	000000bc .hidden __gesf2
000269ac g     F .text	00000058 _write_r
00020730 g     F .text	0000004c DS1307_SetDate
00020940 g     F .text	0000005c DS1307_SetTimeZone
0002fd1c g     O .rwdata	00000004 _impure_ptr
0003008c g     O .bss	00000004 alt_argc
00028ea0 g     F .text	00000060 _do_dtors
00027858 g     F .text	00000038 alt_avalon_i2c_master_target_get
00027768 g     F .text	000000f0 alt_avalon_i2c_send_address
000207c8 g     F .text	0000007c DS1307_SetYear
00020020 g       .exceptions	00000000 alt_irq_entry
0002fd00 g     O .rwdata	00000008 Font_7x10
0002fd28 g     O .rwdata	00000008 alt_fs_list
0002621c g     F .text	0000001c __vfprintf_internal_unused
0002206c g     F .text	00000034 SH1106_Clear
00020020 g       *ABS*	00000000 __ram_exceptions_start
00020650 g     F .text	0000003c DS1307_GetSecond
00028934 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00028fb0 g     F .text	00000050 alt_ic_isr_register
00027198 g     F .text	0000004c alt_avalon_i2c_disable
0002fd44 g       *ABS*	00000000 _edata
000305a0 g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
0002b4a0 g     O .rodata	0000134c Font16x26
000271e4 g     F .text	000000b0 alt_avalon_i2c_master_config_get
00021a98 g     F .text	000002d8 SH1106_DrawCircle
00029088 g     F .text	0000008c alt_ic_irq_disable
00029bc0 g     F .text	00000020 exit
00020cbc g     F .text	00000080 SH1106_ToggleInvert
00022b00 g     F .text	00000074 .hidden __modsi3
0002fd08 g     O .rwdata	00000008 Font_11x18
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000273f4 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00027684 g     F .text	000000e4 alt_avalon_i2c_cmd_write
00022a1c g     F .text	00000060 .hidden __fixunssfsi
00022450 g     F .text	0000007c FONTS_GetStringSize
0002dbec g     O .rodata	00000400 horse4
00029fa4 g     F .text	00000034 _exit
00020f20 g     F .text	000001bc SH1106_Putc
00025c68 g     F .text	0000001c strlen
000294d8 g     F .text	0000015c open
0002cfec g     O .rodata	00000400 horse1
00029860 g     F .text	0000003c alt_putchar
00028f90 g     F .text	00000020 alt_icache_flush_all
00020d90 g     F .text	00000150 SH1106_DrawPixel
0002fd40 g     O .rwdata	00000004 alt_priority_mask
000208e0 g     F .text	00000060 DS1307_SetSecond
00029000 g     F .text	00000088 alt_ic_irq_enable
000267d0 g     F .text	0000001c __vfprintf_internal
00024e38 g     F .text	000008fc .hidden __subdf3
00028e40 g     F .text	00000060 _do_ctors
00028c3c g     F .text	000000d8 close
000288e8 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0002c7ec g     O .rodata	00000400 logo
00026a6c g     F .text	00000084 alt_load
00027b80 g     F .text	0000013c alt_avalon_i2c_master_rx
0002027c g     F .text	00000070 DS1307_SetClockHalt



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10812804 	addi	r2,r2,1184
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10812804 	addi	r2,r2,1184
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a0e717 	ldw	r2,-31844(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a0e717 	ldw	r2,-31844(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2023c:	d69f4014 	ori	gp,gp,32000
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20240:	0026a6c0 	call	26a6c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20244:	0026af00 	call	26af0 <alt_main>

00020248 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20248:	003fff06 	br	20248 <__alt_data_end+0xfffe0248>

0002024c <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init() {
   2024c:	defffe04 	addi	sp,sp,-8
   20250:	dfc00115 	stw	ra,4(sp)
   20254:	df000015 	stw	fp,0(sp)
   20258:	d839883a 	mov	fp,sp
	DS1307_SetClockHalt(0);
   2025c:	0009883a 	mov	r4,zero
   20260:	002027c0 	call	2027c <DS1307_SetClockHalt>
}
   20264:	0001883a 	nop
   20268:	e037883a 	mov	sp,fp
   2026c:	dfc00117 	ldw	ra,4(sp)
   20270:	df000017 	ldw	fp,0(sp)
   20274:	dec00204 	addi	sp,sp,8
   20278:	f800283a 	ret

0002027c <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
   2027c:	defffc04 	addi	sp,sp,-16
   20280:	dfc00315 	stw	ra,12(sp)
   20284:	df000215 	stw	fp,8(sp)
   20288:	df000204 	addi	fp,sp,8
   2028c:	2005883a 	mov	r2,r4
   20290:	e0bfff05 	stb	r2,-4(fp)
	uint8_t ch = (halt ? 1 << 7 : 0);
   20294:	e0bfff03 	ldbu	r2,-4(fp)
   20298:	10000226 	beq	r2,zero,202a4 <DS1307_SetClockHalt+0x28>
   2029c:	00bfe004 	movi	r2,-128
   202a0:	00000106 	br	202a8 <DS1307_SetClockHalt+0x2c>
   202a4:	0005883a 	mov	r2,zero
   202a8:	e0bffe05 	stb	r2,-8(fp)
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
   202ac:	0009883a 	mov	r4,zero
   202b0:	00203900 	call	20390 <DS1307_GetRegByte>
   202b4:	10801fcc 	andi	r2,r2,127
   202b8:	1007883a 	mov	r3,r2
   202bc:	e0bffe03 	ldbu	r2,-8(fp)
   202c0:	1884b03a 	or	r2,r3,r2
   202c4:	10803fcc 	andi	r2,r2,255
   202c8:	100b883a 	mov	r5,r2
   202cc:	0009883a 	mov	r4,zero
   202d0:	00203200 	call	20320 <DS1307_SetRegByte>
}
   202d4:	0001883a 	nop
   202d8:	e037883a 	mov	sp,fp
   202dc:	dfc00117 	ldw	ra,4(sp)
   202e0:	df000017 	ldw	fp,0(sp)
   202e4:	dec00204 	addi	sp,sp,8
   202e8:	f800283a 	ret

000202ec <DS1307_GetClockHalt>:

/**
 * @brief Gets clock halt bit.
 * @return Clock halt bit, 0 or 1.
 */
uint8_t DS1307_GetClockHalt(void) {
   202ec:	defffe04 	addi	sp,sp,-8
   202f0:	dfc00115 	stw	ra,4(sp)
   202f4:	df000015 	stw	fp,0(sp)
   202f8:	d839883a 	mov	fp,sp
	return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
   202fc:	0009883a 	mov	r4,zero
   20300:	00203900 	call	20390 <DS1307_GetRegByte>
   20304:	10803fcc 	andi	r2,r2,255
   20308:	1004d1fa 	srli	r2,r2,7
}
   2030c:	e037883a 	mov	sp,fp
   20310:	dfc00117 	ldw	ra,4(sp)
   20314:	df000017 	ldw	fp,0(sp)
   20318:	dec00204 	addi	sp,sp,8
   2031c:	f800283a 	ret

00020320 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
   20320:	defffb04 	addi	sp,sp,-20
   20324:	dfc00415 	stw	ra,16(sp)
   20328:	df000315 	stw	fp,12(sp)
   2032c:	df000304 	addi	fp,sp,12
   20330:	2007883a 	mov	r3,r4
   20334:	2805883a 	mov	r2,r5
   20338:	e0fffe05 	stb	r3,-8(fp)
   2033c:	e0bfff05 	stb	r2,-4(fp)
	uint8_t bytes[2] = { regAddr, val };
   20340:	e0bffe03 	ldbu	r2,-8(fp)
   20344:	e0bffd05 	stb	r2,-12(fp)
   20348:	e0bfff03 	ldbu	r2,-4(fp)
   2034c:	e0bffd45 	stb	r2,-11(fp)
	alt_avalon_i2c_master_target_set(DS1307_I2C,DS1307_I2C_ADDR);
   20350:	d0a0e117 	ldw	r2,-31868(gp)
   20354:	01401a04 	movi	r5,104
   20358:	1009883a 	mov	r4,r2
   2035c:	00278900 	call	27890 <alt_avalon_i2c_master_target_set>
	alt_avalon_i2c_master_tx(DS1307_I2C, bytes, 2,
   20360:	d0a0e117 	ldw	r2,-31868(gp)
   20364:	000f883a 	mov	r7,zero
   20368:	01800084 	movi	r6,2
   2036c:	e17ffd04 	addi	r5,fp,-12
   20370:	1009883a 	mov	r4,r2
   20374:	0027a980 	call	27a98 <alt_avalon_i2c_master_tx>
					ALT_AVALON_I2C_NO_INTERRUPTS);
}
   20378:	0001883a 	nop
   2037c:	e037883a 	mov	sp,fp
   20380:	dfc00117 	ldw	ra,4(sp)
   20384:	df000017 	ldw	fp,0(sp)
   20388:	dec00204 	addi	sp,sp,8
   2038c:	f800283a 	ret

00020390 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
   20390:	defffc04 	addi	sp,sp,-16
   20394:	dfc00315 	stw	ra,12(sp)
   20398:	df000215 	stw	fp,8(sp)
   2039c:	df000204 	addi	fp,sp,8
   203a0:	2005883a 	mov	r2,r4
   203a4:	e0bfff05 	stb	r2,-4(fp)
	uint8_t val;
	alt_avalon_i2c_master_target_set(DS1307_I2C,DS1307_I2C_ADDR);
   203a8:	d0a0e117 	ldw	r2,-31868(gp)
   203ac:	01401a04 	movi	r5,104
   203b0:	1009883a 	mov	r4,r2
   203b4:	00278900 	call	27890 <alt_avalon_i2c_master_target_set>
	alt_avalon_i2c_master_tx(DS1307_I2C, &regAddr, 1,
   203b8:	d0a0e117 	ldw	r2,-31868(gp)
   203bc:	e0ffff04 	addi	r3,fp,-4
   203c0:	000f883a 	mov	r7,zero
   203c4:	01800044 	movi	r6,1
   203c8:	180b883a 	mov	r5,r3
   203cc:	1009883a 	mov	r4,r2
   203d0:	0027a980 	call	27a98 <alt_avalon_i2c_master_tx>
					ALT_AVALON_I2C_NO_INTERRUPTS);
	alt_avalon_i2c_master_rx(DS1307_I2C, &val, 1,
   203d4:	d0a0e117 	ldw	r2,-31868(gp)
   203d8:	000f883a 	mov	r7,zero
   203dc:	01800044 	movi	r6,1
   203e0:	e17ffe04 	addi	r5,fp,-8
   203e4:	1009883a 	mov	r4,r2
   203e8:	0027b800 	call	27b80 <alt_avalon_i2c_master_rx>
	       								ALT_AVALON_I2C_NO_INTERRUPTS);
	return val;
   203ec:	e0bffe03 	ldbu	r2,-8(fp)
}
   203f0:	e037883a 	mov	sp,fp
   203f4:	dfc00117 	ldw	ra,4(sp)
   203f8:	df000017 	ldw	fp,0(sp)
   203fc:	dec00204 	addi	sp,sp,8
   20400:	f800283a 	ret

00020404 <DS1307_SetEnableSquareWave>:

/**
 * @brief Toggle square wave output on pin 7.
 * @param mode DS1307_ENABLED (1) or DS1307_DISABLED (0);
 */
void DS1307_SetEnableSquareWave(DS1307_SquareWaveEnable mode){
   20404:	defffc04 	addi	sp,sp,-16
   20408:	dfc00315 	stw	ra,12(sp)
   2040c:	df000215 	stw	fp,8(sp)
   20410:	df000204 	addi	fp,sp,8
   20414:	e13fff15 	stw	r4,-4(fp)
	uint8_t controlReg = DS1307_GetRegByte(DS1307_REG_CONTROL);
   20418:	010001c4 	movi	r4,7
   2041c:	00203900 	call	20390 <DS1307_GetRegByte>
   20420:	e0bffe05 	stb	r2,-8(fp)
	uint8_t newControlReg = (controlReg & ~(1 << 4)) | ((mode & 1) << 4);
   20424:	e0fffe03 	ldbu	r3,-8(fp)
   20428:	00bffbc4 	movi	r2,-17
   2042c:	1884703a 	and	r2,r3,r2
   20430:	1007883a 	mov	r3,r2
   20434:	e0bfff17 	ldw	r2,-4(fp)
   20438:	1080004c 	andi	r2,r2,1
   2043c:	1004913a 	slli	r2,r2,4
   20440:	1884b03a 	or	r2,r3,r2
   20444:	e0bffe45 	stb	r2,-7(fp)
	DS1307_SetRegByte(DS1307_REG_CONTROL, newControlReg);
   20448:	e0bffe43 	ldbu	r2,-7(fp)
   2044c:	100b883a 	mov	r5,r2
   20450:	010001c4 	movi	r4,7
   20454:	00203200 	call	20320 <DS1307_SetRegByte>
}
   20458:	0001883a 	nop
   2045c:	e037883a 	mov	sp,fp
   20460:	dfc00117 	ldw	ra,4(sp)
   20464:	df000017 	ldw	fp,0(sp)
   20468:	dec00204 	addi	sp,sp,8
   2046c:	f800283a 	ret

00020470 <DS1307_SetInterruptRate>:

/**
 * @brief Set square wave output frequency.
 * @param rate DS1307_1HZ (0b00), DS1307_4096HZ (0b01), DS1307_8192HZ (0b10) or DS1307_32768HZ (0b11).
 */
void DS1307_SetInterruptRate(DS1307_Rate rate){
   20470:	defffc04 	addi	sp,sp,-16
   20474:	dfc00315 	stw	ra,12(sp)
   20478:	df000215 	stw	fp,8(sp)
   2047c:	df000204 	addi	fp,sp,8
   20480:	e13fff15 	stw	r4,-4(fp)
	uint8_t controlReg = DS1307_GetRegByte(DS1307_REG_CONTROL);
   20484:	010001c4 	movi	r4,7
   20488:	00203900 	call	20390 <DS1307_GetRegByte>
   2048c:	e0bffe05 	stb	r2,-8(fp)
	uint8_t newControlReg = (controlReg & ~0x03) | rate;
   20490:	e0fffe03 	ldbu	r3,-8(fp)
   20494:	00bfff04 	movi	r2,-4
   20498:	1884703a 	and	r2,r3,r2
   2049c:	1007883a 	mov	r3,r2
   204a0:	e0bfff17 	ldw	r2,-4(fp)
   204a4:	1884b03a 	or	r2,r3,r2
   204a8:	e0bffe45 	stb	r2,-7(fp)
	DS1307_SetRegByte(DS1307_REG_CONTROL, newControlReg);
   204ac:	e0bffe43 	ldbu	r2,-7(fp)
   204b0:	100b883a 	mov	r5,r2
   204b4:	010001c4 	movi	r4,7
   204b8:	00203200 	call	20320 <DS1307_SetRegByte>
}
   204bc:	0001883a 	nop
   204c0:	e037883a 	mov	sp,fp
   204c4:	dfc00117 	ldw	ra,4(sp)
   204c8:	df000017 	ldw	fp,0(sp)
   204cc:	dec00204 	addi	sp,sp,8
   204d0:	f800283a 	ret

000204d4 <DS1307_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS1307_GetDayOfWeek(void) {
   204d4:	defffe04 	addi	sp,sp,-8
   204d8:	dfc00115 	stw	ra,4(sp)
   204dc:	df000015 	stw	fp,0(sp)
   204e0:	d839883a 	mov	fp,sp
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
   204e4:	010000c4 	movi	r4,3
   204e8:	00203900 	call	20390 <DS1307_GetRegByte>
   204ec:	10803fcc 	andi	r2,r2,255
   204f0:	1009883a 	mov	r4,r2
   204f4:	002099c0 	call	2099c <DS1307_DecodeBCD>
}
   204f8:	e037883a 	mov	sp,fp
   204fc:	dfc00117 	ldw	ra,4(sp)
   20500:	df000017 	ldw	fp,0(sp)
   20504:	dec00204 	addi	sp,sp,8
   20508:	f800283a 	ret

0002050c <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
   2050c:	defffe04 	addi	sp,sp,-8
   20510:	dfc00115 	stw	ra,4(sp)
   20514:	df000015 	stw	fp,0(sp)
   20518:	d839883a 	mov	fp,sp
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
   2051c:	01000104 	movi	r4,4
   20520:	00203900 	call	20390 <DS1307_GetRegByte>
   20524:	10803fcc 	andi	r2,r2,255
   20528:	1009883a 	mov	r4,r2
   2052c:	002099c0 	call	2099c <DS1307_DecodeBCD>
}
   20530:	e037883a 	mov	sp,fp
   20534:	dfc00117 	ldw	ra,4(sp)
   20538:	df000017 	ldw	fp,0(sp)
   2053c:	dec00204 	addi	sp,sp,8
   20540:	f800283a 	ret

00020544 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
   20544:	defffe04 	addi	sp,sp,-8
   20548:	dfc00115 	stw	ra,4(sp)
   2054c:	df000015 	stw	fp,0(sp)
   20550:	d839883a 	mov	fp,sp
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
   20554:	01000144 	movi	r4,5
   20558:	00203900 	call	20390 <DS1307_GetRegByte>
   2055c:	10803fcc 	andi	r2,r2,255
   20560:	1009883a 	mov	r4,r2
   20564:	002099c0 	call	2099c <DS1307_DecodeBCD>
}
   20568:	e037883a 	mov	sp,fp
   2056c:	dfc00117 	ldw	ra,4(sp)
   20570:	df000017 	ldw	fp,0(sp)
   20574:	dec00204 	addi	sp,sp,8
   20578:	f800283a 	ret

0002057c <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
   2057c:	defffd04 	addi	sp,sp,-12
   20580:	dfc00215 	stw	ra,8(sp)
   20584:	df000115 	stw	fp,4(sp)
   20588:	df000104 	addi	fp,sp,4
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
   2058c:	01000404 	movi	r4,16
   20590:	00203900 	call	20390 <DS1307_GetRegByte>
   20594:	10803fcc 	andi	r2,r2,255
   20598:	01401904 	movi	r5,100
   2059c:	1009883a 	mov	r4,r2
   205a0:	0022c300 	call	22c30 <__mulsi3>
   205a4:	e0bfff0d 	sth	r2,-4(fp)
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
   205a8:	01000184 	movi	r4,6
   205ac:	00203900 	call	20390 <DS1307_GetRegByte>
   205b0:	10803fcc 	andi	r2,r2,255
   205b4:	1009883a 	mov	r4,r2
   205b8:	002099c0 	call	2099c <DS1307_DecodeBCD>
   205bc:	10c03fcc 	andi	r3,r2,255
   205c0:	e0bfff0b 	ldhu	r2,-4(fp)
   205c4:	1885883a 	add	r2,r3,r2
}
   205c8:	e037883a 	mov	sp,fp
   205cc:	dfc00117 	ldw	ra,4(sp)
   205d0:	df000017 	ldw	fp,0(sp)
   205d4:	dec00204 	addi	sp,sp,8
   205d8:	f800283a 	ret

000205dc <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
   205dc:	defffe04 	addi	sp,sp,-8
   205e0:	dfc00115 	stw	ra,4(sp)
   205e4:	df000015 	stw	fp,0(sp)
   205e8:	d839883a 	mov	fp,sp
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
   205ec:	01000084 	movi	r4,2
   205f0:	00203900 	call	20390 <DS1307_GetRegByte>
   205f4:	10803fcc 	andi	r2,r2,255
   205f8:	10800fcc 	andi	r2,r2,63
   205fc:	1009883a 	mov	r4,r2
   20600:	002099c0 	call	2099c <DS1307_DecodeBCD>
}
   20604:	e037883a 	mov	sp,fp
   20608:	dfc00117 	ldw	ra,4(sp)
   2060c:	df000017 	ldw	fp,0(sp)
   20610:	dec00204 	addi	sp,sp,8
   20614:	f800283a 	ret

00020618 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
   20618:	defffe04 	addi	sp,sp,-8
   2061c:	dfc00115 	stw	ra,4(sp)
   20620:	df000015 	stw	fp,0(sp)
   20624:	d839883a 	mov	fp,sp
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
   20628:	01000044 	movi	r4,1
   2062c:	00203900 	call	20390 <DS1307_GetRegByte>
   20630:	10803fcc 	andi	r2,r2,255
   20634:	1009883a 	mov	r4,r2
   20638:	002099c0 	call	2099c <DS1307_DecodeBCD>
}
   2063c:	e037883a 	mov	sp,fp
   20640:	dfc00117 	ldw	ra,4(sp)
   20644:	df000017 	ldw	fp,0(sp)
   20648:	dec00204 	addi	sp,sp,8
   2064c:	f800283a 	ret

00020650 <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
   20650:	defffe04 	addi	sp,sp,-8
   20654:	dfc00115 	stw	ra,4(sp)
   20658:	df000015 	stw	fp,0(sp)
   2065c:	d839883a 	mov	fp,sp
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
   20660:	0009883a 	mov	r4,zero
   20664:	00203900 	call	20390 <DS1307_GetRegByte>
   20668:	10803fcc 	andi	r2,r2,255
   2066c:	10801fcc 	andi	r2,r2,127
   20670:	1009883a 	mov	r4,r2
   20674:	002099c0 	call	2099c <DS1307_DecodeBCD>
}
   20678:	e037883a 	mov	sp,fp
   2067c:	dfc00117 	ldw	ra,4(sp)
   20680:	df000017 	ldw	fp,0(sp)
   20684:	dec00204 	addi	sp,sp,8
   20688:	f800283a 	ret

0002068c <DS1307_GetTimeZoneHour>:
/**
 * @brief Gets the stored UTC hour offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC hour offset, -12 to 12.
 */
int8_t DS1307_GetTimeZoneHour(void) {
   2068c:	defffe04 	addi	sp,sp,-8
   20690:	dfc00115 	stw	ra,4(sp)
   20694:	df000015 	stw	fp,0(sp)
   20698:	d839883a 	mov	fp,sp
	return DS1307_GetRegByte(DS1307_REG_UTC_HR);
   2069c:	01000204 	movi	r4,8
   206a0:	00203900 	call	20390 <DS1307_GetRegByte>
}
   206a4:	e037883a 	mov	sp,fp
   206a8:	dfc00117 	ldw	ra,4(sp)
   206ac:	df000017 	ldw	fp,0(sp)
   206b0:	dec00204 	addi	sp,sp,8
   206b4:	f800283a 	ret

000206b8 <DS1307_GetTimeZoneMin>:
/**
 * @brief Gets the stored UTC minute offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC time zone, 0 to 59.
 */
uint8_t DS1307_GetTimeZoneMin(void) {
   206b8:	defffe04 	addi	sp,sp,-8
   206bc:	dfc00115 	stw	ra,4(sp)
   206c0:	df000015 	stw	fp,0(sp)
   206c4:	d839883a 	mov	fp,sp
	return DS1307_GetRegByte(DS1307_REG_UTC_MIN);
   206c8:	01000244 	movi	r4,9
   206cc:	00203900 	call	20390 <DS1307_GetRegByte>
}
   206d0:	e037883a 	mov	sp,fp
   206d4:	dfc00117 	ldw	ra,4(sp)
   206d8:	df000017 	ldw	fp,0(sp)
   206dc:	dec00204 	addi	sp,sp,8
   206e0:	f800283a 	ret

000206e4 <DS1307_SetDayOfWeek>:

/**
 * @brief Sets the current day of week.
 * @param dayOfWeek Days since last Sunday, 0 to 6.
 */
void DS1307_SetDayOfWeek(uint8_t dayOfWeek) {
   206e4:	defffd04 	addi	sp,sp,-12
   206e8:	dfc00215 	stw	ra,8(sp)
   206ec:	df000115 	stw	fp,4(sp)
   206f0:	df000104 	addi	fp,sp,4
   206f4:	2005883a 	mov	r2,r4
   206f8:	e0bfff05 	stb	r2,-4(fp)
	DS1307_SetRegByte(DS1307_REG_DOW, DS1307_EncodeBCD(dayOfWeek));
   206fc:	e0bfff03 	ldbu	r2,-4(fp)
   20700:	1009883a 	mov	r4,r2
   20704:	00209ec0 	call	209ec <DS1307_EncodeBCD>
   20708:	10803fcc 	andi	r2,r2,255
   2070c:	100b883a 	mov	r5,r2
   20710:	010000c4 	movi	r4,3
   20714:	00203200 	call	20320 <DS1307_SetRegByte>
}
   20718:	0001883a 	nop
   2071c:	e037883a 	mov	sp,fp
   20720:	dfc00117 	ldw	ra,4(sp)
   20724:	df000017 	ldw	fp,0(sp)
   20728:	dec00204 	addi	sp,sp,8
   2072c:	f800283a 	ret

00020730 <DS1307_SetDate>:

/**
 * @brief Sets the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS1307_SetDate(uint8_t date) {
   20730:	defffd04 	addi	sp,sp,-12
   20734:	dfc00215 	stw	ra,8(sp)
   20738:	df000115 	stw	fp,4(sp)
   2073c:	df000104 	addi	fp,sp,4
   20740:	2005883a 	mov	r2,r4
   20744:	e0bfff05 	stb	r2,-4(fp)
	DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(date));
   20748:	e0bfff03 	ldbu	r2,-4(fp)
   2074c:	1009883a 	mov	r4,r2
   20750:	00209ec0 	call	209ec <DS1307_EncodeBCD>
   20754:	10803fcc 	andi	r2,r2,255
   20758:	100b883a 	mov	r5,r2
   2075c:	01000104 	movi	r4,4
   20760:	00203200 	call	20320 <DS1307_SetRegByte>
}
   20764:	0001883a 	nop
   20768:	e037883a 	mov	sp,fp
   2076c:	dfc00117 	ldw	ra,4(sp)
   20770:	df000017 	ldw	fp,0(sp)
   20774:	dec00204 	addi	sp,sp,8
   20778:	f800283a 	ret

0002077c <DS1307_SetMonth>:

/**
 * @brief Sets the current month.
 * @param month Month, 1 to 12.
 */
void DS1307_SetMonth(uint8_t month) {
   2077c:	defffd04 	addi	sp,sp,-12
   20780:	dfc00215 	stw	ra,8(sp)
   20784:	df000115 	stw	fp,4(sp)
   20788:	df000104 	addi	fp,sp,4
   2078c:	2005883a 	mov	r2,r4
   20790:	e0bfff05 	stb	r2,-4(fp)
	DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
   20794:	e0bfff03 	ldbu	r2,-4(fp)
   20798:	1009883a 	mov	r4,r2
   2079c:	00209ec0 	call	209ec <DS1307_EncodeBCD>
   207a0:	10803fcc 	andi	r2,r2,255
   207a4:	100b883a 	mov	r5,r2
   207a8:	01000144 	movi	r4,5
   207ac:	00203200 	call	20320 <DS1307_SetRegByte>
}
   207b0:	0001883a 	nop
   207b4:	e037883a 	mov	sp,fp
   207b8:	dfc00117 	ldw	ra,4(sp)
   207bc:	df000017 	ldw	fp,0(sp)
   207c0:	dec00204 	addi	sp,sp,8
   207c4:	f800283a 	ret

000207c8 <DS1307_SetYear>:

/**
 * @brief Sets the current year.
 * @param year Year, 2000 to 2099.
 */
void DS1307_SetYear(uint16_t year) {
   207c8:	defffd04 	addi	sp,sp,-12
   207cc:	dfc00215 	stw	ra,8(sp)
   207d0:	df000115 	stw	fp,4(sp)
   207d4:	df000104 	addi	fp,sp,4
   207d8:	2005883a 	mov	r2,r4
   207dc:	e0bfff0d 	sth	r2,-4(fp)
	DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
   207e0:	e0bfff0b 	ldhu	r2,-4(fp)
   207e4:	01401904 	movi	r5,100
   207e8:	1009883a 	mov	r4,r2
   207ec:	0022b740 	call	22b74 <__udivsi3>
   207f0:	10803fcc 	andi	r2,r2,255
   207f4:	100b883a 	mov	r5,r2
   207f8:	01000404 	movi	r4,16
   207fc:	00203200 	call	20320 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));
   20800:	e0bfff0b 	ldhu	r2,-4(fp)
   20804:	01401904 	movi	r5,100
   20808:	1009883a 	mov	r4,r2
   2080c:	0022bd80 	call	22bd8 <__umodsi3>
   20810:	10803fcc 	andi	r2,r2,255
   20814:	1009883a 	mov	r4,r2
   20818:	00209ec0 	call	209ec <DS1307_EncodeBCD>
   2081c:	10803fcc 	andi	r2,r2,255
   20820:	100b883a 	mov	r5,r2
   20824:	01000184 	movi	r4,6
   20828:	00203200 	call	20320 <DS1307_SetRegByte>
}
   2082c:	0001883a 	nop
   20830:	e037883a 	mov	sp,fp
   20834:	dfc00117 	ldw	ra,4(sp)
   20838:	df000017 	ldw	fp,0(sp)
   2083c:	dec00204 	addi	sp,sp,8
   20840:	f800283a 	ret

00020844 <DS1307_SetHour>:

/**
 * @brief Sets the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS1307_SetHour(uint8_t hour_24mode) {
   20844:	defffd04 	addi	sp,sp,-12
   20848:	dfc00215 	stw	ra,8(sp)
   2084c:	df000115 	stw	fp,4(sp)
   20850:	df000104 	addi	fp,sp,4
   20854:	2005883a 	mov	r2,r4
   20858:	e0bfff05 	stb	r2,-4(fp)
	DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f));
   2085c:	e0bfff03 	ldbu	r2,-4(fp)
   20860:	10800fcc 	andi	r2,r2,63
   20864:	1009883a 	mov	r4,r2
   20868:	00209ec0 	call	209ec <DS1307_EncodeBCD>
   2086c:	10803fcc 	andi	r2,r2,255
   20870:	100b883a 	mov	r5,r2
   20874:	01000084 	movi	r4,2
   20878:	00203200 	call	20320 <DS1307_SetRegByte>
}
   2087c:	0001883a 	nop
   20880:	e037883a 	mov	sp,fp
   20884:	dfc00117 	ldw	ra,4(sp)
   20888:	df000017 	ldw	fp,0(sp)
   2088c:	dec00204 	addi	sp,sp,8
   20890:	f800283a 	ret

00020894 <DS1307_SetMinute>:

/**
 * @brief Sets the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS1307_SetMinute(uint8_t minute) {
   20894:	defffd04 	addi	sp,sp,-12
   20898:	dfc00215 	stw	ra,8(sp)
   2089c:	df000115 	stw	fp,4(sp)
   208a0:	df000104 	addi	fp,sp,4
   208a4:	2005883a 	mov	r2,r4
   208a8:	e0bfff05 	stb	r2,-4(fp)
	DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
   208ac:	e0bfff03 	ldbu	r2,-4(fp)
   208b0:	1009883a 	mov	r4,r2
   208b4:	00209ec0 	call	209ec <DS1307_EncodeBCD>
   208b8:	10803fcc 	andi	r2,r2,255
   208bc:	100b883a 	mov	r5,r2
   208c0:	01000044 	movi	r4,1
   208c4:	00203200 	call	20320 <DS1307_SetRegByte>
}
   208c8:	0001883a 	nop
   208cc:	e037883a 	mov	sp,fp
   208d0:	dfc00117 	ldw	ra,4(sp)
   208d4:	df000017 	ldw	fp,0(sp)
   208d8:	dec00204 	addi	sp,sp,8
   208dc:	f800283a 	ret

000208e0 <DS1307_SetSecond>:

/**
 * @brief Sets the current second.
 * @param second Second, 0 to 59.
 */
void DS1307_SetSecond(uint8_t second) {
   208e0:	defffc04 	addi	sp,sp,-16
   208e4:	dfc00315 	stw	ra,12(sp)
   208e8:	df000215 	stw	fp,8(sp)
   208ec:	df000204 	addi	fp,sp,8
   208f0:	2005883a 	mov	r2,r4
   208f4:	e0bfff05 	stb	r2,-4(fp)
	uint8_t ch = DS1307_GetClockHalt();
   208f8:	00202ec0 	call	202ec <DS1307_GetClockHalt>
   208fc:	e0bffe05 	stb	r2,-8(fp)
	DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(second | ch));
   20900:	e0ffff03 	ldbu	r3,-4(fp)
   20904:	e0bffe03 	ldbu	r2,-8(fp)
   20908:	1884b03a 	or	r2,r3,r2
   2090c:	10803fcc 	andi	r2,r2,255
   20910:	1009883a 	mov	r4,r2
   20914:	00209ec0 	call	209ec <DS1307_EncodeBCD>
   20918:	10803fcc 	andi	r2,r2,255
   2091c:	100b883a 	mov	r5,r2
   20920:	0009883a 	mov	r4,zero
   20924:	00203200 	call	20320 <DS1307_SetRegByte>
}
   20928:	0001883a 	nop
   2092c:	e037883a 	mov	sp,fp
   20930:	dfc00117 	ldw	ra,4(sp)
   20934:	df000017 	ldw	fp,0(sp)
   20938:	dec00204 	addi	sp,sp,8
   2093c:	f800283a 	ret

00020940 <DS1307_SetTimeZone>:
 * @brief Sets UTC offset.
 * @note  UTC offset is not updated automatically.
 * @param hr UTC hour offset, -12 to 12.
 * @param min UTC minute offset, 0 to 59.
 */
void DS1307_SetTimeZone(int8_t hr, uint8_t min) {
   20940:	defffc04 	addi	sp,sp,-16
   20944:	dfc00315 	stw	ra,12(sp)
   20948:	df000215 	stw	fp,8(sp)
   2094c:	df000204 	addi	fp,sp,8
   20950:	2007883a 	mov	r3,r4
   20954:	2805883a 	mov	r2,r5
   20958:	e0fffe05 	stb	r3,-8(fp)
   2095c:	e0bfff05 	stb	r2,-4(fp)
	DS1307_SetRegByte(DS1307_REG_UTC_HR, hr);
   20960:	e0bffe03 	ldbu	r2,-8(fp)
   20964:	10803fcc 	andi	r2,r2,255
   20968:	100b883a 	mov	r5,r2
   2096c:	01000204 	movi	r4,8
   20970:	00203200 	call	20320 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_UTC_MIN, min);
   20974:	e0bfff03 	ldbu	r2,-4(fp)
   20978:	100b883a 	mov	r5,r2
   2097c:	01000244 	movi	r4,9
   20980:	00203200 	call	20320 <DS1307_SetRegByte>
}
   20984:	0001883a 	nop
   20988:	e037883a 	mov	sp,fp
   2098c:	dfc00117 	ldw	ra,4(sp)
   20990:	df000017 	ldw	fp,0(sp)
   20994:	dec00204 	addi	sp,sp,8
   20998:	f800283a 	ret

0002099c <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
   2099c:	defffd04 	addi	sp,sp,-12
   209a0:	dfc00215 	stw	ra,8(sp)
   209a4:	df000115 	stw	fp,4(sp)
   209a8:	df000104 	addi	fp,sp,4
   209ac:	2005883a 	mov	r2,r4
   209b0:	e0bfff05 	stb	r2,-4(fp)
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
   209b4:	e0bfff03 	ldbu	r2,-4(fp)
   209b8:	1004d13a 	srli	r2,r2,4
   209bc:	01400284 	movi	r5,10
   209c0:	1009883a 	mov	r4,r2
   209c4:	0022c300 	call	22c30 <__mulsi3>
   209c8:	1007883a 	mov	r3,r2
   209cc:	e0bfff03 	ldbu	r2,-4(fp)
   209d0:	108003cc 	andi	r2,r2,15
   209d4:	1885883a 	add	r2,r3,r2
}
   209d8:	e037883a 	mov	sp,fp
   209dc:	dfc00117 	ldw	ra,4(sp)
   209e0:	df000017 	ldw	fp,0(sp)
   209e4:	dec00204 	addi	sp,sp,8
   209e8:	f800283a 	ret

000209ec <DS1307_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS1307_EncodeBCD(uint8_t dec) {
   209ec:	defffc04 	addi	sp,sp,-16
   209f0:	dfc00315 	stw	ra,12(sp)
   209f4:	df000215 	stw	fp,8(sp)
   209f8:	dc000115 	stw	r16,4(sp)
   209fc:	df000204 	addi	fp,sp,8
   20a00:	2005883a 	mov	r2,r4
   20a04:	e0bffe05 	stb	r2,-8(fp)
	return (dec % 10 + ((dec / 10) << 4));
   20a08:	e0bffe03 	ldbu	r2,-8(fp)
   20a0c:	01400284 	movi	r5,10
   20a10:	1009883a 	mov	r4,r2
   20a14:	0022bd80 	call	22bd8 <__umodsi3>
   20a18:	1021883a 	mov	r16,r2
   20a1c:	e0bffe03 	ldbu	r2,-8(fp)
   20a20:	01400284 	movi	r5,10
   20a24:	1009883a 	mov	r4,r2
   20a28:	0022b740 	call	22b74 <__udivsi3>
   20a2c:	1004913a 	slli	r2,r2,4
   20a30:	8085883a 	add	r2,r16,r2
}
   20a34:	e6ffff04 	addi	sp,fp,-4
   20a38:	dfc00217 	ldw	ra,8(sp)
   20a3c:	df000117 	ldw	fp,4(sp)
   20a40:	dc000017 	ldw	r16,0(sp)
   20a44:	dec00304 	addi	sp,sp,12
   20a48:	f800283a 	ret

00020a4c <SH1106_Init>:
static SH1106_t SH1106;

#define SH1106_NORMALDISPLAY       0xA6
#define SH1106_INVERTDISPLAY       0xA7

uint8_t  SH1106_Init(void) {
   20a4c:	defffe04 	addi	sp,sp,-8
   20a50:	dfc00115 	stw	ra,4(sp)
   20a54:	df000015 	stw	fp,0(sp)
   20a58:	d839883a 	mov	fp,sp
//		if (NULL==SH1106_I2C)  {
//			printf("Error: Cannot find /dev/i2c_0\n");
//			return;
//		}
//		printf("Successfully open I2C");
	alt_avalon_i2c_master_target_set(SH1106_I2C,SH1106_I2C_ADDR);
   20a5c:	d0a0e117 	ldw	r2,-31868(gp)
   20a60:	01400f04 	movi	r5,60
   20a64:	1009883a 	mov	r4,r2
   20a68:	00278900 	call	27890 <alt_avalon_i2c_master_target_set>
//	uint32_t p = 2500;
//	while(p>0)
//		p--;

	  // Initialize the display
	SH1106_WRITECOMMAND(0xAE); //display off
   20a6c:	01802b84 	movi	r6,174
   20a70:	000b883a 	mov	r5,zero
   20a74:	01000f04 	movi	r4,60
   20a78:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xB0|0x00); //Set Page Start Address for Page Addressing Mode,0-7
   20a7c:	01802c04 	movi	r6,176
   20a80:	000b883a 	mov	r5,zero
   20a84:	01000f04 	movi	r4,60
   20a88:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x81); //--set contrast control register
   20a8c:	01802044 	movi	r6,129
   20a90:	000b883a 	mov	r5,zero
   20a94:	01000f04 	movi	r4,60
   20a98:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xFF); // contrast value
   20a9c:	01803fc4 	movi	r6,255
   20aa0:	000b883a 	mov	r5,zero
   20aa4:	01000f04 	movi	r4,60
   20aa8:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
   20aac:	01802844 	movi	r6,161
   20ab0:	000b883a 	mov	r5,zero
   20ab4:	01000f04 	movi	r4,60
   20ab8:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA6); //--set normal display
   20abc:	01802984 	movi	r6,166
   20ac0:	000b883a 	mov	r5,zero
   20ac4:	01000f04 	movi	r4,60
   20ac8:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
   20acc:	01802a04 	movi	r6,168
   20ad0:	000b883a 	mov	r5,zero
   20ad4:	01000f04 	movi	r4,60
   20ad8:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x3F); // multiplex value
   20adc:	01800fc4 	movi	r6,63
   20ae0:	000b883a 	mov	r5,zero
   20ae4:	01000f04 	movi	r4,60
   20ae8:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAD); // Set Pump Mode
   20aec:	01802b44 	movi	r6,173
   20af0:	000b883a 	mov	r5,zero
   20af4:	01000f04 	movi	r4,60
   20af8:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x8B); // Pump ON
   20afc:	018022c4 	movi	r6,139
   20b00:	000b883a 	mov	r5,zero
   20b04:	01000f04 	movi	r4,60
   20b08:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x30|0x02); // Set Pump Voltage 8.0
   20b0c:	01800c84 	movi	r6,50
   20b10:	000b883a 	mov	r5,zero
   20b14:	01000f04 	movi	r4,60
   20b18:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
   20b1c:	01803204 	movi	r6,200
   20b20:	000b883a 	mov	r5,zero
   20b24:	01000f04 	movi	r4,60
   20b28:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD3); //-set display offset
   20b2c:	018034c4 	movi	r6,211
   20b30:	000b883a 	mov	r5,zero
   20b34:	01000f04 	movi	r4,60
   20b38:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x00); //-not offset
   20b3c:	000d883a 	mov	r6,zero
   20b40:	000b883a 	mov	r5,zero
   20b44:	01000f04 	movi	r4,60
   20b48:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
   20b4c:	01803544 	movi	r6,213
   20b50:	000b883a 	mov	r5,zero
   20b54:	01000f04 	movi	r4,60
   20b58:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x80); //--set divide ratio
   20b5c:	01802004 	movi	r6,128
   20b60:	000b883a 	mov	r5,zero
   20b64:	01000f04 	movi	r4,60
   20b68:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD9); //--set pre-charge period
   20b6c:	01803644 	movi	r6,217
   20b70:	000b883a 	mov	r5,zero
   20b74:	01000f04 	movi	r4,60
   20b78:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x1F); //
   20b7c:	018007c4 	movi	r6,31
   20b80:	000b883a 	mov	r5,zero
   20b84:	01000f04 	movi	r4,60
   20b88:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDA); //--set com pins hardware configuration
   20b8c:	01803684 	movi	r6,218
   20b90:	000b883a 	mov	r5,zero
   20b94:	01000f04 	movi	r4,60
   20b98:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x12);
   20b9c:	01800484 	movi	r6,18
   20ba0:	000b883a 	mov	r5,zero
   20ba4:	01000f04 	movi	r4,60
   20ba8:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDB); //--set vcomh
   20bac:	018036c4 	movi	r6,219
   20bb0:	000b883a 	mov	r5,zero
   20bb4:	01000f04 	movi	r4,60
   20bb8:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x40); //
   20bbc:	01801004 	movi	r6,64
   20bc0:	000b883a 	mov	r5,zero
   20bc4:	01000f04 	movi	r4,60
   20bc8:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAF); //--turn on SH1106 panel
   20bcc:	01802bc4 	movi	r6,175
   20bd0:	000b883a 	mov	r5,zero
   20bd4:	01000f04 	movi	r4,60
   20bd8:	002221c0 	call	2221c <SH1106_I2C_Write>


	/* Clear screen */
	SH1106_Fill(SH1106_COLOR_BLACK);
   20bdc:	0009883a 	mov	r4,zero
   20be0:	0020d3c0 	call	20d3c <SH1106_Fill>

	/* Update screen */
	SH1106_UpdateScreen();
   20be4:	0020c100 	call	20c10 <SH1106_UpdateScreen>

	/* Set default values */
	SH1106.CurrentX = 0;
   20be8:	d020dd0d 	sth	zero,-31884(gp)
	SH1106.CurrentY = 0;
   20bec:	d020dd8d 	sth	zero,-31882(gp)

	/* Initialized OK */
	SH1106.Initialized = 1;
   20bf0:	00800044 	movi	r2,1
   20bf4:	d0a0de45 	stb	r2,-31879(gp)

	/* Return OK */
	return 1;
   20bf8:	00800044 	movi	r2,1
}
   20bfc:	e037883a 	mov	sp,fp
   20c00:	dfc00117 	ldw	ra,4(sp)
   20c04:	df000017 	ldw	fp,0(sp)
   20c08:	dec00204 	addi	sp,sp,8
   20c0c:	f800283a 	ret

00020c10 <SH1106_UpdateScreen>:

void SH1106_UpdateScreen(void) {
   20c10:	defffd04 	addi	sp,sp,-12
   20c14:	dfc00215 	stw	ra,8(sp)
   20c18:	df000115 	stw	fp,4(sp)
   20c1c:	df000104 	addi	fp,sp,4
	uint8_t m;

	for (m = 0; m < 8; m++) {
   20c20:	e03fff05 	stb	zero,-4(fp)
   20c24:	00001c06 	br	20c98 <SH1106_UpdateScreen+0x88>
		SH1106_WRITECOMMAND(0xB0 + m);
   20c28:	e0bfff03 	ldbu	r2,-4(fp)
   20c2c:	10bfec04 	addi	r2,r2,-80
   20c30:	10803fcc 	andi	r2,r2,255
   20c34:	100d883a 	mov	r6,r2
   20c38:	000b883a 	mov	r5,zero
   20c3c:	01000f04 	movi	r4,60
   20c40:	002221c0 	call	2221c <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x00);
   20c44:	000d883a 	mov	r6,zero
   20c48:	000b883a 	mov	r5,zero
   20c4c:	01000f04 	movi	r4,60
   20c50:	002221c0 	call	2221c <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x10);
   20c54:	01800404 	movi	r6,16
   20c58:	000b883a 	mov	r5,zero
   20c5c:	01000f04 	movi	r4,60
   20c60:	002221c0 	call	2221c <SH1106_I2C_Write>

		/* Write multi data */
		SH1106_I2C_WriteMulti(SH1106_I2C_ADDR, 0x40, &SH1106_Buffer[SH1106_WIDTH * m], SH1106_WIDTH);
   20c64:	e0bfff03 	ldbu	r2,-4(fp)
   20c68:	100691fa 	slli	r3,r2,7
   20c6c:	008000f4 	movhi	r2,3
   20c70:	10802804 	addi	r2,r2,160
   20c74:	1885883a 	add	r2,r3,r2
   20c78:	01c02004 	movi	r7,128
   20c7c:	100d883a 	mov	r6,r2
   20c80:	01401004 	movi	r5,64
   20c84:	01000f04 	movi	r4,60
   20c88:	00221500 	call	22150 <SH1106_I2C_WriteMulti>
}

void SH1106_UpdateScreen(void) {
	uint8_t m;

	for (m = 0; m < 8; m++) {
   20c8c:	e0bfff03 	ldbu	r2,-4(fp)
   20c90:	10800044 	addi	r2,r2,1
   20c94:	e0bfff05 	stb	r2,-4(fp)
   20c98:	e0bfff03 	ldbu	r2,-4(fp)
   20c9c:	10800230 	cmpltui	r2,r2,8
   20ca0:	103fe11e 	bne	r2,zero,20c28 <__alt_data_end+0xfffe0c28>
		SH1106_WRITECOMMAND(0x10);

		/* Write multi data */
		SH1106_I2C_WriteMulti(SH1106_I2C_ADDR, 0x40, &SH1106_Buffer[SH1106_WIDTH * m], SH1106_WIDTH);
	}
}
   20ca4:	0001883a 	nop
   20ca8:	e037883a 	mov	sp,fp
   20cac:	dfc00117 	ldw	ra,4(sp)
   20cb0:	df000017 	ldw	fp,0(sp)
   20cb4:	dec00204 	addi	sp,sp,8
   20cb8:	f800283a 	ret

00020cbc <SH1106_ToggleInvert>:

void SH1106_ToggleInvert(void) {
   20cbc:	defffe04 	addi	sp,sp,-8
   20cc0:	df000115 	stw	fp,4(sp)
   20cc4:	df000104 	addi	fp,sp,4
	uint16_t i;

	/* Toggle invert */
	SH1106.Inverted = !SH1106.Inverted;
   20cc8:	d0a0de03 	ldbu	r2,-31880(gp)
   20ccc:	10803fcc 	andi	r2,r2,255
   20cd0:	1005003a 	cmpeq	r2,r2,zero
   20cd4:	d0a0de05 	stb	r2,-31880(gp)

	/* Do memory toggle */
	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
   20cd8:	e03fff0d 	sth	zero,-4(fp)
   20cdc:	00000f06 	br	20d1c <SH1106_ToggleInvert+0x60>
		SH1106_Buffer[i] = ~SH1106_Buffer[i];
   20ce0:	e0ffff0b 	ldhu	r3,-4(fp)
   20ce4:	e13fff0b 	ldhu	r4,-4(fp)
   20ce8:	008000f4 	movhi	r2,3
   20cec:	10802804 	addi	r2,r2,160
   20cf0:	1105883a 	add	r2,r2,r4
   20cf4:	10800003 	ldbu	r2,0(r2)
   20cf8:	0084303a 	nor	r2,zero,r2
   20cfc:	1009883a 	mov	r4,r2
   20d00:	008000f4 	movhi	r2,3
   20d04:	10802804 	addi	r2,r2,160
   20d08:	10c5883a 	add	r2,r2,r3
   20d0c:	11000005 	stb	r4,0(r2)

	/* Toggle invert */
	SH1106.Inverted = !SH1106.Inverted;

	/* Do memory toggle */
	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
   20d10:	e0bfff0b 	ldhu	r2,-4(fp)
   20d14:	10800044 	addi	r2,r2,1
   20d18:	e0bfff0d 	sth	r2,-4(fp)
   20d1c:	e0bfff0b 	ldhu	r2,-4(fp)
   20d20:	10810030 	cmpltui	r2,r2,1024
   20d24:	103fee1e 	bne	r2,zero,20ce0 <__alt_data_end+0xfffe0ce0>
		SH1106_Buffer[i] = ~SH1106_Buffer[i];
	}
}
   20d28:	0001883a 	nop
   20d2c:	e037883a 	mov	sp,fp
   20d30:	df000017 	ldw	fp,0(sp)
   20d34:	dec00104 	addi	sp,sp,4
   20d38:	f800283a 	ret

00020d3c <SH1106_Fill>:

void SH1106_Fill(SH1106_COLOR_t color) {
   20d3c:	defffd04 	addi	sp,sp,-12
   20d40:	dfc00215 	stw	ra,8(sp)
   20d44:	df000115 	stw	fp,4(sp)
   20d48:	df000104 	addi	fp,sp,4
   20d4c:	e13fff15 	stw	r4,-4(fp)
	/* Set memory */
	memset(SH1106_Buffer, (color == SH1106_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SH1106_Buffer));
   20d50:	e0bfff17 	ldw	r2,-4(fp)
   20d54:	1000021e 	bne	r2,zero,20d60 <SH1106_Fill+0x24>
   20d58:	0005883a 	mov	r2,zero
   20d5c:	00000106 	br	20d64 <SH1106_Fill+0x28>
   20d60:	00803fc4 	movi	r2,255
   20d64:	01810004 	movi	r6,1024
   20d68:	100b883a 	mov	r5,r2
   20d6c:	010000f4 	movhi	r4,3
   20d70:	21002804 	addi	r4,r4,160
   20d74:	0025a500 	call	25a50 <memset>
}
   20d78:	0001883a 	nop
   20d7c:	e037883a 	mov	sp,fp
   20d80:	dfc00117 	ldw	ra,4(sp)
   20d84:	df000017 	ldw	fp,0(sp)
   20d88:	dec00204 	addi	sp,sp,8
   20d8c:	f800283a 	ret

00020d90 <SH1106_DrawPixel>:

void SH1106_DrawPixel(uint16_t x, uint16_t y, SH1106_COLOR_t color) {
   20d90:	defffc04 	addi	sp,sp,-16
   20d94:	df000315 	stw	fp,12(sp)
   20d98:	df000304 	addi	fp,sp,12
   20d9c:	2007883a 	mov	r3,r4
   20da0:	2805883a 	mov	r2,r5
   20da4:	e1bfff15 	stw	r6,-4(fp)
   20da8:	e0fffd0d 	sth	r3,-12(fp)
   20dac:	e0bffe0d 	sth	r2,-8(fp)
	if (
   20db0:	e0bffd0b 	ldhu	r2,-12(fp)
   20db4:	10802028 	cmpgeui	r2,r2,128
   20db8:	1000441e 	bne	r2,zero,20ecc <SH1106_DrawPixel+0x13c>
		x >= SH1106_WIDTH ||
   20dbc:	e0bffe0b 	ldhu	r2,-8(fp)
   20dc0:	10801030 	cmpltui	r2,r2,64
   20dc4:	10004126 	beq	r2,zero,20ecc <SH1106_DrawPixel+0x13c>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SH1106.Inverted) {
   20dc8:	d0a0de03 	ldbu	r2,-31880(gp)
   20dcc:	10803fcc 	andi	r2,r2,255
   20dd0:	10000426 	beq	r2,zero,20de4 <SH1106_DrawPixel+0x54>
		color = (SH1106_COLOR_t)!color;
   20dd4:	e0bfff17 	ldw	r2,-4(fp)
   20dd8:	1005003a 	cmpeq	r2,r2,zero
   20ddc:	10803fcc 	andi	r2,r2,255
   20de0:	e0bfff15 	stw	r2,-4(fp)
	}

	/* Set color */
	if (color == SH1106_COLOR_WHITE) {
   20de4:	e0bfff17 	ldw	r2,-4(fp)
   20de8:	10800058 	cmpnei	r2,r2,1
   20dec:	10001b1e 	bne	r2,zero,20e5c <SH1106_DrawPixel+0xcc>
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= 1 << (y % 8);
   20df0:	e0fffd0b 	ldhu	r3,-12(fp)
   20df4:	e0bffe0b 	ldhu	r2,-8(fp)
   20df8:	1004d0fa 	srli	r2,r2,3
   20dfc:	100b883a 	mov	r5,r2
   20e00:	28bfffcc 	andi	r2,r5,65535
   20e04:	100491fa 	slli	r2,r2,7
   20e08:	1887883a 	add	r3,r3,r2
   20e0c:	e13ffd0b 	ldhu	r4,-12(fp)
   20e10:	28bfffcc 	andi	r2,r5,65535
   20e14:	100491fa 	slli	r2,r2,7
   20e18:	2089883a 	add	r4,r4,r2
   20e1c:	008000f4 	movhi	r2,3
   20e20:	10802804 	addi	r2,r2,160
   20e24:	1105883a 	add	r2,r2,r4
   20e28:	10800003 	ldbu	r2,0(r2)
   20e2c:	100b883a 	mov	r5,r2
   20e30:	e0bffe0b 	ldhu	r2,-8(fp)
   20e34:	108001cc 	andi	r2,r2,7
   20e38:	01000044 	movi	r4,1
   20e3c:	2084983a 	sll	r2,r4,r2
   20e40:	2884b03a 	or	r2,r5,r2
   20e44:	1009883a 	mov	r4,r2
   20e48:	008000f4 	movhi	r2,3
   20e4c:	10802804 	addi	r2,r2,160
   20e50:	10c5883a 	add	r2,r2,r3
   20e54:	11000005 	stb	r4,0(r2)
   20e58:	00001d06 	br	20ed0 <SH1106_DrawPixel+0x140>
	} else {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
   20e5c:	e0fffd0b 	ldhu	r3,-12(fp)
   20e60:	e0bffe0b 	ldhu	r2,-8(fp)
   20e64:	1004d0fa 	srli	r2,r2,3
   20e68:	100b883a 	mov	r5,r2
   20e6c:	28bfffcc 	andi	r2,r5,65535
   20e70:	100491fa 	slli	r2,r2,7
   20e74:	1887883a 	add	r3,r3,r2
   20e78:	e13ffd0b 	ldhu	r4,-12(fp)
   20e7c:	28bfffcc 	andi	r2,r5,65535
   20e80:	100491fa 	slli	r2,r2,7
   20e84:	2089883a 	add	r4,r4,r2
   20e88:	008000f4 	movhi	r2,3
   20e8c:	10802804 	addi	r2,r2,160
   20e90:	1105883a 	add	r2,r2,r4
   20e94:	10800003 	ldbu	r2,0(r2)
   20e98:	100b883a 	mov	r5,r2
   20e9c:	e0bffe0b 	ldhu	r2,-8(fp)
   20ea0:	108001cc 	andi	r2,r2,7
   20ea4:	01000044 	movi	r4,1
   20ea8:	2084983a 	sll	r2,r4,r2
   20eac:	0084303a 	nor	r2,zero,r2
   20eb0:	2884703a 	and	r2,r5,r2
   20eb4:	1009883a 	mov	r4,r2
   20eb8:	008000f4 	movhi	r2,3
   20ebc:	10802804 	addi	r2,r2,160
   20ec0:	10c5883a 	add	r2,r2,r3
   20ec4:	11000005 	stb	r4,0(r2)
   20ec8:	00000106 	br	20ed0 <SH1106_DrawPixel+0x140>
	if (
		x >= SH1106_WIDTH ||
		y >= SH1106_HEIGHT
	) {
		/* Error */
		return;
   20ecc:	0001883a 	nop
	if (color == SH1106_COLOR_WHITE) {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= 1 << (y % 8);
	} else {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
	}
}
   20ed0:	e037883a 	mov	sp,fp
   20ed4:	df000017 	ldw	fp,0(sp)
   20ed8:	dec00104 	addi	sp,sp,4
   20edc:	f800283a 	ret

00020ee0 <SH1106_GotoXY>:

void SH1106_GotoXY(uint16_t x, uint16_t y) {
   20ee0:	defffd04 	addi	sp,sp,-12
   20ee4:	df000215 	stw	fp,8(sp)
   20ee8:	df000204 	addi	fp,sp,8
   20eec:	2007883a 	mov	r3,r4
   20ef0:	2805883a 	mov	r2,r5
   20ef4:	e0fffe0d 	sth	r3,-8(fp)
   20ef8:	e0bfff0d 	sth	r2,-4(fp)
	/* Set write pointers */
	SH1106.CurrentX = x;
   20efc:	e0bffe0b 	ldhu	r2,-8(fp)
   20f00:	d0a0dd0d 	sth	r2,-31884(gp)
	SH1106.CurrentY = y;
   20f04:	e0bfff0b 	ldhu	r2,-4(fp)
   20f08:	d0a0dd8d 	sth	r2,-31882(gp)
}
   20f0c:	0001883a 	nop
   20f10:	e037883a 	mov	sp,fp
   20f14:	df000017 	ldw	fp,0(sp)
   20f18:	dec00104 	addi	sp,sp,4
   20f1c:	f800283a 	ret

00020f20 <SH1106_Putc>:

char SH1106_Putc(char ch, FontDef_t* Font, SH1106_COLOR_t color) {
   20f20:	defff704 	addi	sp,sp,-36
   20f24:	dfc00815 	stw	ra,32(sp)
   20f28:	df000715 	stw	fp,28(sp)
   20f2c:	dc000615 	stw	r16,24(sp)
   20f30:	df000704 	addi	fp,sp,28
   20f34:	2005883a 	mov	r2,r4
   20f38:	e17ffd15 	stw	r5,-12(fp)
   20f3c:	e1bffe15 	stw	r6,-8(fp)
   20f40:	e0bffc05 	stb	r2,-16(fp)
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
   20f44:	d0a0dd0b 	ldhu	r2,-31884(gp)
   20f48:	10ffffcc 	andi	r3,r2,65535
   20f4c:	e0bffd17 	ldw	r2,-12(fp)
   20f50:	10800003 	ldbu	r2,0(r2)
   20f54:	10803fcc 	andi	r2,r2,255
   20f58:	1885883a 	add	r2,r3,r2

char SH1106_Putc(char ch, FontDef_t* Font, SH1106_COLOR_t color) {
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
   20f5c:	10802008 	cmpgei	r2,r2,128
   20f60:	1000081e 	bne	r2,zero,20f84 <SH1106_Putc+0x64>
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
		SH1106_HEIGHT <= (SH1106.CurrentY + Font->FontHeight)
   20f64:	d0a0dd8b 	ldhu	r2,-31882(gp)
   20f68:	10ffffcc 	andi	r3,r2,65535
   20f6c:	e0bffd17 	ldw	r2,-12(fp)
   20f70:	10800043 	ldbu	r2,1(r2)
   20f74:	10803fcc 	andi	r2,r2,255
   20f78:	1885883a 	add	r2,r3,r2
char SH1106_Putc(char ch, FontDef_t* Font, SH1106_COLOR_t color) {
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
   20f7c:	10801010 	cmplti	r2,r2,64
   20f80:	1000021e 	bne	r2,zero,20f8c <SH1106_Putc+0x6c>
		SH1106_HEIGHT <= (SH1106.CurrentY + Font->FontHeight)
	) {
		/* Error */
		return 0;
   20f84:	0005883a 	mov	r2,zero
   20f88:	00004e06 	br	210c4 <SH1106_Putc+0x1a4>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
   20f8c:	e03ff915 	stw	zero,-28(fp)
   20f90:	00004006 	br	21094 <SH1106_Putc+0x174>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
   20f94:	e0bffd17 	ldw	r2,-12(fp)
   20f98:	14000117 	ldw	r16,4(r2)
   20f9c:	e0bffc07 	ldb	r2,-16(fp)
   20fa0:	10fff804 	addi	r3,r2,-32
   20fa4:	e0bffd17 	ldw	r2,-12(fp)
   20fa8:	10800043 	ldbu	r2,1(r2)
   20fac:	10803fcc 	andi	r2,r2,255
   20fb0:	100b883a 	mov	r5,r2
   20fb4:	1809883a 	mov	r4,r3
   20fb8:	0022c300 	call	22c30 <__mulsi3>
   20fbc:	1007883a 	mov	r3,r2
   20fc0:	e0bff917 	ldw	r2,-28(fp)
   20fc4:	1885883a 	add	r2,r3,r2
   20fc8:	1085883a 	add	r2,r2,r2
   20fcc:	8085883a 	add	r2,r16,r2
   20fd0:	1080000b 	ldhu	r2,0(r2)
   20fd4:	10bfffcc 	andi	r2,r2,65535
   20fd8:	e0bffb15 	stw	r2,-20(fp)
		for (j = 0; j < Font->FontWidth; j++) {
   20fdc:	e03ffa15 	stw	zero,-24(fp)
   20fe0:	00002406 	br	21074 <SH1106_Putc+0x154>
			if ((b << j) & 0x8000) {
   20fe4:	e0fffb17 	ldw	r3,-20(fp)
   20fe8:	e0bffa17 	ldw	r2,-24(fp)
   20fec:	1884983a 	sll	r2,r3,r2
   20ff0:	10a0000c 	andi	r2,r2,32768
   20ff4:	10000d26 	beq	r2,zero,2102c <SH1106_Putc+0x10c>
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t) color);
   20ff8:	d0a0dd0b 	ldhu	r2,-31884(gp)
   20ffc:	e0fffa17 	ldw	r3,-24(fp)
   21000:	10c5883a 	add	r2,r2,r3
   21004:	10ffffcc 	andi	r3,r2,65535
   21008:	d0a0dd8b 	ldhu	r2,-31882(gp)
   2100c:	e13ff917 	ldw	r4,-28(fp)
   21010:	1105883a 	add	r2,r2,r4
   21014:	10bfffcc 	andi	r2,r2,65535
   21018:	e1bffe17 	ldw	r6,-8(fp)
   2101c:	100b883a 	mov	r5,r2
   21020:	1809883a 	mov	r4,r3
   21024:	0020d900 	call	20d90 <SH1106_DrawPixel>
   21028:	00000f06 	br	21068 <SH1106_Putc+0x148>
			} else {
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t)!color);
   2102c:	d0a0dd0b 	ldhu	r2,-31884(gp)
   21030:	e0fffa17 	ldw	r3,-24(fp)
   21034:	10c5883a 	add	r2,r2,r3
   21038:	10ffffcc 	andi	r3,r2,65535
   2103c:	d0a0dd8b 	ldhu	r2,-31882(gp)
   21040:	e13ff917 	ldw	r4,-28(fp)
   21044:	1105883a 	add	r2,r2,r4
   21048:	113fffcc 	andi	r4,r2,65535
   2104c:	e0bffe17 	ldw	r2,-8(fp)
   21050:	1005003a 	cmpeq	r2,r2,zero
   21054:	10803fcc 	andi	r2,r2,255
   21058:	100d883a 	mov	r6,r2
   2105c:	200b883a 	mov	r5,r4
   21060:	1809883a 	mov	r4,r3
   21064:	0020d900 	call	20d90 <SH1106_DrawPixel>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
   21068:	e0bffa17 	ldw	r2,-24(fp)
   2106c:	10800044 	addi	r2,r2,1
   21070:	e0bffa15 	stw	r2,-24(fp)
   21074:	e0bffd17 	ldw	r2,-12(fp)
   21078:	10800003 	ldbu	r2,0(r2)
   2107c:	10803fcc 	andi	r2,r2,255
   21080:	e0fffa17 	ldw	r3,-24(fp)
   21084:	18bfd736 	bltu	r3,r2,20fe4 <__alt_data_end+0xfffe0fe4>
		/* Error */
		return 0;
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
   21088:	e0bff917 	ldw	r2,-28(fp)
   2108c:	10800044 	addi	r2,r2,1
   21090:	e0bff915 	stw	r2,-28(fp)
   21094:	e0bffd17 	ldw	r2,-12(fp)
   21098:	10800043 	ldbu	r2,1(r2)
   2109c:	10803fcc 	andi	r2,r2,255
   210a0:	e0fff917 	ldw	r3,-28(fp)
   210a4:	18bfbb36 	bltu	r3,r2,20f94 <__alt_data_end+0xfffe0f94>
			}
		}
	}

	/* Increase pointer */
	SH1106.CurrentX += Font->FontWidth;
   210a8:	d0e0dd0b 	ldhu	r3,-31884(gp)
   210ac:	e0bffd17 	ldw	r2,-12(fp)
   210b0:	10800003 	ldbu	r2,0(r2)
   210b4:	10803fcc 	andi	r2,r2,255
   210b8:	1885883a 	add	r2,r3,r2
   210bc:	d0a0dd0d 	sth	r2,-31884(gp)

	/* Return character written */
	return ch;
   210c0:	e0bffc03 	ldbu	r2,-16(fp)
}
   210c4:	e6ffff04 	addi	sp,fp,-4
   210c8:	dfc00217 	ldw	ra,8(sp)
   210cc:	df000117 	ldw	fp,4(sp)
   210d0:	dc000017 	ldw	r16,0(sp)
   210d4:	dec00304 	addi	sp,sp,12
   210d8:	f800283a 	ret

000210dc <SH1106_Puts>:

char SH1106_Puts(char* str, FontDef_t* Font, SH1106_COLOR_t color) {
   210dc:	defffb04 	addi	sp,sp,-20
   210e0:	dfc00415 	stw	ra,16(sp)
   210e4:	df000315 	stw	fp,12(sp)
   210e8:	df000304 	addi	fp,sp,12
   210ec:	e13ffd15 	stw	r4,-12(fp)
   210f0:	e17ffe15 	stw	r5,-8(fp)
   210f4:	e1bfff15 	stw	r6,-4(fp)
	/* Write characters */
	while (*str) {
   210f8:	00001906 	br	21160 <SH1106_Puts+0x84>
		/* Write character by character */
		if (SH1106_Putc(*str, Font, color) != *str) {
   210fc:	e0bffd17 	ldw	r2,-12(fp)
   21100:	10800003 	ldbu	r2,0(r2)
   21104:	10803fcc 	andi	r2,r2,255
   21108:	1080201c 	xori	r2,r2,128
   2110c:	10bfe004 	addi	r2,r2,-128
   21110:	e1bfff17 	ldw	r6,-4(fp)
   21114:	e17ffe17 	ldw	r5,-8(fp)
   21118:	1009883a 	mov	r4,r2
   2111c:	0020f200 	call	20f20 <SH1106_Putc>
   21120:	1007883a 	mov	r3,r2
   21124:	e0bffd17 	ldw	r2,-12(fp)
   21128:	10800003 	ldbu	r2,0(r2)
   2112c:	18c03fcc 	andi	r3,r3,255
   21130:	18c0201c 	xori	r3,r3,128
   21134:	18ffe004 	addi	r3,r3,-128
   21138:	10803fcc 	andi	r2,r2,255
   2113c:	1080201c 	xori	r2,r2,128
   21140:	10bfe004 	addi	r2,r2,-128
   21144:	18800326 	beq	r3,r2,21154 <SH1106_Puts+0x78>
			/* Return error */
			return *str;
   21148:	e0bffd17 	ldw	r2,-12(fp)
   2114c:	10800003 	ldbu	r2,0(r2)
   21150:	00000b06 	br	21180 <SH1106_Puts+0xa4>
		}

		/* Increase string pointer */
		str++;
   21154:	e0bffd17 	ldw	r2,-12(fp)
   21158:	10800044 	addi	r2,r2,1
   2115c:	e0bffd15 	stw	r2,-12(fp)
	return ch;
}

char SH1106_Puts(char* str, FontDef_t* Font, SH1106_COLOR_t color) {
	/* Write characters */
	while (*str) {
   21160:	e0bffd17 	ldw	r2,-12(fp)
   21164:	10800003 	ldbu	r2,0(r2)
   21168:	10803fcc 	andi	r2,r2,255
   2116c:	1080201c 	xori	r2,r2,128
   21170:	10bfe004 	addi	r2,r2,-128
   21174:	103fe11e 	bne	r2,zero,210fc <__alt_data_end+0xfffe10fc>
		/* Increase string pointer */
		str++;
	}

	/* Everything OK, zero should be returned */
	return *str;
   21178:	e0bffd17 	ldw	r2,-12(fp)
   2117c:	10800003 	ldbu	r2,0(r2)
}
   21180:	e037883a 	mov	sp,fp
   21184:	dfc00117 	ldw	ra,4(sp)
   21188:	df000017 	ldw	fp,0(sp)
   2118c:	dec00204 	addi	sp,sp,8
   21190:	f800283a 	ret

00021194 <SH1106_DrawLine>:


void SH1106_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SH1106_COLOR_t c) {
   21194:	defff604 	addi	sp,sp,-40
   21198:	dfc00915 	stw	ra,36(sp)
   2119c:	df000815 	stw	fp,32(sp)
   211a0:	df000804 	addi	fp,sp,32
   211a4:	2011883a 	mov	r8,r4
   211a8:	2809883a 	mov	r4,r5
   211ac:	3007883a 	mov	r3,r6
   211b0:	3805883a 	mov	r2,r7
   211b4:	e23ffc0d 	sth	r8,-16(fp)
   211b8:	e13ffd0d 	sth	r4,-12(fp)
   211bc:	e0fffe0d 	sth	r3,-8(fp)
   211c0:	e0bfff0d 	sth	r2,-4(fp)
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SH1106_WIDTH) {
   211c4:	e0bffc0b 	ldhu	r2,-16(fp)
   211c8:	10802030 	cmpltui	r2,r2,128
   211cc:	1000021e 	bne	r2,zero,211d8 <SH1106_DrawLine+0x44>
		x0 = SH1106_WIDTH - 1;
   211d0:	00801fc4 	movi	r2,127
   211d4:	e0bffc0d 	sth	r2,-16(fp)
	}
	if (x1 >= SH1106_WIDTH) {
   211d8:	e0bffe0b 	ldhu	r2,-8(fp)
   211dc:	10802030 	cmpltui	r2,r2,128
   211e0:	1000021e 	bne	r2,zero,211ec <SH1106_DrawLine+0x58>
		x1 = SH1106_WIDTH - 1;
   211e4:	00801fc4 	movi	r2,127
   211e8:	e0bffe0d 	sth	r2,-8(fp)
	}
	if (y0 >= SH1106_HEIGHT) {
   211ec:	e0bffd0b 	ldhu	r2,-12(fp)
   211f0:	10801030 	cmpltui	r2,r2,64
   211f4:	1000021e 	bne	r2,zero,21200 <SH1106_DrawLine+0x6c>
		y0 = SH1106_HEIGHT - 1;
   211f8:	00800fc4 	movi	r2,63
   211fc:	e0bffd0d 	sth	r2,-12(fp)
	}
	if (y1 >= SH1106_HEIGHT) {
   21200:	e0bfff0b 	ldhu	r2,-4(fp)
   21204:	10801030 	cmpltui	r2,r2,64
   21208:	1000021e 	bne	r2,zero,21214 <SH1106_DrawLine+0x80>
		y1 = SH1106_HEIGHT - 1;
   2120c:	00800fc4 	movi	r2,63
   21210:	e0bfff0d 	sth	r2,-4(fp)
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
   21214:	e0fffc0b 	ldhu	r3,-16(fp)
   21218:	e0bffe0b 	ldhu	r2,-8(fp)
   2121c:	1880042e 	bgeu	r3,r2,21230 <SH1106_DrawLine+0x9c>
   21220:	e0fffe0b 	ldhu	r3,-8(fp)
   21224:	e0bffc0b 	ldhu	r2,-16(fp)
   21228:	1885c83a 	sub	r2,r3,r2
   2122c:	00000306 	br	2123c <SH1106_DrawLine+0xa8>
   21230:	e0fffc0b 	ldhu	r3,-16(fp)
   21234:	e0bffe0b 	ldhu	r2,-8(fp)
   21238:	1885c83a 	sub	r2,r3,r2
   2123c:	e0bff90d 	sth	r2,-28(fp)
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
   21240:	e0fffd0b 	ldhu	r3,-12(fp)
   21244:	e0bfff0b 	ldhu	r2,-4(fp)
   21248:	1880042e 	bgeu	r3,r2,2125c <SH1106_DrawLine+0xc8>
   2124c:	e0ffff0b 	ldhu	r3,-4(fp)
   21250:	e0bffd0b 	ldhu	r2,-12(fp)
   21254:	1885c83a 	sub	r2,r3,r2
   21258:	00000306 	br	21268 <SH1106_DrawLine+0xd4>
   2125c:	e0fffd0b 	ldhu	r3,-12(fp)
   21260:	e0bfff0b 	ldhu	r2,-4(fp)
   21264:	1885c83a 	sub	r2,r3,r2
   21268:	e0bff98d 	sth	r2,-26(fp)
	sx = (x0 < x1) ? 1 : -1;
   2126c:	e0fffc0b 	ldhu	r3,-16(fp)
   21270:	e0bffe0b 	ldhu	r2,-8(fp)
   21274:	1880022e 	bgeu	r3,r2,21280 <SH1106_DrawLine+0xec>
   21278:	00800044 	movi	r2,1
   2127c:	00000106 	br	21284 <SH1106_DrawLine+0xf0>
   21280:	00bfffc4 	movi	r2,-1
   21284:	e0bffa0d 	sth	r2,-24(fp)
	sy = (y0 < y1) ? 1 : -1;
   21288:	e0fffd0b 	ldhu	r3,-12(fp)
   2128c:	e0bfff0b 	ldhu	r2,-4(fp)
   21290:	1880022e 	bgeu	r3,r2,2129c <SH1106_DrawLine+0x108>
   21294:	00800044 	movi	r2,1
   21298:	00000106 	br	212a0 <SH1106_DrawLine+0x10c>
   2129c:	00bfffc4 	movi	r2,-1
   212a0:	e0bffa8d 	sth	r2,-22(fp)
	err = ((dx > dy) ? dx : -dy) / 2;
   212a4:	e0bff90f 	ldh	r2,-28(fp)
   212a8:	e0fff98f 	ldh	r3,-26(fp)
   212ac:	1880050e 	bge	r3,r2,212c4 <SH1106_DrawLine+0x130>
   212b0:	e0bff90f 	ldh	r2,-28(fp)
   212b4:	1006d7fa 	srli	r3,r2,31
   212b8:	1885883a 	add	r2,r3,r2
   212bc:	1005d07a 	srai	r2,r2,1
   212c0:	00000506 	br	212d8 <SH1106_DrawLine+0x144>
   212c4:	e0bff98f 	ldh	r2,-26(fp)
   212c8:	0085c83a 	sub	r2,zero,r2
   212cc:	1006d7fa 	srli	r3,r2,31
   212d0:	1885883a 	add	r2,r3,r2
   212d4:	1005d07a 	srai	r2,r2,1
   212d8:	e0bff80d 	sth	r2,-32(fp)

	if (dx == 0) {
   212dc:	e0bff90f 	ldh	r2,-28(fp)
   212e0:	1000231e 	bne	r2,zero,21370 <SH1106_DrawLine+0x1dc>
		if (y1 < y0) {
   212e4:	e0ffff0b 	ldhu	r3,-4(fp)
   212e8:	e0bffd0b 	ldhu	r2,-12(fp)
   212ec:	1880062e 	bgeu	r3,r2,21308 <SH1106_DrawLine+0x174>
			tmp = y1;
   212f0:	e0bfff0b 	ldhu	r2,-4(fp)
   212f4:	e0bffb0d 	sth	r2,-20(fp)
			y1 = y0;
   212f8:	e0bffd0b 	ldhu	r2,-12(fp)
   212fc:	e0bfff0d 	sth	r2,-4(fp)
			y0 = tmp;
   21300:	e0bffb0b 	ldhu	r2,-20(fp)
   21304:	e0bffd0d 	sth	r2,-12(fp)
		}

		if (x1 < x0) {
   21308:	e0fffe0b 	ldhu	r3,-8(fp)
   2130c:	e0bffc0b 	ldhu	r2,-16(fp)
   21310:	1880062e 	bgeu	r3,r2,2132c <SH1106_DrawLine+0x198>
			tmp = x1;
   21314:	e0bffe0b 	ldhu	r2,-8(fp)
   21318:	e0bffb0d 	sth	r2,-20(fp)
			x1 = x0;
   2131c:	e0bffc0b 	ldhu	r2,-16(fp)
   21320:	e0bffe0d 	sth	r2,-8(fp)
			x0 = tmp;
   21324:	e0bffb0b 	ldhu	r2,-20(fp)
   21328:	e0bffc0d 	sth	r2,-16(fp)
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
   2132c:	e0bffd0b 	ldhu	r2,-12(fp)
   21330:	e0bff88d 	sth	r2,-30(fp)
   21334:	00000a06 	br	21360 <SH1106_DrawLine+0x1cc>
			SH1106_DrawPixel(x0, i, c);
   21338:	e0bffc0b 	ldhu	r2,-16(fp)
   2133c:	e0fff88b 	ldhu	r3,-30(fp)
   21340:	18ffffcc 	andi	r3,r3,65535
   21344:	e1800217 	ldw	r6,8(fp)
   21348:	180b883a 	mov	r5,r3
   2134c:	1009883a 	mov	r4,r2
   21350:	0020d900 	call	20d90 <SH1106_DrawPixel>
			x1 = x0;
			x0 = tmp;
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
   21354:	e0bff88b 	ldhu	r2,-30(fp)
   21358:	10800044 	addi	r2,r2,1
   2135c:	e0bff88d 	sth	r2,-30(fp)
   21360:	e0bff88f 	ldh	r2,-30(fp)
   21364:	e0ffff0b 	ldhu	r3,-4(fp)
   21368:	18bff30e 	bge	r3,r2,21338 <__alt_data_end+0xfffe1338>
			SH1106_DrawPixel(x0, i, c);
		}

		/* Return from function */
		return;
   2136c:	00004c06 	br	214a0 <SH1106_DrawLine+0x30c>
	}

	if (dy == 0) {
   21370:	e0bff98f 	ldh	r2,-26(fp)
   21374:	1000231e 	bne	r2,zero,21404 <SH1106_DrawLine+0x270>
		if (y1 < y0) {
   21378:	e0ffff0b 	ldhu	r3,-4(fp)
   2137c:	e0bffd0b 	ldhu	r2,-12(fp)
   21380:	1880062e 	bgeu	r3,r2,2139c <SH1106_DrawLine+0x208>
			tmp = y1;
   21384:	e0bfff0b 	ldhu	r2,-4(fp)
   21388:	e0bffb0d 	sth	r2,-20(fp)
			y1 = y0;
   2138c:	e0bffd0b 	ldhu	r2,-12(fp)
   21390:	e0bfff0d 	sth	r2,-4(fp)
			y0 = tmp;
   21394:	e0bffb0b 	ldhu	r2,-20(fp)
   21398:	e0bffd0d 	sth	r2,-12(fp)
		}

		if (x1 < x0) {
   2139c:	e0fffe0b 	ldhu	r3,-8(fp)
   213a0:	e0bffc0b 	ldhu	r2,-16(fp)
   213a4:	1880062e 	bgeu	r3,r2,213c0 <SH1106_DrawLine+0x22c>
			tmp = x1;
   213a8:	e0bffe0b 	ldhu	r2,-8(fp)
   213ac:	e0bffb0d 	sth	r2,-20(fp)
			x1 = x0;
   213b0:	e0bffc0b 	ldhu	r2,-16(fp)
   213b4:	e0bffe0d 	sth	r2,-8(fp)
			x0 = tmp;
   213b8:	e0bffb0b 	ldhu	r2,-20(fp)
   213bc:	e0bffc0d 	sth	r2,-16(fp)
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
   213c0:	e0bffc0b 	ldhu	r2,-16(fp)
   213c4:	e0bff88d 	sth	r2,-30(fp)
   213c8:	00000a06 	br	213f4 <SH1106_DrawLine+0x260>
			SH1106_DrawPixel(i, y0, c);
   213cc:	e0bff88b 	ldhu	r2,-30(fp)
   213d0:	10bfffcc 	andi	r2,r2,65535
   213d4:	e0fffd0b 	ldhu	r3,-12(fp)
   213d8:	e1800217 	ldw	r6,8(fp)
   213dc:	180b883a 	mov	r5,r3
   213e0:	1009883a 	mov	r4,r2
   213e4:	0020d900 	call	20d90 <SH1106_DrawPixel>
			x1 = x0;
			x0 = tmp;
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
   213e8:	e0bff88b 	ldhu	r2,-30(fp)
   213ec:	10800044 	addi	r2,r2,1
   213f0:	e0bff88d 	sth	r2,-30(fp)
   213f4:	e0bff88f 	ldh	r2,-30(fp)
   213f8:	e0fffe0b 	ldhu	r3,-8(fp)
   213fc:	18bff30e 	bge	r3,r2,213cc <__alt_data_end+0xfffe13cc>
			SH1106_DrawPixel(i, y0, c);
		}

		/* Return from function */
		return;
   21400:	00002706 	br	214a0 <SH1106_DrawLine+0x30c>
	}

	while (1) {
		SH1106_DrawPixel(x0, y0, c);
   21404:	e0bffc0b 	ldhu	r2,-16(fp)
   21408:	e0fffd0b 	ldhu	r3,-12(fp)
   2140c:	e1800217 	ldw	r6,8(fp)
   21410:	180b883a 	mov	r5,r3
   21414:	1009883a 	mov	r4,r2
   21418:	0020d900 	call	20d90 <SH1106_DrawPixel>
		if (x0 == x1 && y0 == y1) {
   2141c:	e0fffc0b 	ldhu	r3,-16(fp)
   21420:	e0bffe0b 	ldhu	r2,-8(fp)
   21424:	1880031e 	bne	r3,r2,21434 <SH1106_DrawLine+0x2a0>
   21428:	e0fffd0b 	ldhu	r3,-12(fp)
   2142c:	e0bfff0b 	ldhu	r2,-4(fp)
   21430:	18801a26 	beq	r3,r2,2149c <SH1106_DrawLine+0x308>
			break;
		}
		e2 = err;
   21434:	e0bff80b 	ldhu	r2,-32(fp)
   21438:	e0bffb8d 	sth	r2,-18(fp)
		if (e2 > -dx) {
   2143c:	e0bffb8f 	ldh	r2,-18(fp)
   21440:	e0fff90f 	ldh	r3,-28(fp)
   21444:	00c7c83a 	sub	r3,zero,r3
   21448:	1880080e 	bge	r3,r2,2146c <SH1106_DrawLine+0x2d8>
			err -= dy;
   2144c:	e0fff80b 	ldhu	r3,-32(fp)
   21450:	e0bff98b 	ldhu	r2,-26(fp)
   21454:	1885c83a 	sub	r2,r3,r2
   21458:	e0bff80d 	sth	r2,-32(fp)
			x0 += sx;
   2145c:	e0bffa0b 	ldhu	r2,-24(fp)
   21460:	e0fffc0b 	ldhu	r3,-16(fp)
   21464:	1885883a 	add	r2,r3,r2
   21468:	e0bffc0d 	sth	r2,-16(fp)
		}
		if (e2 < dy) {
   2146c:	e0fffb8f 	ldh	r3,-18(fp)
   21470:	e0bff98f 	ldh	r2,-26(fp)
   21474:	18bfe30e 	bge	r3,r2,21404 <__alt_data_end+0xfffe1404>
			err += dx;
   21478:	e0fff80b 	ldhu	r3,-32(fp)
   2147c:	e0bff90b 	ldhu	r2,-28(fp)
   21480:	1885883a 	add	r2,r3,r2
   21484:	e0bff80d 	sth	r2,-32(fp)
			y0 += sy;
   21488:	e0bffa8b 	ldhu	r2,-22(fp)
   2148c:	e0fffd0b 	ldhu	r3,-12(fp)
   21490:	1885883a 	add	r2,r3,r2
   21494:	e0bffd0d 	sth	r2,-12(fp)
		}
	}
   21498:	003fda06 	br	21404 <__alt_data_end+0xfffe1404>
	}

	while (1) {
		SH1106_DrawPixel(x0, y0, c);
		if (x0 == x1 && y0 == y1) {
			break;
   2149c:	0001883a 	nop
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		}
	}
}
   214a0:	e037883a 	mov	sp,fp
   214a4:	dfc00117 	ldw	ra,4(sp)
   214a8:	df000017 	ldw	fp,0(sp)
   214ac:	dec00204 	addi	sp,sp,8
   214b0:	f800283a 	ret

000214b4 <SH1106_DrawRectangle>:

void SH1106_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SH1106_COLOR_t c) {
   214b4:	defff904 	addi	sp,sp,-28
   214b8:	dfc00615 	stw	ra,24(sp)
   214bc:	df000515 	stw	fp,20(sp)
   214c0:	df000504 	addi	fp,sp,20
   214c4:	2011883a 	mov	r8,r4
   214c8:	2809883a 	mov	r4,r5
   214cc:	3007883a 	mov	r3,r6
   214d0:	3805883a 	mov	r2,r7
   214d4:	e23ffc0d 	sth	r8,-16(fp)
   214d8:	e13ffd0d 	sth	r4,-12(fp)
   214dc:	e0fffe0d 	sth	r3,-8(fp)
   214e0:	e0bfff0d 	sth	r2,-4(fp)
	/* Check input parameters */
	if (
   214e4:	e0bffc0b 	ldhu	r2,-16(fp)
   214e8:	10802028 	cmpgeui	r2,r2,128
   214ec:	10004f1e 	bne	r2,zero,2162c <SH1106_DrawRectangle+0x178>
		x >= SH1106_WIDTH ||
   214f0:	e0bffd0b 	ldhu	r2,-12(fp)
   214f4:	10801030 	cmpltui	r2,r2,64
   214f8:	10004c26 	beq	r2,zero,2162c <SH1106_DrawRectangle+0x178>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SH1106_WIDTH) {
   214fc:	e0fffc0b 	ldhu	r3,-16(fp)
   21500:	e0bffe0b 	ldhu	r2,-8(fp)
   21504:	1885883a 	add	r2,r3,r2
   21508:	10802010 	cmplti	r2,r2,128
   2150c:	1000041e 	bne	r2,zero,21520 <SH1106_DrawRectangle+0x6c>
		w = SH1106_WIDTH - x;
   21510:	e0bffc0b 	ldhu	r2,-16(fp)
   21514:	00c02004 	movi	r3,128
   21518:	1885c83a 	sub	r2,r3,r2
   2151c:	e0bffe0d 	sth	r2,-8(fp)
	}
	if ((y + h) >= SH1106_HEIGHT) {
   21520:	e0fffd0b 	ldhu	r3,-12(fp)
   21524:	e0bfff0b 	ldhu	r2,-4(fp)
   21528:	1885883a 	add	r2,r3,r2
   2152c:	10801010 	cmplti	r2,r2,64
   21530:	1000041e 	bne	r2,zero,21544 <SH1106_DrawRectangle+0x90>
		h = SH1106_HEIGHT - y;
   21534:	e0bffd0b 	ldhu	r2,-12(fp)
   21538:	00c01004 	movi	r3,64
   2153c:	1885c83a 	sub	r2,r3,r2
   21540:	e0bfff0d 	sth	r2,-4(fp)
	}

	/* Draw 4 lines */
	SH1106_DrawLine(x, y, x + w, y, c);         /* Top line */
   21544:	e13ffc0b 	ldhu	r4,-16(fp)
   21548:	e17ffd0b 	ldhu	r5,-12(fp)
   2154c:	e0fffc0b 	ldhu	r3,-16(fp)
   21550:	e0bffe0b 	ldhu	r2,-8(fp)
   21554:	1885883a 	add	r2,r3,r2
   21558:	10ffffcc 	andi	r3,r2,65535
   2155c:	e1bffd0b 	ldhu	r6,-12(fp)
   21560:	e0800217 	ldw	r2,8(fp)
   21564:	d8800015 	stw	r2,0(sp)
   21568:	300f883a 	mov	r7,r6
   2156c:	180d883a 	mov	r6,r3
   21570:	00211940 	call	21194 <SH1106_DrawLine>
	SH1106_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
   21574:	e13ffc0b 	ldhu	r4,-16(fp)
   21578:	e0fffd0b 	ldhu	r3,-12(fp)
   2157c:	e0bfff0b 	ldhu	r2,-4(fp)
   21580:	1885883a 	add	r2,r3,r2
   21584:	117fffcc 	andi	r5,r2,65535
   21588:	e0fffc0b 	ldhu	r3,-16(fp)
   2158c:	e0bffe0b 	ldhu	r2,-8(fp)
   21590:	1885883a 	add	r2,r3,r2
   21594:	11bfffcc 	andi	r6,r2,65535
   21598:	e0fffd0b 	ldhu	r3,-12(fp)
   2159c:	e0bfff0b 	ldhu	r2,-4(fp)
   215a0:	1885883a 	add	r2,r3,r2
   215a4:	10ffffcc 	andi	r3,r2,65535
   215a8:	e0800217 	ldw	r2,8(fp)
   215ac:	d8800015 	stw	r2,0(sp)
   215b0:	180f883a 	mov	r7,r3
   215b4:	00211940 	call	21194 <SH1106_DrawLine>
	SH1106_DrawLine(x, y, x, y + h, c);         /* Left line */
   215b8:	e13ffc0b 	ldhu	r4,-16(fp)
   215bc:	e17ffd0b 	ldhu	r5,-12(fp)
   215c0:	e1bffc0b 	ldhu	r6,-16(fp)
   215c4:	e0fffd0b 	ldhu	r3,-12(fp)
   215c8:	e0bfff0b 	ldhu	r2,-4(fp)
   215cc:	1885883a 	add	r2,r3,r2
   215d0:	10ffffcc 	andi	r3,r2,65535
   215d4:	e0800217 	ldw	r2,8(fp)
   215d8:	d8800015 	stw	r2,0(sp)
   215dc:	180f883a 	mov	r7,r3
   215e0:	00211940 	call	21194 <SH1106_DrawLine>
	SH1106_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
   215e4:	e0fffc0b 	ldhu	r3,-16(fp)
   215e8:	e0bffe0b 	ldhu	r2,-8(fp)
   215ec:	1885883a 	add	r2,r3,r2
   215f0:	113fffcc 	andi	r4,r2,65535
   215f4:	e17ffd0b 	ldhu	r5,-12(fp)
   215f8:	e0fffc0b 	ldhu	r3,-16(fp)
   215fc:	e0bffe0b 	ldhu	r2,-8(fp)
   21600:	1885883a 	add	r2,r3,r2
   21604:	11bfffcc 	andi	r6,r2,65535
   21608:	e0fffd0b 	ldhu	r3,-12(fp)
   2160c:	e0bfff0b 	ldhu	r2,-4(fp)
   21610:	1885883a 	add	r2,r3,r2
   21614:	10ffffcc 	andi	r3,r2,65535
   21618:	e0800217 	ldw	r2,8(fp)
   2161c:	d8800015 	stw	r2,0(sp)
   21620:	180f883a 	mov	r7,r3
   21624:	00211940 	call	21194 <SH1106_DrawLine>
   21628:	00000106 	br	21630 <SH1106_DrawRectangle+0x17c>
	if (
		x >= SH1106_WIDTH ||
		y >= SH1106_HEIGHT
	) {
		/* Return error */
		return;
   2162c:	0001883a 	nop
	/* Draw 4 lines */
	SH1106_DrawLine(x, y, x + w, y, c);         /* Top line */
	SH1106_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SH1106_DrawLine(x, y, x, y + h, c);         /* Left line */
	SH1106_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}
   21630:	e037883a 	mov	sp,fp
   21634:	dfc00117 	ldw	ra,4(sp)
   21638:	df000017 	ldw	fp,0(sp)
   2163c:	dec00204 	addi	sp,sp,8
   21640:	f800283a 	ret

00021644 <SH1106_DrawFilledRectangle>:

void SH1106_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SH1106_COLOR_t c) {
   21644:	defff804 	addi	sp,sp,-32
   21648:	dfc00715 	stw	ra,28(sp)
   2164c:	df000615 	stw	fp,24(sp)
   21650:	df000604 	addi	fp,sp,24
   21654:	2011883a 	mov	r8,r4
   21658:	2809883a 	mov	r4,r5
   2165c:	3007883a 	mov	r3,r6
   21660:	3805883a 	mov	r2,r7
   21664:	e23ffc0d 	sth	r8,-16(fp)
   21668:	e13ffd0d 	sth	r4,-12(fp)
   2166c:	e0fffe0d 	sth	r3,-8(fp)
   21670:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t i;

	/* Check input parameters */
	if (
   21674:	e0bffc0b 	ldhu	r2,-16(fp)
   21678:	10802028 	cmpgeui	r2,r2,128
   2167c:	1000301e 	bne	r2,zero,21740 <SH1106_DrawFilledRectangle+0xfc>
		x >= SH1106_WIDTH ||
   21680:	e0bffd0b 	ldhu	r2,-12(fp)
   21684:	10801030 	cmpltui	r2,r2,64
   21688:	10002d26 	beq	r2,zero,21740 <SH1106_DrawFilledRectangle+0xfc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SH1106_WIDTH) {
   2168c:	e0fffc0b 	ldhu	r3,-16(fp)
   21690:	e0bffe0b 	ldhu	r2,-8(fp)
   21694:	1885883a 	add	r2,r3,r2
   21698:	10802010 	cmplti	r2,r2,128
   2169c:	1000041e 	bne	r2,zero,216b0 <SH1106_DrawFilledRectangle+0x6c>
		w = SH1106_WIDTH - x;
   216a0:	e0bffc0b 	ldhu	r2,-16(fp)
   216a4:	00c02004 	movi	r3,128
   216a8:	1885c83a 	sub	r2,r3,r2
   216ac:	e0bffe0d 	sth	r2,-8(fp)
	}
	if ((y + h) >= SH1106_HEIGHT) {
   216b0:	e0fffd0b 	ldhu	r3,-12(fp)
   216b4:	e0bfff0b 	ldhu	r2,-4(fp)
   216b8:	1885883a 	add	r2,r3,r2
   216bc:	10801010 	cmplti	r2,r2,64
   216c0:	1000041e 	bne	r2,zero,216d4 <SH1106_DrawFilledRectangle+0x90>
		h = SH1106_HEIGHT - y;
   216c4:	e0bffd0b 	ldhu	r2,-12(fp)
   216c8:	00c01004 	movi	r3,64
   216cc:	1885c83a 	sub	r2,r3,r2
   216d0:	e0bfff0d 	sth	r2,-4(fp)
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
   216d4:	e03ffb05 	stb	zero,-20(fp)
   216d8:	00001406 	br	2172c <SH1106_DrawFilledRectangle+0xe8>
		/* Draw lines */
		SH1106_DrawLine(x, y + i, x + w, y + i, c);
   216dc:	e13ffc0b 	ldhu	r4,-16(fp)
   216e0:	e0fffb03 	ldbu	r3,-20(fp)
   216e4:	e0bffd0b 	ldhu	r2,-12(fp)
   216e8:	1885883a 	add	r2,r3,r2
   216ec:	117fffcc 	andi	r5,r2,65535
   216f0:	e0fffc0b 	ldhu	r3,-16(fp)
   216f4:	e0bffe0b 	ldhu	r2,-8(fp)
   216f8:	1885883a 	add	r2,r3,r2
   216fc:	11bfffcc 	andi	r6,r2,65535
   21700:	e0fffb03 	ldbu	r3,-20(fp)
   21704:	e0bffd0b 	ldhu	r2,-12(fp)
   21708:	1885883a 	add	r2,r3,r2
   2170c:	10ffffcc 	andi	r3,r2,65535
   21710:	e0800217 	ldw	r2,8(fp)
   21714:	d8800015 	stw	r2,0(sp)
   21718:	180f883a 	mov	r7,r3
   2171c:	00211940 	call	21194 <SH1106_DrawLine>
	if ((y + h) >= SH1106_HEIGHT) {
		h = SH1106_HEIGHT - y;
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
   21720:	e0bffb03 	ldbu	r2,-20(fp)
   21724:	10800044 	addi	r2,r2,1
   21728:	e0bffb05 	stb	r2,-20(fp)
   2172c:	e0bffb03 	ldbu	r2,-20(fp)
   21730:	10bfffcc 	andi	r2,r2,65535
   21734:	e0ffff0b 	ldhu	r3,-4(fp)
   21738:	18bfe82e 	bgeu	r3,r2,216dc <__alt_data_end+0xfffe16dc>
   2173c:	00000106 	br	21744 <SH1106_DrawFilledRectangle+0x100>
	if (
		x >= SH1106_WIDTH ||
		y >= SH1106_HEIGHT
	) {
		/* Return error */
		return;
   21740:	0001883a 	nop
	/* Draw lines */
	for (i = 0; i <= h; i++) {
		/* Draw lines */
		SH1106_DrawLine(x, y + i, x + w, y + i, c);
	}
}
   21744:	e037883a 	mov	sp,fp
   21748:	dfc00117 	ldw	ra,4(sp)
   2174c:	df000017 	ldw	fp,0(sp)
   21750:	dec00204 	addi	sp,sp,8
   21754:	f800283a 	ret

00021758 <SH1106_DrawTriangle>:

void SH1106_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SH1106_COLOR_t color) {
   21758:	defff704 	addi	sp,sp,-36
   2175c:	dfc00815 	stw	ra,32(sp)
   21760:	df000715 	stw	fp,28(sp)
   21764:	df000704 	addi	fp,sp,28
   21768:	2013883a 	mov	r9,r4
   2176c:	2811883a 	mov	r8,r5
   21770:	300b883a 	mov	r5,r6
   21774:	3809883a 	mov	r4,r7
   21778:	e0c00217 	ldw	r3,8(fp)
   2177c:	e0800317 	ldw	r2,12(fp)
   21780:	e27ffa0d 	sth	r9,-24(fp)
   21784:	e23ffb0d 	sth	r8,-20(fp)
   21788:	e17ffc0d 	sth	r5,-16(fp)
   2178c:	e13ffd0d 	sth	r4,-12(fp)
   21790:	e0fffe0d 	sth	r3,-8(fp)
   21794:	e0bfff0d 	sth	r2,-4(fp)
	/* Draw lines */
	SH1106_DrawLine(x1, y1, x2, y2, color);
   21798:	e0fffa0b 	ldhu	r3,-24(fp)
   2179c:	e13ffb0b 	ldhu	r4,-20(fp)
   217a0:	e17ffc0b 	ldhu	r5,-16(fp)
   217a4:	e1bffd0b 	ldhu	r6,-12(fp)
   217a8:	e0800417 	ldw	r2,16(fp)
   217ac:	d8800015 	stw	r2,0(sp)
   217b0:	300f883a 	mov	r7,r6
   217b4:	280d883a 	mov	r6,r5
   217b8:	200b883a 	mov	r5,r4
   217bc:	1809883a 	mov	r4,r3
   217c0:	00211940 	call	21194 <SH1106_DrawLine>
	SH1106_DrawLine(x2, y2, x3, y3, color);
   217c4:	e0fffc0b 	ldhu	r3,-16(fp)
   217c8:	e13ffd0b 	ldhu	r4,-12(fp)
   217cc:	e17ffe0b 	ldhu	r5,-8(fp)
   217d0:	e1bfff0b 	ldhu	r6,-4(fp)
   217d4:	e0800417 	ldw	r2,16(fp)
   217d8:	d8800015 	stw	r2,0(sp)
   217dc:	300f883a 	mov	r7,r6
   217e0:	280d883a 	mov	r6,r5
   217e4:	200b883a 	mov	r5,r4
   217e8:	1809883a 	mov	r4,r3
   217ec:	00211940 	call	21194 <SH1106_DrawLine>
	SH1106_DrawLine(x3, y3, x1, y1, color);
   217f0:	e0fffe0b 	ldhu	r3,-8(fp)
   217f4:	e13fff0b 	ldhu	r4,-4(fp)
   217f8:	e17ffa0b 	ldhu	r5,-24(fp)
   217fc:	e1bffb0b 	ldhu	r6,-20(fp)
   21800:	e0800417 	ldw	r2,16(fp)
   21804:	d8800015 	stw	r2,0(sp)
   21808:	300f883a 	mov	r7,r6
   2180c:	280d883a 	mov	r6,r5
   21810:	200b883a 	mov	r5,r4
   21814:	1809883a 	mov	r4,r3
   21818:	00211940 	call	21194 <SH1106_DrawLine>
}
   2181c:	0001883a 	nop
   21820:	e037883a 	mov	sp,fp
   21824:	dfc00117 	ldw	ra,4(sp)
   21828:	df000017 	ldw	fp,0(sp)
   2182c:	dec00204 	addi	sp,sp,8
   21830:	f800283a 	ret

00021834 <SH1106_DrawFilledTriangle>:


void SH1106_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SH1106_COLOR_t color) {
   21834:	defff004 	addi	sp,sp,-64
   21838:	dfc00f15 	stw	ra,60(sp)
   2183c:	df000e15 	stw	fp,56(sp)
   21840:	df000e04 	addi	fp,sp,56
   21844:	2013883a 	mov	r9,r4
   21848:	2811883a 	mov	r8,r5
   2184c:	300b883a 	mov	r5,r6
   21850:	3809883a 	mov	r4,r7
   21854:	e0c00217 	ldw	r3,8(fp)
   21858:	e0800317 	ldw	r2,12(fp)
   2185c:	e27ffa0d 	sth	r9,-24(fp)
   21860:	e23ffb0d 	sth	r8,-20(fp)
   21864:	e17ffc0d 	sth	r5,-16(fp)
   21868:	e13ffd0d 	sth	r4,-12(fp)
   2186c:	e0fffe0d 	sth	r3,-8(fp)
   21870:	e0bfff0d 	sth	r2,-4(fp)
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
   21874:	e03ff88d 	sth	zero,-30(fp)
   21878:	e03ff90d 	sth	zero,-28(fp)
   2187c:	e03ff30d 	sth	zero,-52(fp)
   21880:	e03ff38d 	sth	zero,-50(fp)
   21884:	e03ff40d 	sth	zero,-48(fp)
   21888:	e03ff48d 	sth	zero,-46(fp)
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
   2188c:	e03ff50d 	sth	zero,-44(fp)
   21890:	e03ff58d 	sth	zero,-42(fp)
   21894:	e03ff60d 	sth	zero,-40(fp)
   21898:	e03ff68d 	sth	zero,-38(fp)
   2189c:	e03ff70d 	sth	zero,-36(fp)
   218a0:	e03ff78d 	sth	zero,-34(fp)
	curpixel = 0;
   218a4:	e03ff80d 	sth	zero,-32(fp)

	deltax = ABS(x2 - x1);
   218a8:	e0fffc0b 	ldhu	r3,-16(fp)
   218ac:	e0bffa0b 	ldhu	r2,-24(fp)
   218b0:	1885c83a 	sub	r2,r3,r2
   218b4:	1000010e 	bge	r2,zero,218bc <SH1106_DrawFilledTriangle+0x88>
   218b8:	0085c83a 	sub	r2,zero,r2
   218bc:	e0bff88d 	sth	r2,-30(fp)
	deltay = ABS(y2 - y1);
   218c0:	e0fffd0b 	ldhu	r3,-12(fp)
   218c4:	e0bffb0b 	ldhu	r2,-20(fp)
   218c8:	1885c83a 	sub	r2,r3,r2
   218cc:	1000010e 	bge	r2,zero,218d4 <SH1106_DrawFilledTriangle+0xa0>
   218d0:	0085c83a 	sub	r2,zero,r2
   218d4:	e0bff90d 	sth	r2,-28(fp)
	x = x1;
   218d8:	e0bffa0b 	ldhu	r2,-24(fp)
   218dc:	e0bff30d 	sth	r2,-52(fp)
	y = y1;
   218e0:	e0bffb0b 	ldhu	r2,-20(fp)
   218e4:	e0bff38d 	sth	r2,-50(fp)

	if (x2 >= x1) {
   218e8:	e0fffc0b 	ldhu	r3,-16(fp)
   218ec:	e0bffa0b 	ldhu	r2,-24(fp)
   218f0:	18800536 	bltu	r3,r2,21908 <SH1106_DrawFilledTriangle+0xd4>
		xinc1 = 1;
   218f4:	00800044 	movi	r2,1
   218f8:	e0bff40d 	sth	r2,-48(fp)
		xinc2 = 1;
   218fc:	00800044 	movi	r2,1
   21900:	e0bff48d 	sth	r2,-46(fp)
   21904:	00000406 	br	21918 <SH1106_DrawFilledTriangle+0xe4>
	} else {
		xinc1 = -1;
   21908:	00bfffc4 	movi	r2,-1
   2190c:	e0bff40d 	sth	r2,-48(fp)
		xinc2 = -1;
   21910:	00bfffc4 	movi	r2,-1
   21914:	e0bff48d 	sth	r2,-46(fp)
	}

	if (y2 >= y1) {
   21918:	e0fffd0b 	ldhu	r3,-12(fp)
   2191c:	e0bffb0b 	ldhu	r2,-20(fp)
   21920:	18800536 	bltu	r3,r2,21938 <SH1106_DrawFilledTriangle+0x104>
		yinc1 = 1;
   21924:	00800044 	movi	r2,1
   21928:	e0bff50d 	sth	r2,-44(fp)
		yinc2 = 1;
   2192c:	00800044 	movi	r2,1
   21930:	e0bff58d 	sth	r2,-42(fp)
   21934:	00000406 	br	21948 <SH1106_DrawFilledTriangle+0x114>
	} else {
		yinc1 = -1;
   21938:	00bfffc4 	movi	r2,-1
   2193c:	e0bff50d 	sth	r2,-44(fp)
		yinc2 = -1;
   21940:	00bfffc4 	movi	r2,-1
   21944:	e0bff58d 	sth	r2,-42(fp)
	}

	if (deltax >= deltay){
   21948:	e0fff88f 	ldh	r3,-30(fp)
   2194c:	e0bff90f 	ldh	r2,-28(fp)
   21950:	18800e16 	blt	r3,r2,2198c <SH1106_DrawFilledTriangle+0x158>
		xinc1 = 0;
   21954:	e03ff40d 	sth	zero,-48(fp)
		yinc2 = 0;
   21958:	e03ff58d 	sth	zero,-42(fp)
		den = deltax;
   2195c:	e0bff88b 	ldhu	r2,-30(fp)
   21960:	e0bff60d 	sth	r2,-40(fp)
		num = deltax / 2;
   21964:	e0bff88f 	ldh	r2,-30(fp)
   21968:	1006d7fa 	srli	r3,r2,31
   2196c:	1885883a 	add	r2,r3,r2
   21970:	1005d07a 	srai	r2,r2,1
   21974:	e0bff68d 	sth	r2,-38(fp)
		numadd = deltay;
   21978:	e0bff90b 	ldhu	r2,-28(fp)
   2197c:	e0bff70d 	sth	r2,-36(fp)
		numpixels = deltax;
   21980:	e0bff88b 	ldhu	r2,-30(fp)
   21984:	e0bff78d 	sth	r2,-34(fp)
   21988:	00000d06 	br	219c0 <SH1106_DrawFilledTriangle+0x18c>
	} else {
		xinc2 = 0;
   2198c:	e03ff48d 	sth	zero,-46(fp)
		yinc1 = 0;
   21990:	e03ff50d 	sth	zero,-44(fp)
		den = deltay;
   21994:	e0bff90b 	ldhu	r2,-28(fp)
   21998:	e0bff60d 	sth	r2,-40(fp)
		num = deltay / 2;
   2199c:	e0bff90f 	ldh	r2,-28(fp)
   219a0:	1006d7fa 	srli	r3,r2,31
   219a4:	1885883a 	add	r2,r3,r2
   219a8:	1005d07a 	srai	r2,r2,1
   219ac:	e0bff68d 	sth	r2,-38(fp)
		numadd = deltax;
   219b0:	e0bff88b 	ldhu	r2,-30(fp)
   219b4:	e0bff70d 	sth	r2,-36(fp)
		numpixels = deltay;
   219b8:	e0bff90b 	ldhu	r2,-28(fp)
   219bc:	e0bff78d 	sth	r2,-34(fp)
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
   219c0:	e03ff80d 	sth	zero,-32(fp)
   219c4:	00002b06 	br	21a74 <SH1106_DrawFilledTriangle+0x240>
		SH1106_DrawLine(x, y, x3, y3, color);
   219c8:	e0bff30b 	ldhu	r2,-52(fp)
   219cc:	10ffffcc 	andi	r3,r2,65535
   219d0:	e0bff38b 	ldhu	r2,-50(fp)
   219d4:	113fffcc 	andi	r4,r2,65535
   219d8:	e17ffe0b 	ldhu	r5,-8(fp)
   219dc:	e1bfff0b 	ldhu	r6,-4(fp)
   219e0:	e0800417 	ldw	r2,16(fp)
   219e4:	d8800015 	stw	r2,0(sp)
   219e8:	300f883a 	mov	r7,r6
   219ec:	280d883a 	mov	r6,r5
   219f0:	200b883a 	mov	r5,r4
   219f4:	1809883a 	mov	r4,r3
   219f8:	00211940 	call	21194 <SH1106_DrawLine>

		num += numadd;
   219fc:	e0fff68b 	ldhu	r3,-38(fp)
   21a00:	e0bff70b 	ldhu	r2,-36(fp)
   21a04:	1885883a 	add	r2,r3,r2
   21a08:	e0bff68d 	sth	r2,-38(fp)
		if (num >= den) {
   21a0c:	e0fff68f 	ldh	r3,-38(fp)
   21a10:	e0bff60f 	ldh	r2,-40(fp)
   21a14:	18800c16 	blt	r3,r2,21a48 <SH1106_DrawFilledTriangle+0x214>
			num -= den;
   21a18:	e0fff68b 	ldhu	r3,-38(fp)
   21a1c:	e0bff60b 	ldhu	r2,-40(fp)
   21a20:	1885c83a 	sub	r2,r3,r2
   21a24:	e0bff68d 	sth	r2,-38(fp)
			x += xinc1;
   21a28:	e0fff30b 	ldhu	r3,-52(fp)
   21a2c:	e0bff40b 	ldhu	r2,-48(fp)
   21a30:	1885883a 	add	r2,r3,r2
   21a34:	e0bff30d 	sth	r2,-52(fp)
			y += yinc1;
   21a38:	e0fff38b 	ldhu	r3,-50(fp)
   21a3c:	e0bff50b 	ldhu	r2,-44(fp)
   21a40:	1885883a 	add	r2,r3,r2
   21a44:	e0bff38d 	sth	r2,-50(fp)
		}
		x += xinc2;
   21a48:	e0fff30b 	ldhu	r3,-52(fp)
   21a4c:	e0bff48b 	ldhu	r2,-46(fp)
   21a50:	1885883a 	add	r2,r3,r2
   21a54:	e0bff30d 	sth	r2,-52(fp)
		y += yinc2;
   21a58:	e0fff38b 	ldhu	r3,-50(fp)
   21a5c:	e0bff58b 	ldhu	r2,-42(fp)
   21a60:	1885883a 	add	r2,r3,r2
   21a64:	e0bff38d 	sth	r2,-50(fp)
		num = deltay / 2;
		numadd = deltax;
		numpixels = deltay;
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
   21a68:	e0bff80b 	ldhu	r2,-32(fp)
   21a6c:	10800044 	addi	r2,r2,1
   21a70:	e0bff80d 	sth	r2,-32(fp)
   21a74:	e0bff80f 	ldh	r2,-32(fp)
   21a78:	e0fff78f 	ldh	r3,-34(fp)
   21a7c:	18bfd20e 	bge	r3,r2,219c8 <__alt_data_end+0xfffe19c8>
			y += yinc1;
		}
		x += xinc2;
		y += yinc2;
	}
}
   21a80:	0001883a 	nop
   21a84:	e037883a 	mov	sp,fp
   21a88:	dfc00117 	ldw	ra,4(sp)
   21a8c:	df000017 	ldw	fp,0(sp)
   21a90:	dec00204 	addi	sp,sp,8
   21a94:	f800283a 	ret

00021a98 <SH1106_DrawCircle>:

void SH1106_DrawCircle(int16_t x0, int16_t y0, int16_t r, SH1106_COLOR_t c) {
   21a98:	defff704 	addi	sp,sp,-36
   21a9c:	dfc00815 	stw	ra,32(sp)
   21aa0:	df000715 	stw	fp,28(sp)
   21aa4:	df000704 	addi	fp,sp,28
   21aa8:	2807883a 	mov	r3,r5
   21aac:	3005883a 	mov	r2,r6
   21ab0:	e1ffff15 	stw	r7,-4(fp)
   21ab4:	e13ffc0d 	sth	r4,-16(fp)
   21ab8:	e0fffd0d 	sth	r3,-12(fp)
   21abc:	e0bffe0d 	sth	r2,-8(fp)
	int16_t f = 1 - r;
   21ac0:	e0bffe0b 	ldhu	r2,-8(fp)
   21ac4:	00c00044 	movi	r3,1
   21ac8:	1885c83a 	sub	r2,r3,r2
   21acc:	e0bff90d 	sth	r2,-28(fp)
	int16_t ddF_x = 1;
   21ad0:	00800044 	movi	r2,1
   21ad4:	e0bff98d 	sth	r2,-26(fp)
	int16_t ddF_y = -2 * r;
   21ad8:	e0bffe0b 	ldhu	r2,-8(fp)
   21adc:	0007883a 	mov	r3,zero
   21ae0:	1885c83a 	sub	r2,r3,r2
   21ae4:	1085883a 	add	r2,r2,r2
   21ae8:	e0bffa0d 	sth	r2,-24(fp)
	int16_t x = 0;
   21aec:	e03ffa8d 	sth	zero,-22(fp)
	int16_t y = r;
   21af0:	e0bffe0b 	ldhu	r2,-8(fp)
   21af4:	e0bffb0d 	sth	r2,-20(fp)

    SH1106_DrawPixel(x0, y0 + r, c);
   21af8:	e0bffc0b 	ldhu	r2,-16(fp)
   21afc:	113fffcc 	andi	r4,r2,65535
   21b00:	e0fffd0b 	ldhu	r3,-12(fp)
   21b04:	e0bffe0b 	ldhu	r2,-8(fp)
   21b08:	1885883a 	add	r2,r3,r2
   21b0c:	10bfffcc 	andi	r2,r2,65535
   21b10:	e1bfff17 	ldw	r6,-4(fp)
   21b14:	100b883a 	mov	r5,r2
   21b18:	0020d900 	call	20d90 <SH1106_DrawPixel>
    SH1106_DrawPixel(x0, y0 - r, c);
   21b1c:	e0bffc0b 	ldhu	r2,-16(fp)
   21b20:	113fffcc 	andi	r4,r2,65535
   21b24:	e0fffd0b 	ldhu	r3,-12(fp)
   21b28:	e0bffe0b 	ldhu	r2,-8(fp)
   21b2c:	1885c83a 	sub	r2,r3,r2
   21b30:	10bfffcc 	andi	r2,r2,65535
   21b34:	e1bfff17 	ldw	r6,-4(fp)
   21b38:	100b883a 	mov	r5,r2
   21b3c:	0020d900 	call	20d90 <SH1106_DrawPixel>
    SH1106_DrawPixel(x0 + r, y0, c);
   21b40:	e0fffc0b 	ldhu	r3,-16(fp)
   21b44:	e0bffe0b 	ldhu	r2,-8(fp)
   21b48:	1885883a 	add	r2,r3,r2
   21b4c:	10bfffcc 	andi	r2,r2,65535
   21b50:	e0fffd0b 	ldhu	r3,-12(fp)
   21b54:	18ffffcc 	andi	r3,r3,65535
   21b58:	e1bfff17 	ldw	r6,-4(fp)
   21b5c:	180b883a 	mov	r5,r3
   21b60:	1009883a 	mov	r4,r2
   21b64:	0020d900 	call	20d90 <SH1106_DrawPixel>
    SH1106_DrawPixel(x0 - r, y0, c);
   21b68:	e0fffc0b 	ldhu	r3,-16(fp)
   21b6c:	e0bffe0b 	ldhu	r2,-8(fp)
   21b70:	1885c83a 	sub	r2,r3,r2
   21b74:	10bfffcc 	andi	r2,r2,65535
   21b78:	e0fffd0b 	ldhu	r3,-12(fp)
   21b7c:	18ffffcc 	andi	r3,r3,65535
   21b80:	e1bfff17 	ldw	r6,-4(fp)
   21b84:	180b883a 	mov	r5,r3
   21b88:	1009883a 	mov	r4,r2
   21b8c:	0020d900 	call	20d90 <SH1106_DrawPixel>

    while (x < y) {
   21b90:	00006e06 	br	21d4c <SH1106_DrawCircle+0x2b4>
        if (f >= 0) {
   21b94:	e0bff90f 	ldh	r2,-28(fp)
   21b98:	10000a16 	blt	r2,zero,21bc4 <SH1106_DrawCircle+0x12c>
            y--;
   21b9c:	e0bffb0b 	ldhu	r2,-20(fp)
   21ba0:	10bfffc4 	addi	r2,r2,-1
   21ba4:	e0bffb0d 	sth	r2,-20(fp)
            ddF_y += 2;
   21ba8:	e0bffa0b 	ldhu	r2,-24(fp)
   21bac:	10800084 	addi	r2,r2,2
   21bb0:	e0bffa0d 	sth	r2,-24(fp)
            f += ddF_y;
   21bb4:	e0fff90b 	ldhu	r3,-28(fp)
   21bb8:	e0bffa0b 	ldhu	r2,-24(fp)
   21bbc:	1885883a 	add	r2,r3,r2
   21bc0:	e0bff90d 	sth	r2,-28(fp)
        }
        x++;
   21bc4:	e0bffa8b 	ldhu	r2,-22(fp)
   21bc8:	10800044 	addi	r2,r2,1
   21bcc:	e0bffa8d 	sth	r2,-22(fp)
        ddF_x += 2;
   21bd0:	e0bff98b 	ldhu	r2,-26(fp)
   21bd4:	10800084 	addi	r2,r2,2
   21bd8:	e0bff98d 	sth	r2,-26(fp)
        f += ddF_x;
   21bdc:	e0fff90b 	ldhu	r3,-28(fp)
   21be0:	e0bff98b 	ldhu	r2,-26(fp)
   21be4:	1885883a 	add	r2,r3,r2
   21be8:	e0bff90d 	sth	r2,-28(fp)

        SH1106_DrawPixel(x0 + x, y0 + y, c);
   21bec:	e0fffc0b 	ldhu	r3,-16(fp)
   21bf0:	e0bffa8b 	ldhu	r2,-22(fp)
   21bf4:	1885883a 	add	r2,r3,r2
   21bf8:	113fffcc 	andi	r4,r2,65535
   21bfc:	e0fffd0b 	ldhu	r3,-12(fp)
   21c00:	e0bffb0b 	ldhu	r2,-20(fp)
   21c04:	1885883a 	add	r2,r3,r2
   21c08:	10bfffcc 	andi	r2,r2,65535
   21c0c:	e1bfff17 	ldw	r6,-4(fp)
   21c10:	100b883a 	mov	r5,r2
   21c14:	0020d900 	call	20d90 <SH1106_DrawPixel>
        SH1106_DrawPixel(x0 - x, y0 + y, c);
   21c18:	e0fffc0b 	ldhu	r3,-16(fp)
   21c1c:	e0bffa8b 	ldhu	r2,-22(fp)
   21c20:	1885c83a 	sub	r2,r3,r2
   21c24:	113fffcc 	andi	r4,r2,65535
   21c28:	e0fffd0b 	ldhu	r3,-12(fp)
   21c2c:	e0bffb0b 	ldhu	r2,-20(fp)
   21c30:	1885883a 	add	r2,r3,r2
   21c34:	10bfffcc 	andi	r2,r2,65535
   21c38:	e1bfff17 	ldw	r6,-4(fp)
   21c3c:	100b883a 	mov	r5,r2
   21c40:	0020d900 	call	20d90 <SH1106_DrawPixel>
        SH1106_DrawPixel(x0 + x, y0 - y, c);
   21c44:	e0fffc0b 	ldhu	r3,-16(fp)
   21c48:	e0bffa8b 	ldhu	r2,-22(fp)
   21c4c:	1885883a 	add	r2,r3,r2
   21c50:	113fffcc 	andi	r4,r2,65535
   21c54:	e0fffd0b 	ldhu	r3,-12(fp)
   21c58:	e0bffb0b 	ldhu	r2,-20(fp)
   21c5c:	1885c83a 	sub	r2,r3,r2
   21c60:	10bfffcc 	andi	r2,r2,65535
   21c64:	e1bfff17 	ldw	r6,-4(fp)
   21c68:	100b883a 	mov	r5,r2
   21c6c:	0020d900 	call	20d90 <SH1106_DrawPixel>
        SH1106_DrawPixel(x0 - x, y0 - y, c);
   21c70:	e0fffc0b 	ldhu	r3,-16(fp)
   21c74:	e0bffa8b 	ldhu	r2,-22(fp)
   21c78:	1885c83a 	sub	r2,r3,r2
   21c7c:	113fffcc 	andi	r4,r2,65535
   21c80:	e0fffd0b 	ldhu	r3,-12(fp)
   21c84:	e0bffb0b 	ldhu	r2,-20(fp)
   21c88:	1885c83a 	sub	r2,r3,r2
   21c8c:	10bfffcc 	andi	r2,r2,65535
   21c90:	e1bfff17 	ldw	r6,-4(fp)
   21c94:	100b883a 	mov	r5,r2
   21c98:	0020d900 	call	20d90 <SH1106_DrawPixel>

        SH1106_DrawPixel(x0 + y, y0 + x, c);
   21c9c:	e0fffc0b 	ldhu	r3,-16(fp)
   21ca0:	e0bffb0b 	ldhu	r2,-20(fp)
   21ca4:	1885883a 	add	r2,r3,r2
   21ca8:	113fffcc 	andi	r4,r2,65535
   21cac:	e0fffd0b 	ldhu	r3,-12(fp)
   21cb0:	e0bffa8b 	ldhu	r2,-22(fp)
   21cb4:	1885883a 	add	r2,r3,r2
   21cb8:	10bfffcc 	andi	r2,r2,65535
   21cbc:	e1bfff17 	ldw	r6,-4(fp)
   21cc0:	100b883a 	mov	r5,r2
   21cc4:	0020d900 	call	20d90 <SH1106_DrawPixel>
        SH1106_DrawPixel(x0 - y, y0 + x, c);
   21cc8:	e0fffc0b 	ldhu	r3,-16(fp)
   21ccc:	e0bffb0b 	ldhu	r2,-20(fp)
   21cd0:	1885c83a 	sub	r2,r3,r2
   21cd4:	113fffcc 	andi	r4,r2,65535
   21cd8:	e0fffd0b 	ldhu	r3,-12(fp)
   21cdc:	e0bffa8b 	ldhu	r2,-22(fp)
   21ce0:	1885883a 	add	r2,r3,r2
   21ce4:	10bfffcc 	andi	r2,r2,65535
   21ce8:	e1bfff17 	ldw	r6,-4(fp)
   21cec:	100b883a 	mov	r5,r2
   21cf0:	0020d900 	call	20d90 <SH1106_DrawPixel>
        SH1106_DrawPixel(x0 + y, y0 - x, c);
   21cf4:	e0fffc0b 	ldhu	r3,-16(fp)
   21cf8:	e0bffb0b 	ldhu	r2,-20(fp)
   21cfc:	1885883a 	add	r2,r3,r2
   21d00:	113fffcc 	andi	r4,r2,65535
   21d04:	e0fffd0b 	ldhu	r3,-12(fp)
   21d08:	e0bffa8b 	ldhu	r2,-22(fp)
   21d0c:	1885c83a 	sub	r2,r3,r2
   21d10:	10bfffcc 	andi	r2,r2,65535
   21d14:	e1bfff17 	ldw	r6,-4(fp)
   21d18:	100b883a 	mov	r5,r2
   21d1c:	0020d900 	call	20d90 <SH1106_DrawPixel>
        SH1106_DrawPixel(x0 - y, y0 - x, c);
   21d20:	e0fffc0b 	ldhu	r3,-16(fp)
   21d24:	e0bffb0b 	ldhu	r2,-20(fp)
   21d28:	1885c83a 	sub	r2,r3,r2
   21d2c:	113fffcc 	andi	r4,r2,65535
   21d30:	e0fffd0b 	ldhu	r3,-12(fp)
   21d34:	e0bffa8b 	ldhu	r2,-22(fp)
   21d38:	1885c83a 	sub	r2,r3,r2
   21d3c:	10bfffcc 	andi	r2,r2,65535
   21d40:	e1bfff17 	ldw	r6,-4(fp)
   21d44:	100b883a 	mov	r5,r2
   21d48:	0020d900 	call	20d90 <SH1106_DrawPixel>
    SH1106_DrawPixel(x0, y0 + r, c);
    SH1106_DrawPixel(x0, y0 - r, c);
    SH1106_DrawPixel(x0 + r, y0, c);
    SH1106_DrawPixel(x0 - r, y0, c);

    while (x < y) {
   21d4c:	e0fffa8f 	ldh	r3,-22(fp)
   21d50:	e0bffb0f 	ldh	r2,-20(fp)
   21d54:	18bf8f16 	blt	r3,r2,21b94 <__alt_data_end+0xfffe1b94>
        SH1106_DrawPixel(x0 + y, y0 + x, c);
        SH1106_DrawPixel(x0 - y, y0 + x, c);
        SH1106_DrawPixel(x0 + y, y0 - x, c);
        SH1106_DrawPixel(x0 - y, y0 - x, c);
    }
}
   21d58:	0001883a 	nop
   21d5c:	e037883a 	mov	sp,fp
   21d60:	dfc00117 	ldw	ra,4(sp)
   21d64:	df000017 	ldw	fp,0(sp)
   21d68:	dec00204 	addi	sp,sp,8
   21d6c:	f800283a 	ret

00021d70 <SH1106_DrawFilledCircle>:

void SH1106_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SH1106_COLOR_t c) {
   21d70:	defff604 	addi	sp,sp,-40
   21d74:	dfc00915 	stw	ra,36(sp)
   21d78:	df000815 	stw	fp,32(sp)
   21d7c:	df000804 	addi	fp,sp,32
   21d80:	2807883a 	mov	r3,r5
   21d84:	3005883a 	mov	r2,r6
   21d88:	e1ffff15 	stw	r7,-4(fp)
   21d8c:	e13ffc0d 	sth	r4,-16(fp)
   21d90:	e0fffd0d 	sth	r3,-12(fp)
   21d94:	e0bffe0d 	sth	r2,-8(fp)
	int16_t f = 1 - r;
   21d98:	e0bffe0b 	ldhu	r2,-8(fp)
   21d9c:	00c00044 	movi	r3,1
   21da0:	1885c83a 	sub	r2,r3,r2
   21da4:	e0bff90d 	sth	r2,-28(fp)
	int16_t ddF_x = 1;
   21da8:	00800044 	movi	r2,1
   21dac:	e0bff98d 	sth	r2,-26(fp)
	int16_t ddF_y = -2 * r;
   21db0:	e0bffe0b 	ldhu	r2,-8(fp)
   21db4:	0007883a 	mov	r3,zero
   21db8:	1885c83a 	sub	r2,r3,r2
   21dbc:	1085883a 	add	r2,r2,r2
   21dc0:	e0bffa0d 	sth	r2,-24(fp)
	int16_t x = 0;
   21dc4:	e03ffa8d 	sth	zero,-22(fp)
	int16_t y = r;
   21dc8:	e0bffe0b 	ldhu	r2,-8(fp)
   21dcc:	e0bffb0d 	sth	r2,-20(fp)

    SH1106_DrawPixel(x0, y0 + r, c);
   21dd0:	e0bffc0b 	ldhu	r2,-16(fp)
   21dd4:	113fffcc 	andi	r4,r2,65535
   21dd8:	e0fffd0b 	ldhu	r3,-12(fp)
   21ddc:	e0bffe0b 	ldhu	r2,-8(fp)
   21de0:	1885883a 	add	r2,r3,r2
   21de4:	10bfffcc 	andi	r2,r2,65535
   21de8:	e1bfff17 	ldw	r6,-4(fp)
   21dec:	100b883a 	mov	r5,r2
   21df0:	0020d900 	call	20d90 <SH1106_DrawPixel>
    SH1106_DrawPixel(x0, y0 - r, c);
   21df4:	e0bffc0b 	ldhu	r2,-16(fp)
   21df8:	113fffcc 	andi	r4,r2,65535
   21dfc:	e0fffd0b 	ldhu	r3,-12(fp)
   21e00:	e0bffe0b 	ldhu	r2,-8(fp)
   21e04:	1885c83a 	sub	r2,r3,r2
   21e08:	10bfffcc 	andi	r2,r2,65535
   21e0c:	e1bfff17 	ldw	r6,-4(fp)
   21e10:	100b883a 	mov	r5,r2
   21e14:	0020d900 	call	20d90 <SH1106_DrawPixel>
    SH1106_DrawPixel(x0 + r, y0, c);
   21e18:	e0fffc0b 	ldhu	r3,-16(fp)
   21e1c:	e0bffe0b 	ldhu	r2,-8(fp)
   21e20:	1885883a 	add	r2,r3,r2
   21e24:	10bfffcc 	andi	r2,r2,65535
   21e28:	e0fffd0b 	ldhu	r3,-12(fp)
   21e2c:	18ffffcc 	andi	r3,r3,65535
   21e30:	e1bfff17 	ldw	r6,-4(fp)
   21e34:	180b883a 	mov	r5,r3
   21e38:	1009883a 	mov	r4,r2
   21e3c:	0020d900 	call	20d90 <SH1106_DrawPixel>
    SH1106_DrawPixel(x0 - r, y0, c);
   21e40:	e0fffc0b 	ldhu	r3,-16(fp)
   21e44:	e0bffe0b 	ldhu	r2,-8(fp)
   21e48:	1885c83a 	sub	r2,r3,r2
   21e4c:	10bfffcc 	andi	r2,r2,65535
   21e50:	e0fffd0b 	ldhu	r3,-12(fp)
   21e54:	18ffffcc 	andi	r3,r3,65535
   21e58:	e1bfff17 	ldw	r6,-4(fp)
   21e5c:	180b883a 	mov	r5,r3
   21e60:	1009883a 	mov	r4,r2
   21e64:	0020d900 	call	20d90 <SH1106_DrawPixel>
    SH1106_DrawLine(x0 - r, y0, x0 + r, y0, c);
   21e68:	e0fffc0b 	ldhu	r3,-16(fp)
   21e6c:	e0bffe0b 	ldhu	r2,-8(fp)
   21e70:	1885c83a 	sub	r2,r3,r2
   21e74:	113fffcc 	andi	r4,r2,65535
   21e78:	e0bffd0b 	ldhu	r2,-12(fp)
   21e7c:	117fffcc 	andi	r5,r2,65535
   21e80:	e0fffc0b 	ldhu	r3,-16(fp)
   21e84:	e0bffe0b 	ldhu	r2,-8(fp)
   21e88:	1885883a 	add	r2,r3,r2
   21e8c:	10ffffcc 	andi	r3,r2,65535
   21e90:	e0bffd0b 	ldhu	r2,-12(fp)
   21e94:	11bfffcc 	andi	r6,r2,65535
   21e98:	e0bfff17 	ldw	r2,-4(fp)
   21e9c:	d8800015 	stw	r2,0(sp)
   21ea0:	300f883a 	mov	r7,r6
   21ea4:	180d883a 	mov	r6,r3
   21ea8:	00211940 	call	21194 <SH1106_DrawLine>

    while (x < y) {
   21eac:	00006606 	br	22048 <SH1106_DrawFilledCircle+0x2d8>
        if (f >= 0) {
   21eb0:	e0bff90f 	ldh	r2,-28(fp)
   21eb4:	10000a16 	blt	r2,zero,21ee0 <SH1106_DrawFilledCircle+0x170>
            y--;
   21eb8:	e0bffb0b 	ldhu	r2,-20(fp)
   21ebc:	10bfffc4 	addi	r2,r2,-1
   21ec0:	e0bffb0d 	sth	r2,-20(fp)
            ddF_y += 2;
   21ec4:	e0bffa0b 	ldhu	r2,-24(fp)
   21ec8:	10800084 	addi	r2,r2,2
   21ecc:	e0bffa0d 	sth	r2,-24(fp)
            f += ddF_y;
   21ed0:	e0fff90b 	ldhu	r3,-28(fp)
   21ed4:	e0bffa0b 	ldhu	r2,-24(fp)
   21ed8:	1885883a 	add	r2,r3,r2
   21edc:	e0bff90d 	sth	r2,-28(fp)
        }
        x++;
   21ee0:	e0bffa8b 	ldhu	r2,-22(fp)
   21ee4:	10800044 	addi	r2,r2,1
   21ee8:	e0bffa8d 	sth	r2,-22(fp)
        ddF_x += 2;
   21eec:	e0bff98b 	ldhu	r2,-26(fp)
   21ef0:	10800084 	addi	r2,r2,2
   21ef4:	e0bff98d 	sth	r2,-26(fp)
        f += ddF_x;
   21ef8:	e0fff90b 	ldhu	r3,-28(fp)
   21efc:	e0bff98b 	ldhu	r2,-26(fp)
   21f00:	1885883a 	add	r2,r3,r2
   21f04:	e0bff90d 	sth	r2,-28(fp)

        SH1106_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
   21f08:	e0fffc0b 	ldhu	r3,-16(fp)
   21f0c:	e0bffa8b 	ldhu	r2,-22(fp)
   21f10:	1885c83a 	sub	r2,r3,r2
   21f14:	113fffcc 	andi	r4,r2,65535
   21f18:	e0fffd0b 	ldhu	r3,-12(fp)
   21f1c:	e0bffb0b 	ldhu	r2,-20(fp)
   21f20:	1885883a 	add	r2,r3,r2
   21f24:	117fffcc 	andi	r5,r2,65535
   21f28:	e0fffc0b 	ldhu	r3,-16(fp)
   21f2c:	e0bffa8b 	ldhu	r2,-22(fp)
   21f30:	1885883a 	add	r2,r3,r2
   21f34:	11bfffcc 	andi	r6,r2,65535
   21f38:	e0fffd0b 	ldhu	r3,-12(fp)
   21f3c:	e0bffb0b 	ldhu	r2,-20(fp)
   21f40:	1885883a 	add	r2,r3,r2
   21f44:	10ffffcc 	andi	r3,r2,65535
   21f48:	e0bfff17 	ldw	r2,-4(fp)
   21f4c:	d8800015 	stw	r2,0(sp)
   21f50:	180f883a 	mov	r7,r3
   21f54:	00211940 	call	21194 <SH1106_DrawLine>
        SH1106_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
   21f58:	e0fffc0b 	ldhu	r3,-16(fp)
   21f5c:	e0bffa8b 	ldhu	r2,-22(fp)
   21f60:	1885883a 	add	r2,r3,r2
   21f64:	113fffcc 	andi	r4,r2,65535
   21f68:	e0fffd0b 	ldhu	r3,-12(fp)
   21f6c:	e0bffb0b 	ldhu	r2,-20(fp)
   21f70:	1885c83a 	sub	r2,r3,r2
   21f74:	117fffcc 	andi	r5,r2,65535
   21f78:	e0fffc0b 	ldhu	r3,-16(fp)
   21f7c:	e0bffa8b 	ldhu	r2,-22(fp)
   21f80:	1885c83a 	sub	r2,r3,r2
   21f84:	11bfffcc 	andi	r6,r2,65535
   21f88:	e0fffd0b 	ldhu	r3,-12(fp)
   21f8c:	e0bffb0b 	ldhu	r2,-20(fp)
   21f90:	1885c83a 	sub	r2,r3,r2
   21f94:	10ffffcc 	andi	r3,r2,65535
   21f98:	e0bfff17 	ldw	r2,-4(fp)
   21f9c:	d8800015 	stw	r2,0(sp)
   21fa0:	180f883a 	mov	r7,r3
   21fa4:	00211940 	call	21194 <SH1106_DrawLine>

        SH1106_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
   21fa8:	e0fffc0b 	ldhu	r3,-16(fp)
   21fac:	e0bffb0b 	ldhu	r2,-20(fp)
   21fb0:	1885883a 	add	r2,r3,r2
   21fb4:	113fffcc 	andi	r4,r2,65535
   21fb8:	e0fffd0b 	ldhu	r3,-12(fp)
   21fbc:	e0bffa8b 	ldhu	r2,-22(fp)
   21fc0:	1885883a 	add	r2,r3,r2
   21fc4:	117fffcc 	andi	r5,r2,65535
   21fc8:	e0fffc0b 	ldhu	r3,-16(fp)
   21fcc:	e0bffb0b 	ldhu	r2,-20(fp)
   21fd0:	1885c83a 	sub	r2,r3,r2
   21fd4:	11bfffcc 	andi	r6,r2,65535
   21fd8:	e0fffd0b 	ldhu	r3,-12(fp)
   21fdc:	e0bffa8b 	ldhu	r2,-22(fp)
   21fe0:	1885883a 	add	r2,r3,r2
   21fe4:	10ffffcc 	andi	r3,r2,65535
   21fe8:	e0bfff17 	ldw	r2,-4(fp)
   21fec:	d8800015 	stw	r2,0(sp)
   21ff0:	180f883a 	mov	r7,r3
   21ff4:	00211940 	call	21194 <SH1106_DrawLine>
        SH1106_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
   21ff8:	e0fffc0b 	ldhu	r3,-16(fp)
   21ffc:	e0bffb0b 	ldhu	r2,-20(fp)
   22000:	1885883a 	add	r2,r3,r2
   22004:	113fffcc 	andi	r4,r2,65535
   22008:	e0fffd0b 	ldhu	r3,-12(fp)
   2200c:	e0bffa8b 	ldhu	r2,-22(fp)
   22010:	1885c83a 	sub	r2,r3,r2
   22014:	117fffcc 	andi	r5,r2,65535
   22018:	e0fffc0b 	ldhu	r3,-16(fp)
   2201c:	e0bffb0b 	ldhu	r2,-20(fp)
   22020:	1885c83a 	sub	r2,r3,r2
   22024:	11bfffcc 	andi	r6,r2,65535
   22028:	e0fffd0b 	ldhu	r3,-12(fp)
   2202c:	e0bffa8b 	ldhu	r2,-22(fp)
   22030:	1885c83a 	sub	r2,r3,r2
   22034:	10ffffcc 	andi	r3,r2,65535
   22038:	e0bfff17 	ldw	r2,-4(fp)
   2203c:	d8800015 	stw	r2,0(sp)
   22040:	180f883a 	mov	r7,r3
   22044:	00211940 	call	21194 <SH1106_DrawLine>
    SH1106_DrawPixel(x0, y0 - r, c);
    SH1106_DrawPixel(x0 + r, y0, c);
    SH1106_DrawPixel(x0 - r, y0, c);
    SH1106_DrawLine(x0 - r, y0, x0 + r, y0, c);

    while (x < y) {
   22048:	e0fffa8f 	ldh	r3,-22(fp)
   2204c:	e0bffb0f 	ldh	r2,-20(fp)
   22050:	18bf9716 	blt	r3,r2,21eb0 <__alt_data_end+0xfffe1eb0>
        SH1106_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);

        SH1106_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
        SH1106_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}
   22054:	0001883a 	nop
   22058:	e037883a 	mov	sp,fp
   2205c:	dfc00117 	ldw	ra,4(sp)
   22060:	df000017 	ldw	fp,0(sp)
   22064:	dec00204 	addi	sp,sp,8
   22068:	f800283a 	ret

0002206c <SH1106_Clear>:



void SH1106_Clear (void)
{
   2206c:	defffe04 	addi	sp,sp,-8
   22070:	dfc00115 	stw	ra,4(sp)
   22074:	df000015 	stw	fp,0(sp)
   22078:	d839883a 	mov	fp,sp
	SH1106_Fill (0);
   2207c:	0009883a 	mov	r4,zero
   22080:	0020d3c0 	call	20d3c <SH1106_Fill>
    SH1106_UpdateScreen();
   22084:	0020c100 	call	20c10 <SH1106_UpdateScreen>
}
   22088:	0001883a 	nop
   2208c:	e037883a 	mov	sp,fp
   22090:	dfc00117 	ldw	ra,4(sp)
   22094:	df000017 	ldw	fp,0(sp)
   22098:	dec00204 	addi	sp,sp,8
   2209c:	f800283a 	ret

000220a0 <SH1106_ON>:
void SH1106_ON(void) {
   220a0:	defffe04 	addi	sp,sp,-8
   220a4:	dfc00115 	stw	ra,4(sp)
   220a8:	df000015 	stw	fp,0(sp)
   220ac:	d839883a 	mov	fp,sp
	SH1106_WRITECOMMAND(0x8D);
   220b0:	01802344 	movi	r6,141
   220b4:	000b883a 	mov	r5,zero
   220b8:	01000f04 	movi	r4,60
   220bc:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x14);
   220c0:	01800504 	movi	r6,20
   220c4:	000b883a 	mov	r5,zero
   220c8:	01000f04 	movi	r4,60
   220cc:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAF);
   220d0:	01802bc4 	movi	r6,175
   220d4:	000b883a 	mov	r5,zero
   220d8:	01000f04 	movi	r4,60
   220dc:	002221c0 	call	2221c <SH1106_I2C_Write>
}
   220e0:	0001883a 	nop
   220e4:	e037883a 	mov	sp,fp
   220e8:	dfc00117 	ldw	ra,4(sp)
   220ec:	df000017 	ldw	fp,0(sp)
   220f0:	dec00204 	addi	sp,sp,8
   220f4:	f800283a 	ret

000220f8 <SH1106_OFF>:
void SH1106_OFF(void) {
   220f8:	defffe04 	addi	sp,sp,-8
   220fc:	dfc00115 	stw	ra,4(sp)
   22100:	df000015 	stw	fp,0(sp)
   22104:	d839883a 	mov	fp,sp
	SH1106_WRITECOMMAND(0x8D);
   22108:	01802344 	movi	r6,141
   2210c:	000b883a 	mov	r5,zero
   22110:	01000f04 	movi	r4,60
   22114:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x10);
   22118:	01800404 	movi	r6,16
   2211c:	000b883a 	mov	r5,zero
   22120:	01000f04 	movi	r4,60
   22124:	002221c0 	call	2221c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAE);
   22128:	01802b84 	movi	r6,174
   2212c:	000b883a 	mov	r5,zero
   22130:	01000f04 	movi	r4,60
   22134:	002221c0 	call	2221c <SH1106_I2C_Write>
}
   22138:	0001883a 	nop
   2213c:	e037883a 	mov	sp,fp
   22140:	dfc00117 	ldw	ra,4(sp)
   22144:	df000017 	ldw	fp,0(sp)
   22148:	dec00204 	addi	sp,sp,8
   2214c:	f800283a 	ret

00022150 <SH1106_I2C_WriteMulti>:

void SH1106_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
   22150:	deffb904 	addi	sp,sp,-284
   22154:	dfc04615 	stw	ra,280(sp)
   22158:	df004515 	stw	fp,276(sp)
   2215c:	df004504 	addi	fp,sp,276
   22160:	2807883a 	mov	r3,r5
   22164:	e1bffe15 	stw	r6,-8(fp)
   22168:	3805883a 	mov	r2,r7
   2216c:	e13ffc05 	stb	r4,-16(fp)
   22170:	e0fffd05 	stb	r3,-12(fp)
   22174:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t dt[256];
	dt[0] = reg;
   22178:	e0bffd03 	ldbu	r2,-12(fp)
   2217c:	e0bfbb45 	stb	r2,-275(fp)
	uint8_t i;
	for(i = 0; i < count; i++)
   22180:	e03fbb05 	stb	zero,-276(fp)
   22184:	00000c06 	br	221b8 <SH1106_I2C_WriteMulti+0x68>
		dt[i+1] = data[i];
   22188:	e0bfbb03 	ldbu	r2,-276(fp)
   2218c:	10800044 	addi	r2,r2,1
   22190:	e0ffbb03 	ldbu	r3,-276(fp)
   22194:	e13ffe17 	ldw	r4,-8(fp)
   22198:	20c7883a 	add	r3,r4,r3
   2219c:	18c00003 	ldbu	r3,0(r3)
   221a0:	e13fbb44 	addi	r4,fp,-275
   221a4:	2085883a 	add	r2,r4,r2
   221a8:	10c00005 	stb	r3,0(r2)

void SH1106_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
	uint8_t dt[256];
	dt[0] = reg;
	uint8_t i;
	for(i = 0; i < count; i++)
   221ac:	e0bfbb03 	ldbu	r2,-276(fp)
   221b0:	10800044 	addi	r2,r2,1
   221b4:	e0bfbb05 	stb	r2,-276(fp)
   221b8:	e0bfbb03 	ldbu	r2,-276(fp)
   221bc:	10ffffcc 	andi	r3,r2,65535
   221c0:	e0bfff0b 	ldhu	r2,-4(fp)
   221c4:	18bff036 	bltu	r3,r2,22188 <__alt_data_end+0xfffe2188>
		dt[i+1] = data[i];
	alt_avalon_i2c_master_target_set(i2c_dev,address);
   221c8:	d0a0e117 	ldw	r2,-31868(gp)
   221cc:	e0fffc03 	ldbu	r3,-16(fp)
   221d0:	180b883a 	mov	r5,r3
   221d4:	1009883a 	mov	r4,r2
   221d8:	00278900 	call	27890 <alt_avalon_i2c_master_target_set>
	alt_avalon_i2c_master_tx(SH1106_I2C, dt, count+1,
   221dc:	d0e0e117 	ldw	r3,-31868(gp)
   221e0:	e0bfff0b 	ldhu	r2,-4(fp)
   221e4:	10800044 	addi	r2,r2,1
   221e8:	1009883a 	mov	r4,r2
   221ec:	e0bfbb44 	addi	r2,fp,-275
   221f0:	000f883a 	mov	r7,zero
   221f4:	200d883a 	mov	r6,r4
   221f8:	100b883a 	mov	r5,r2
   221fc:	1809883a 	mov	r4,r3
   22200:	0027a980 	call	27a98 <alt_avalon_i2c_master_tx>
								ALT_AVALON_I2C_NO_INTERRUPTS);
}
   22204:	0001883a 	nop
   22208:	e037883a 	mov	sp,fp
   2220c:	dfc00117 	ldw	ra,4(sp)
   22210:	df000017 	ldw	fp,0(sp)
   22214:	dec00204 	addi	sp,sp,8
   22218:	f800283a 	ret

0002221c <SH1106_I2C_Write>:


void SH1106_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
   2221c:	defffa04 	addi	sp,sp,-24
   22220:	dfc00515 	stw	ra,20(sp)
   22224:	df000415 	stw	fp,16(sp)
   22228:	df000404 	addi	fp,sp,16
   2222c:	2807883a 	mov	r3,r5
   22230:	3005883a 	mov	r2,r6
   22234:	e13ffd05 	stb	r4,-12(fp)
   22238:	e0fffe05 	stb	r3,-8(fp)
   2223c:	e0bfff05 	stb	r2,-4(fp)
	uint8_t dt[2];
	dt[0] = reg;
   22240:	e0bffe03 	ldbu	r2,-8(fp)
   22244:	e0bffc05 	stb	r2,-16(fp)
	dt[1] = data;
   22248:	e0bfff03 	ldbu	r2,-4(fp)
   2224c:	e0bffc45 	stb	r2,-15(fp)
	alt_avalon_i2c_master_target_set(i2c_dev,address);
   22250:	d0a0e117 	ldw	r2,-31868(gp)
   22254:	e0fffd03 	ldbu	r3,-12(fp)
   22258:	180b883a 	mov	r5,r3
   2225c:	1009883a 	mov	r4,r2
   22260:	00278900 	call	27890 <alt_avalon_i2c_master_target_set>
	alt_avalon_i2c_master_tx(SH1106_I2C, dt, 2,
   22264:	d0a0e117 	ldw	r2,-31868(gp)
   22268:	000f883a 	mov	r7,zero
   2226c:	01800084 	movi	r6,2
   22270:	e17ffc04 	addi	r5,fp,-16
   22274:	1009883a 	mov	r4,r2
   22278:	0027a980 	call	27a98 <alt_avalon_i2c_master_tx>
				ALT_AVALON_I2C_NO_INTERRUPTS);
}
   2227c:	0001883a 	nop
   22280:	e037883a 	mov	sp,fp
   22284:	dfc00117 	ldw	ra,4(sp)
   22288:	df000017 	ldw	fp,0(sp)
   2228c:	dec00204 	addi	sp,sp,8
   22290:	f800283a 	ret

00022294 <SH1106_InvertDisplay>:

void SH1106_InvertDisplay (int i)
{
   22294:	defffd04 	addi	sp,sp,-12
   22298:	dfc00215 	stw	ra,8(sp)
   2229c:	df000115 	stw	fp,4(sp)
   222a0:	df000104 	addi	fp,sp,4
   222a4:	e13fff15 	stw	r4,-4(fp)
  if (i) SH1106_WRITECOMMAND (SH1106_INVERTDISPLAY);
   222a8:	e0bfff17 	ldw	r2,-4(fp)
   222ac:	10000526 	beq	r2,zero,222c4 <SH1106_InvertDisplay+0x30>
   222b0:	018029c4 	movi	r6,167
   222b4:	000b883a 	mov	r5,zero
   222b8:	01000f04 	movi	r4,60
   222bc:	002221c0 	call	2221c <SH1106_I2C_Write>

  else SH1106_WRITECOMMAND (SH1106_NORMALDISPLAY);

}
   222c0:	00000406 	br	222d4 <SH1106_InvertDisplay+0x40>

void SH1106_InvertDisplay (int i)
{
  if (i) SH1106_WRITECOMMAND (SH1106_INVERTDISPLAY);

  else SH1106_WRITECOMMAND (SH1106_NORMALDISPLAY);
   222c4:	01802984 	movi	r6,166
   222c8:	000b883a 	mov	r5,zero
   222cc:	01000f04 	movi	r4,60
   222d0:	002221c0 	call	2221c <SH1106_I2C_Write>

}
   222d4:	0001883a 	nop
   222d8:	e037883a 	mov	sp,fp
   222dc:	dfc00117 	ldw	ra,4(sp)
   222e0:	df000017 	ldw	fp,0(sp)
   222e4:	dec00204 	addi	sp,sp,8
   222e8:	f800283a 	ret

000222ec <SH1106_DrawBitmap>:


void SH1106_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
   222ec:	defff604 	addi	sp,sp,-40
   222f0:	dfc00915 	stw	ra,36(sp)
   222f4:	df000815 	stw	fp,32(sp)
   222f8:	df000804 	addi	fp,sp,32
   222fc:	2011883a 	mov	r8,r4
   22300:	e1bffc15 	stw	r6,-16(fp)
   22304:	3809883a 	mov	r4,r7
   22308:	e0c00217 	ldw	r3,8(fp)
   2230c:	e0800317 	ldw	r2,12(fp)
   22310:	e23ffa0d 	sth	r8,-24(fp)
   22314:	e17ffb0d 	sth	r5,-20(fp)
   22318:	e13ffd0d 	sth	r4,-12(fp)
   2231c:	e0fffe0d 	sth	r3,-8(fp)
   22320:	e0bfff0d 	sth	r2,-4(fp)

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   22324:	e0bffd0f 	ldh	r2,-12(fp)
   22328:	108001c4 	addi	r2,r2,7
   2232c:	1000010e 	bge	r2,zero,22334 <SH1106_DrawBitmap+0x48>
   22330:	108001c4 	addi	r2,r2,7
   22334:	1005d0fa 	srai	r2,r2,3
   22338:	e0bff98d 	sth	r2,-26(fp)
    uint8_t byte = 0;
   2233c:	e03ff805 	stb	zero,-32(fp)

    for(int16_t j=0; j<h; j++, y++)
   22340:	e03ff88d 	sth	zero,-30(fp)
   22344:	00003906 	br	2242c <SH1106_DrawBitmap+0x140>
    {
        for(int16_t i=0; i<w; i++)
   22348:	e03ff90d 	sth	zero,-28(fp)
   2234c:	00002e06 	br	22408 <SH1106_DrawBitmap+0x11c>
        {
            if(i & 7)
   22350:	e0bff90b 	ldhu	r2,-28(fp)
   22354:	10bfffcc 	andi	r2,r2,65535
   22358:	108001cc 	andi	r2,r2,7
   2235c:	10000426 	beq	r2,zero,22370 <SH1106_DrawBitmap+0x84>
            {
               byte <<= 1;
   22360:	e0bff803 	ldbu	r2,-32(fp)
   22364:	1085883a 	add	r2,r2,r2
   22368:	e0bff805 	stb	r2,-32(fp)
   2236c:	00001306 	br	223bc <SH1106_DrawBitmap+0xd0>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
   22370:	e0bff88f 	ldh	r2,-30(fp)
   22374:	e0fff98f 	ldh	r3,-26(fp)
   22378:	180b883a 	mov	r5,r3
   2237c:	1009883a 	mov	r4,r2
   22380:	0022c300 	call	22c30 <__mulsi3>
   22384:	1007883a 	mov	r3,r2
   22388:	e0bff90f 	ldh	r2,-28(fp)
   2238c:	1000010e 	bge	r2,zero,22394 <SH1106_DrawBitmap+0xa8>
   22390:	108001c4 	addi	r2,r2,7
   22394:	1005d0fa 	srai	r2,r2,3
   22398:	10bfffcc 	andi	r2,r2,65535
   2239c:	10a0001c 	xori	r2,r2,32768
   223a0:	10a00004 	addi	r2,r2,-32768
   223a4:	1885883a 	add	r2,r3,r2
   223a8:	1007883a 	mov	r3,r2
   223ac:	e0bffc17 	ldw	r2,-16(fp)
   223b0:	10c5883a 	add	r2,r2,r3
   223b4:	10800003 	ldbu	r2,0(r2)
   223b8:	e0bff805 	stb	r2,-32(fp)
            }
            if(byte & 0x80) SH1106_DrawPixel(x+i, y, color);
   223bc:	e0bff803 	ldbu	r2,-32(fp)
   223c0:	10803fcc 	andi	r2,r2,255
   223c4:	1080201c 	xori	r2,r2,128
   223c8:	10bfe004 	addi	r2,r2,-128
   223cc:	10000b0e 	bge	r2,zero,223fc <SH1106_DrawBitmap+0x110>
   223d0:	e0fffa0b 	ldhu	r3,-24(fp)
   223d4:	e0bff90b 	ldhu	r2,-28(fp)
   223d8:	1885883a 	add	r2,r3,r2
   223dc:	10bfffcc 	andi	r2,r2,65535
   223e0:	e0fffb0b 	ldhu	r3,-20(fp)
   223e4:	18ffffcc 	andi	r3,r3,65535
   223e8:	e13fff0b 	ldhu	r4,-4(fp)
   223ec:	200d883a 	mov	r6,r4
   223f0:	180b883a 	mov	r5,r3
   223f4:	1009883a 	mov	r4,r2
   223f8:	0020d900 	call	20d90 <SH1106_DrawPixel>
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    for(int16_t j=0; j<h; j++, y++)
    {
        for(int16_t i=0; i<w; i++)
   223fc:	e0bff90b 	ldhu	r2,-28(fp)
   22400:	10800044 	addi	r2,r2,1
   22404:	e0bff90d 	sth	r2,-28(fp)
   22408:	e0fff90f 	ldh	r3,-28(fp)
   2240c:	e0bffd0f 	ldh	r2,-12(fp)
   22410:	18bfcf16 	blt	r3,r2,22350 <__alt_data_end+0xfffe2350>
{

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    for(int16_t j=0; j<h; j++, y++)
   22414:	e0bff88b 	ldhu	r2,-30(fp)
   22418:	10800044 	addi	r2,r2,1
   2241c:	e0bff88d 	sth	r2,-30(fp)
   22420:	e0bffb0b 	ldhu	r2,-20(fp)
   22424:	10800044 	addi	r2,r2,1
   22428:	e0bffb0d 	sth	r2,-20(fp)
   2242c:	e0fff88f 	ldh	r3,-30(fp)
   22430:	e0bffe0f 	ldh	r2,-8(fp)
   22434:	18bfc416 	blt	r3,r2,22348 <__alt_data_end+0xfffe2348>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
            }
            if(byte & 0x80) SH1106_DrawPixel(x+i, y, color);
        }
    }
}
   22438:	0001883a 	nop
   2243c:	e037883a 	mov	sp,fp
   22440:	dfc00117 	ldw	ra,4(sp)
   22444:	df000017 	ldw	fp,0(sp)
   22448:	dec00204 	addi	sp,sp,8
   2244c:	f800283a 	ret

00022450 <FONTS_GetStringSize>:
	16,
	26,
	Font16x26
};

char* FONTS_GetStringSize(char* str, FONTS_SIZE_t* SizeStruct, FontDef_t* Font) {
   22450:	defffa04 	addi	sp,sp,-24
   22454:	dfc00515 	stw	ra,20(sp)
   22458:	df000415 	stw	fp,16(sp)
   2245c:	dc000315 	stw	r16,12(sp)
   22460:	df000404 	addi	fp,sp,16
   22464:	e13ffc15 	stw	r4,-16(fp)
   22468:	e17ffd15 	stw	r5,-12(fp)
   2246c:	e1bffe15 	stw	r6,-8(fp)
	/* Fill settings */
	SizeStruct->Height = Font->FontHeight;
   22470:	e0bffe17 	ldw	r2,-8(fp)
   22474:	10800043 	ldbu	r2,1(r2)
   22478:	10c03fcc 	andi	r3,r2,255
   2247c:	e0bffd17 	ldw	r2,-12(fp)
   22480:	10c0008d 	sth	r3,2(r2)
	SizeStruct->Length = Font->FontWidth * strlen(str);
   22484:	e0bffe17 	ldw	r2,-8(fp)
   22488:	10800003 	ldbu	r2,0(r2)
   2248c:	14003fcc 	andi	r16,r2,255
   22490:	e13ffc17 	ldw	r4,-16(fp)
   22494:	0025c680 	call	25c68 <strlen>
   22498:	100b883a 	mov	r5,r2
   2249c:	8009883a 	mov	r4,r16
   224a0:	0022c300 	call	22c30 <__mulsi3>
   224a4:	1007883a 	mov	r3,r2
   224a8:	e0bffd17 	ldw	r2,-12(fp)
   224ac:	10c0000d 	sth	r3,0(r2)

	/* Return pointer */
	return str;
   224b0:	e0bffc17 	ldw	r2,-16(fp)
}
   224b4:	e6ffff04 	addi	sp,fp,-4
   224b8:	dfc00217 	ldw	ra,8(sp)
   224bc:	df000117 	ldw	fp,4(sp)
   224c0:	dc000017 	ldw	r16,0(sp)
   224c4:	dec00304 	addi	sp,sp,12
   224c8:	f800283a 	ret

000224cc <I2C0_Init>:
#define AHT_ADDR   0x38

float Temp = 0.0;
float Humid = 0.0;

void I2C0_Init(){
   224cc:	defffe04 	addi	sp,sp,-8
   224d0:	dfc00115 	stw	ra,4(sp)
   224d4:	df000015 	stw	fp,0(sp)
   224d8:	d839883a 	mov	fp,sp
	/* Check if LCD connected to I2C */
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
   224dc:	010000f4 	movhi	r4,3
   224e0:	213dfb04 	addi	r4,r4,-2068
   224e4:	00270c00 	call	270c0 <alt_avalon_i2c_open>
   224e8:	d0a0e115 	stw	r2,-31868(gp)
	if (NULL==i2c_dev)  {
   224ec:	d0a0e117 	ldw	r2,-31868(gp)
   224f0:	1000041e 	bne	r2,zero,22504 <I2C0_Init+0x38>
		printf("Error: Cannot find /dev/i2c_0\n");
   224f4:	010000f4 	movhi	r4,3
   224f8:	213dfe04 	addi	r4,r4,-2056
   224fc:	0025b780 	call	25b78 <puts>
		return;
   22500:	00000306 	br	22510 <I2C0_Init+0x44>
	}
	printf("Successfully open I2C");
   22504:	010000f4 	movhi	r4,3
   22508:	213e0604 	addi	r4,r4,-2024
   2250c:	0025aac0 	call	25aac <printf>
}
   22510:	e037883a 	mov	sp,fp
   22514:	dfc00117 	ldw	ra,4(sp)
   22518:	df000017 	ldw	fp,0(sp)
   2251c:	dec00204 	addi	sp,sp,8
   22520:	f800283a 	ret

00022524 <AHT20_Read>:


void AHT20_Read()
{
   22524:	defffa04 	addi	sp,sp,-24
   22528:	dfc00515 	stw	ra,20(sp)
   2252c:	df000415 	stw	fp,16(sp)
   22530:	df000404 	addi	fp,sp,16
    uint8_t dum[6];
    uint8_t reg = 0x71;
   22534:	00801c44 	movi	r2,113
   22538:	e0bfff85 	stb	r2,-2(fp)

    // Send register address (0x71) and read back 1 byte
    alt_avalon_i2c_master_target_set(i2c_dev, AHT_ADDR);
   2253c:	d0a0e117 	ldw	r2,-31868(gp)
   22540:	01400e04 	movi	r5,56
   22544:	1009883a 	mov	r4,r2
   22548:	00278900 	call	27890 <alt_avalon_i2c_master_target_set>
    alt_avalon_i2c_master_tx(i2c_dev, &reg, 1,
   2254c:	d0a0e117 	ldw	r2,-31868(gp)
   22550:	e0ffff84 	addi	r3,fp,-2
   22554:	000f883a 	mov	r7,zero
   22558:	01800044 	movi	r6,1
   2255c:	180b883a 	mov	r5,r3
   22560:	1009883a 	mov	r4,r2
   22564:	0027a980 	call	27a98 <alt_avalon_i2c_master_tx>
    								ALT_AVALON_I2C_NO_INTERRUPTS);
//    HAL_I2C_Master_Transmit(&HI2C, AHT_ADDR, &reg, 1, 100);
    alt_avalon_i2c_master_rx(i2c_dev, dum, 1,
   22568:	d0a0e117 	ldw	r2,-31868(gp)
   2256c:	e0fffe04 	addi	r3,fp,-8
   22570:	000f883a 	mov	r7,zero
   22574:	01800044 	movi	r6,1
   22578:	180b883a 	mov	r5,r3
   2257c:	1009883a 	mov	r4,r2
   22580:	0027b800 	call	27b80 <alt_avalon_i2c_master_rx>
       								ALT_AVALON_I2C_NO_INTERRUPTS);

    // Check calibration status
    if (!(dum[0] & (1 << 3)))
   22584:	e0bffe03 	ldbu	r2,-8(fp)
   22588:	10803fcc 	andi	r2,r2,255
   2258c:	1080020c 	andi	r2,r2,8
   22590:	10000e1e 	bne	r2,zero,225cc <AHT20_Read+0xa8>
    {
        dum[0] = 0xBE, dum[1] = 0x08, dum[2] = 0x00;
   22594:	00bfef84 	movi	r2,-66
   22598:	e0bffe05 	stb	r2,-8(fp)
   2259c:	00800204 	movi	r2,8
   225a0:	e0bffe45 	stb	r2,-7(fp)
   225a4:	e03ffe85 	stb	zero,-6(fp)
        alt_avalon_i2c_master_tx(i2c_dev, dum, 3,
   225a8:	d0a0e117 	ldw	r2,-31868(gp)
   225ac:	e0fffe04 	addi	r3,fp,-8
   225b0:	000f883a 	mov	r7,zero
   225b4:	018000c4 	movi	r6,3
   225b8:	180b883a 	mov	r5,r3
   225bc:	1009883a 	mov	r4,r2
   225c0:	0027a980 	call	27a98 <alt_avalon_i2c_master_tx>
            								ALT_AVALON_I2C_NO_INTERRUPTS);
        usleep(10000);
   225c4:	0109c404 	movi	r4,10000
   225c8:	0026b6c0 	call	26b6c <usleep>
    }

    // Trigger measurement command
    dum[0] = 0xAC, dum[1] = 0x33, dum[2] = 0x00;
   225cc:	00bfeb04 	movi	r2,-84
   225d0:	e0bffe05 	stb	r2,-8(fp)
   225d4:	00800cc4 	movi	r2,51
   225d8:	e0bffe45 	stb	r2,-7(fp)
   225dc:	e03ffe85 	stb	zero,-6(fp)
    alt_avalon_i2c_master_tx(i2c_dev, dum, 3,
   225e0:	d0a0e117 	ldw	r2,-31868(gp)
   225e4:	e0fffe04 	addi	r3,fp,-8
   225e8:	000f883a 	mov	r7,zero
   225ec:	018000c4 	movi	r6,3
   225f0:	180b883a 	mov	r5,r3
   225f4:	1009883a 	mov	r4,r2
   225f8:	0027a980 	call	27a98 <alt_avalon_i2c_master_tx>
                								ALT_AVALON_I2C_NO_INTERRUPTS);
    usleep(80000);
   225fc:	01000074 	movhi	r4,1
   22600:	210e2004 	addi	r4,r4,14464
   22604:	0026b6c0 	call	26b6c <usleep>

    // Poll until the sensor completes the measurement
    do {
    	alt_avalon_i2c_master_tx(i2c_dev, &reg, 1,
   22608:	d0a0e117 	ldw	r2,-31868(gp)
   2260c:	e0ffff84 	addi	r3,fp,-2
   22610:	000f883a 	mov	r7,zero
   22614:	01800044 	movi	r6,1
   22618:	180b883a 	mov	r5,r3
   2261c:	1009883a 	mov	r4,r2
   22620:	0027a980 	call	27a98 <alt_avalon_i2c_master_tx>
    	    								ALT_AVALON_I2C_NO_INTERRUPTS);
        alt_avalon_i2c_master_rx(i2c_dev, dum, 1,
   22624:	d0a0e117 	ldw	r2,-31868(gp)
   22628:	e0fffe04 	addi	r3,fp,-8
   2262c:	000f883a 	mov	r7,zero
   22630:	01800044 	movi	r6,1
   22634:	180b883a 	mov	r5,r3
   22638:	1009883a 	mov	r4,r2
   2263c:	0027b800 	call	27b80 <alt_avalon_i2c_master_rx>
               								ALT_AVALON_I2C_NO_INTERRUPTS);
        usleep(100);
   22640:	01001904 	movi	r4,100
   22644:	0026b6c0 	call	26b6c <usleep>
    } while (dum[0] & (1 << 7));
   22648:	e0bffe03 	ldbu	r2,-8(fp)
   2264c:	10803fcc 	andi	r2,r2,255
   22650:	1080201c 	xori	r2,r2,128
   22654:	10bfe004 	addi	r2,r2,-128
   22658:	103feb16 	blt	r2,zero,22608 <__alt_data_end+0xfffe2608>

    // Read measurement results (6 bytes)
    alt_avalon_i2c_master_rx(i2c_dev, dum, 6,
   2265c:	d0a0e117 	ldw	r2,-31868(gp)
   22660:	e0fffe04 	addi	r3,fp,-8
   22664:	000f883a 	mov	r7,zero
   22668:	01800184 	movi	r6,6
   2266c:	180b883a 	mov	r5,r3
   22670:	1009883a 	mov	r4,r2
   22674:	0027b800 	call	27b80 <alt_avalon_i2c_master_rx>
                   								ALT_AVALON_I2C_NO_INTERRUPTS);

    // Process humidity and temperature data
    float h20 = (dum[1]) << 12 | (dum[2]) << 4 | (dum[3] >> 4);
   22678:	e0bffe43 	ldbu	r2,-7(fp)
   2267c:	10803fcc 	andi	r2,r2,255
   22680:	1006933a 	slli	r3,r2,12
   22684:	e0bffe83 	ldbu	r2,-6(fp)
   22688:	10803fcc 	andi	r2,r2,255
   2268c:	1004913a 	slli	r2,r2,4
   22690:	1886b03a 	or	r3,r3,r2
   22694:	e0bffec3 	ldbu	r2,-5(fp)
   22698:	10803fcc 	andi	r2,r2,255
   2269c:	1004d13a 	srli	r2,r2,4
   226a0:	10803fcc 	andi	r2,r2,255
   226a4:	1884b03a 	or	r2,r3,r2
   226a8:	1009883a 	mov	r4,r2
   226ac:	0023ad80 	call	23ad8 <__floatsisf>
   226b0:	1007883a 	mov	r3,r2
   226b4:	e0fffc15 	stw	r3,-16(fp)
    float t20 = (dum[3] & 0x0F) << 16 | (dum[4]) << 8 | dum[5];
   226b8:	e0bffec3 	ldbu	r2,-5(fp)
   226bc:	10803fcc 	andi	r2,r2,255
   226c0:	108003cc 	andi	r2,r2,15
   226c4:	1006943a 	slli	r3,r2,16
   226c8:	e0bfff03 	ldbu	r2,-4(fp)
   226cc:	10803fcc 	andi	r2,r2,255
   226d0:	1004923a 	slli	r2,r2,8
   226d4:	1886b03a 	or	r3,r3,r2
   226d8:	e0bfff43 	ldbu	r2,-3(fp)
   226dc:	10803fcc 	andi	r2,r2,255
   226e0:	1884b03a 	or	r2,r3,r2
   226e4:	1009883a 	mov	r4,r2
   226e8:	0023ad80 	call	23ad8 <__floatsisf>
   226ec:	1007883a 	mov	r3,r2
   226f0:	e0fffd15 	stw	r3,-12(fp)
    Temp = (t20 / 1048576.0) * 200.0 - 50.0;
   226f4:	e13ffd17 	ldw	r4,-12(fp)
   226f8:	00257340 	call	25734 <__extendsfdf2>
   226fc:	1011883a 	mov	r8,r2
   22700:	1813883a 	mov	r9,r3
   22704:	000d883a 	mov	r6,zero
   22708:	01d04c34 	movhi	r7,16688
   2270c:	4009883a 	mov	r4,r8
   22710:	480b883a 	mov	r5,r9
   22714:	0023bfc0 	call	23bfc <__divdf3>
   22718:	1009883a 	mov	r4,r2
   2271c:	180b883a 	mov	r5,r3
   22720:	2005883a 	mov	r2,r4
   22724:	2807883a 	mov	r3,r5
   22728:	000d883a 	mov	r6,zero
   2272c:	01d01a74 	movhi	r7,16489
   22730:	1009883a 	mov	r4,r2
   22734:	180b883a 	mov	r5,r3
   22738:	00245cc0 	call	245cc <__muldf3>
   2273c:	1009883a 	mov	r4,r2
   22740:	180b883a 	mov	r5,r3
   22744:	2005883a 	mov	r2,r4
   22748:	2807883a 	mov	r3,r5
   2274c:	000d883a 	mov	r6,zero
   22750:	01d01274 	movhi	r7,16457
   22754:	1009883a 	mov	r4,r2
   22758:	180b883a 	mov	r5,r3
   2275c:	0024e380 	call	24e38 <__subdf3>
   22760:	1009883a 	mov	r4,r2
   22764:	180b883a 	mov	r5,r3
   22768:	2005883a 	mov	r2,r4
   2276c:	2807883a 	mov	r3,r5
   22770:	1009883a 	mov	r4,r2
   22774:	180b883a 	mov	r5,r3
   22778:	00258440 	call	25844 <__truncdfsf2>
   2277c:	1007883a 	mov	r3,r2
   22780:	d0e0df15 	stw	r3,-31876(gp)
    Humid = h20 / 10485.76;
   22784:	e13ffc17 	ldw	r4,-16(fp)
   22788:	00257340 	call	25734 <__extendsfdf2>
   2278c:	1011883a 	mov	r8,r2
   22790:	1813883a 	mov	r9,r3
   22794:	0191ebb4 	movhi	r6,18350
   22798:	31851ec4 	addi	r6,r6,5243
   2279c:	01d03134 	movhi	r7,16580
   227a0:	39deb844 	addi	r7,r7,31457
   227a4:	4009883a 	mov	r4,r8
   227a8:	480b883a 	mov	r5,r9
   227ac:	0023bfc0 	call	23bfc <__divdf3>
   227b0:	1009883a 	mov	r4,r2
   227b4:	180b883a 	mov	r5,r3
   227b8:	2005883a 	mov	r2,r4
   227bc:	2807883a 	mov	r3,r5
   227c0:	1009883a 	mov	r4,r2
   227c4:	180b883a 	mov	r5,r3
   227c8:	00258440 	call	25844 <__truncdfsf2>
   227cc:	1007883a 	mov	r3,r2
   227d0:	d0e0e015 	stw	r3,-31872(gp)

}
   227d4:	0001883a 	nop
   227d8:	e037883a 	mov	sp,fp
   227dc:	dfc00117 	ldw	ra,4(sp)
   227e0:	df000017 	ldw	fp,0(sp)
   227e4:	dec00204 	addi	sp,sp,8
   227e8:	f800283a 	ret

000227ec <main>:


int main()
{
   227ec:	defff004 	addi	sp,sp,-64
   227f0:	dfc00f15 	stw	ra,60(sp)
   227f4:	df000e15 	stw	fp,56(sp)
   227f8:	dc000d15 	stw	r16,52(sp)
   227fc:	df000e04 	addi	fp,sp,56
	char buffer[16];
	uint32_t nguyen;
	uint32_t thapphan;
	I2C0_Init();
   22800:	00224cc0 	call	224cc <I2C0_Init>
	SH1106_Init (); // initialise the display
   22804:	0020a4c0 	call	20a4c <SH1106_Init>
	const char *DAYS_OF_WEEK[7] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
   22808:	008000f4 	movhi	r2,3
   2280c:	10be0c04 	addi	r2,r2,-2000
   22810:	e0bff815 	stw	r2,-32(fp)
   22814:	008000f4 	movhi	r2,3
   22818:	10be0e04 	addi	r2,r2,-1992
   2281c:	e0bff915 	stw	r2,-28(fp)
   22820:	008000f4 	movhi	r2,3
   22824:	10be1004 	addi	r2,r2,-1984
   22828:	e0bffa15 	stw	r2,-24(fp)
   2282c:	008000f4 	movhi	r2,3
   22830:	10be1204 	addi	r2,r2,-1976
   22834:	e0bffb15 	stw	r2,-20(fp)
   22838:	008000f4 	movhi	r2,3
   2283c:	10be1504 	addi	r2,r2,-1964
   22840:	e0bffc15 	stw	r2,-16(fp)
   22844:	008000f4 	movhi	r2,3
   22848:	10be1804 	addi	r2,r2,-1952
   2284c:	e0bffd15 	stw	r2,-12(fp)
   22850:	008000f4 	movhi	r2,3
   22854:	10be1a04 	addi	r2,r2,-1944
   22858:	e0bffe15 	stw	r2,-8(fp)
		/* Start DS1307 timing. Pass user I2C handle pointer to function. */
	DS1307_Init();
   2285c:	002024c0 	call	2024c <DS1307_Init>
		/* To test leap year correction. */
	DS1307_SetTimeZone(+8, 00);
   22860:	000b883a 	mov	r5,zero
   22864:	01000204 	movi	r4,8
   22868:	00209400 	call	20940 <DS1307_SetTimeZone>
	DS1307_SetDate(29);
   2286c:	01000744 	movi	r4,29
   22870:	00207300 	call	20730 <DS1307_SetDate>
	DS1307_SetMonth(2);
   22874:	01000084 	movi	r4,2
   22878:	002077c0 	call	2077c <DS1307_SetMonth>
	DS1307_SetYear(2024);
   2287c:	0101fa04 	movi	r4,2024
   22880:	00207c80 	call	207c8 <DS1307_SetYear>
	DS1307_SetDayOfWeek(4);
   22884:	01000104 	movi	r4,4
   22888:	00206e40 	call	206e4 <DS1307_SetDayOfWeek>
	DS1307_SetHour(23);
   2288c:	010005c4 	movi	r4,23
   22890:	00208440 	call	20844 <DS1307_SetHour>
	DS1307_SetMinute(59);
   22894:	01000ec4 	movi	r4,59
   22898:	00208940 	call	20894 <DS1307_SetMinute>
	DS1307_SetSecond(30);
   2289c:	01000784 	movi	r4,30
   228a0:	00208e00 	call	208e0 <DS1307_SetSecond>
	  while (1)
	  {
		  usleep(5000000);
   228a4:	01001334 	movhi	r4,76
   228a8:	2112d004 	addi	r4,r4,19264
   228ac:	0026b6c0 	call	26b6c <usleep>
		  AHT20_Read();
   228b0:	00225240 	call	22524 <AHT20_Read>
		  printf("\nTemp: %d, Humid: %d", (int)Temp, (int)Humid);
   228b4:	d0a0df17 	ldw	r2,-31876(gp)
   228b8:	1009883a 	mov	r4,r2
   228bc:	0023a680 	call	23a68 <__fixsfsi>
   228c0:	1021883a 	mov	r16,r2
   228c4:	d0a0e017 	ldw	r2,-31872(gp)
   228c8:	1009883a 	mov	r4,r2
   228cc:	0023a680 	call	23a68 <__fixsfsi>
   228d0:	100d883a 	mov	r6,r2
   228d4:	800b883a 	mov	r5,r16
   228d8:	010000f4 	movhi	r4,3
   228dc:	213e1d04 	addi	r4,r4,-1932
   228e0:	0025aac0 	call	25aac <printf>

		  Temp = Temp * 100;
   228e4:	d0a0df17 	ldw	r2,-31876(gp)
   228e8:	0150b234 	movhi	r5,17096
   228ec:	1009883a 	mov	r4,r2
   228f0:	00231540 	call	23154 <__mulsf3>
   228f4:	1007883a 	mov	r3,r2
   228f8:	1805883a 	mov	r2,r3
   228fc:	d0a0df15 	stw	r2,-31876(gp)
		  nguyen = Temp / 100;
   22900:	d0a0df17 	ldw	r2,-31876(gp)
   22904:	0150b234 	movhi	r5,17096
   22908:	1009883a 	mov	r4,r2
   2290c:	0022c580 	call	22c58 <__divsf3>
   22910:	1007883a 	mov	r3,r2
   22914:	1805883a 	mov	r2,r3
   22918:	1009883a 	mov	r4,r2
   2291c:	0022a1c0 	call	22a1c <__fixunssfsi>
   22920:	e0bff215 	stw	r2,-56(fp)
		  thapphan = (uint32_t)Temp % 100;
   22924:	d0a0df17 	ldw	r2,-31876(gp)
   22928:	1009883a 	mov	r4,r2
   2292c:	0022a1c0 	call	22a1c <__fixunssfsi>
   22930:	01401904 	movi	r5,100
   22934:	1009883a 	mov	r4,r2
   22938:	0022bd80 	call	22bd8 <__umodsi3>
   2293c:	e0bff315 	stw	r2,-52(fp)
		  sprintf(buffer, "Temp: %d.%02d", nguyen, thapphan);
   22940:	e0bff404 	addi	r2,fp,-48
   22944:	e1fff317 	ldw	r7,-52(fp)
   22948:	e1bff217 	ldw	r6,-56(fp)
   2294c:	014000f4 	movhi	r5,3
   22950:	297e2304 	addi	r5,r5,-1908
   22954:	1009883a 	mov	r4,r2
   22958:	0025bf00 	call	25bf0 <sprintf>
		  SH1106_GotoXY(12, 0);
   2295c:	000b883a 	mov	r5,zero
   22960:	01000304 	movi	r4,12
   22964:	0020ee00 	call	20ee0 <SH1106_GotoXY>
		  SH1106_Puts(buffer, &Font_7x10, 1);
   22968:	e0bff404 	addi	r2,fp,-48
   2296c:	01800044 	movi	r6,1
   22970:	d1600004 	addi	r5,gp,-32768
   22974:	1009883a 	mov	r4,r2
   22978:	00210dc0 	call	210dc <SH1106_Puts>

		  Humid = Humid * 100;
   2297c:	d0a0e017 	ldw	r2,-31872(gp)
   22980:	0150b234 	movhi	r5,17096
   22984:	1009883a 	mov	r4,r2
   22988:	00231540 	call	23154 <__mulsf3>
   2298c:	1007883a 	mov	r3,r2
   22990:	1805883a 	mov	r2,r3
   22994:	d0a0e015 	stw	r2,-31872(gp)
		  nguyen = Humid / 100;
   22998:	d0a0e017 	ldw	r2,-31872(gp)
   2299c:	0150b234 	movhi	r5,17096
   229a0:	1009883a 	mov	r4,r2
   229a4:	0022c580 	call	22c58 <__divsf3>
   229a8:	1007883a 	mov	r3,r2
   229ac:	1805883a 	mov	r2,r3
   229b0:	1009883a 	mov	r4,r2
   229b4:	0022a1c0 	call	22a1c <__fixunssfsi>
   229b8:	e0bff215 	stw	r2,-56(fp)
		  thapphan = (uint32_t)Humid % 100;
   229bc:	d0a0e017 	ldw	r2,-31872(gp)
   229c0:	1009883a 	mov	r4,r2
   229c4:	0022a1c0 	call	22a1c <__fixunssfsi>
   229c8:	01401904 	movi	r5,100
   229cc:	1009883a 	mov	r4,r2
   229d0:	0022bd80 	call	22bd8 <__umodsi3>
   229d4:	e0bff315 	stw	r2,-52(fp)
		  sprintf(buffer, "Humidity: %d.%02d", nguyen, thapphan);
   229d8:	e0bff404 	addi	r2,fp,-48
   229dc:	e1fff317 	ldw	r7,-52(fp)
   229e0:	e1bff217 	ldw	r6,-56(fp)
   229e4:	014000f4 	movhi	r5,3
   229e8:	297e2704 	addi	r5,r5,-1892
   229ec:	1009883a 	mov	r4,r2
   229f0:	0025bf00 	call	25bf0 <sprintf>
		  SH1106_GotoXY(12, 15);
   229f4:	014003c4 	movi	r5,15
   229f8:	01000304 	movi	r4,12
   229fc:	0020ee00 	call	20ee0 <SH1106_GotoXY>
		  SH1106_Puts(buffer, &Font_7x10, 1);
   22a00:	e0bff404 	addi	r2,fp,-48
   22a04:	01800044 	movi	r6,1
   22a08:	d1600004 	addi	r5,gp,-32768
   22a0c:	1009883a 	mov	r4,r2
   22a10:	00210dc0 	call	210dc <SH1106_Puts>
		  SH1106_UpdateScreen();
   22a14:	0020c100 	call	20c10 <SH1106_UpdateScreen>
	  }
   22a18:	003fa206 	br	228a4 <__alt_data_end+0xfffe28a4>

00022a1c <__fixunssfsi>:
   22a1c:	defffd04 	addi	sp,sp,-12
   22a20:	dc000015 	stw	r16,0(sp)
   22a24:	0413c034 	movhi	r16,20224
   22a28:	800b883a 	mov	r5,r16
   22a2c:	dc400115 	stw	r17,4(sp)
   22a30:	dfc00215 	stw	ra,8(sp)
   22a34:	2023883a 	mov	r17,r4
   22a38:	00230980 	call	23098 <__gesf2>
   22a3c:	1000070e 	bge	r2,zero,22a5c <__fixunssfsi+0x40>
   22a40:	8809883a 	mov	r4,r17
   22a44:	0023a680 	call	23a68 <__fixsfsi>
   22a48:	dfc00217 	ldw	ra,8(sp)
   22a4c:	dc400117 	ldw	r17,4(sp)
   22a50:	dc000017 	ldw	r16,0(sp)
   22a54:	dec00304 	addi	sp,sp,12
   22a58:	f800283a 	ret
   22a5c:	800b883a 	mov	r5,r16
   22a60:	8809883a 	mov	r4,r17
   22a64:	00235840 	call	23584 <__subsf3>
   22a68:	1009883a 	mov	r4,r2
   22a6c:	0023a680 	call	23a68 <__fixsfsi>
   22a70:	00e00034 	movhi	r3,32768
   22a74:	10c5883a 	add	r2,r2,r3
   22a78:	003ff306 	br	22a48 <__alt_data_end+0xfffe2a48>

00022a7c <__divsi3>:
   22a7c:	20001b16 	blt	r4,zero,22aec <__divsi3+0x70>
   22a80:	000f883a 	mov	r7,zero
   22a84:	28001616 	blt	r5,zero,22ae0 <__divsi3+0x64>
   22a88:	200d883a 	mov	r6,r4
   22a8c:	29001a2e 	bgeu	r5,r4,22af8 <__divsi3+0x7c>
   22a90:	00800804 	movi	r2,32
   22a94:	00c00044 	movi	r3,1
   22a98:	00000106 	br	22aa0 <__divsi3+0x24>
   22a9c:	10000d26 	beq	r2,zero,22ad4 <__divsi3+0x58>
   22aa0:	294b883a 	add	r5,r5,r5
   22aa4:	10bfffc4 	addi	r2,r2,-1
   22aa8:	18c7883a 	add	r3,r3,r3
   22aac:	293ffb36 	bltu	r5,r4,22a9c <__alt_data_end+0xfffe2a9c>
   22ab0:	0005883a 	mov	r2,zero
   22ab4:	18000726 	beq	r3,zero,22ad4 <__divsi3+0x58>
   22ab8:	0005883a 	mov	r2,zero
   22abc:	31400236 	bltu	r6,r5,22ac8 <__divsi3+0x4c>
   22ac0:	314dc83a 	sub	r6,r6,r5
   22ac4:	10c4b03a 	or	r2,r2,r3
   22ac8:	1806d07a 	srli	r3,r3,1
   22acc:	280ad07a 	srli	r5,r5,1
   22ad0:	183ffa1e 	bne	r3,zero,22abc <__alt_data_end+0xfffe2abc>
   22ad4:	38000126 	beq	r7,zero,22adc <__divsi3+0x60>
   22ad8:	0085c83a 	sub	r2,zero,r2
   22adc:	f800283a 	ret
   22ae0:	014bc83a 	sub	r5,zero,r5
   22ae4:	39c0005c 	xori	r7,r7,1
   22ae8:	003fe706 	br	22a88 <__alt_data_end+0xfffe2a88>
   22aec:	0109c83a 	sub	r4,zero,r4
   22af0:	01c00044 	movi	r7,1
   22af4:	003fe306 	br	22a84 <__alt_data_end+0xfffe2a84>
   22af8:	00c00044 	movi	r3,1
   22afc:	003fee06 	br	22ab8 <__alt_data_end+0xfffe2ab8>

00022b00 <__modsi3>:
   22b00:	20001716 	blt	r4,zero,22b60 <__modsi3+0x60>
   22b04:	000f883a 	mov	r7,zero
   22b08:	2005883a 	mov	r2,r4
   22b0c:	28001216 	blt	r5,zero,22b58 <__modsi3+0x58>
   22b10:	2900162e 	bgeu	r5,r4,22b6c <__modsi3+0x6c>
   22b14:	01800804 	movi	r6,32
   22b18:	00c00044 	movi	r3,1
   22b1c:	00000106 	br	22b24 <__modsi3+0x24>
   22b20:	30000a26 	beq	r6,zero,22b4c <__modsi3+0x4c>
   22b24:	294b883a 	add	r5,r5,r5
   22b28:	31bfffc4 	addi	r6,r6,-1
   22b2c:	18c7883a 	add	r3,r3,r3
   22b30:	293ffb36 	bltu	r5,r4,22b20 <__alt_data_end+0xfffe2b20>
   22b34:	18000526 	beq	r3,zero,22b4c <__modsi3+0x4c>
   22b38:	1806d07a 	srli	r3,r3,1
   22b3c:	11400136 	bltu	r2,r5,22b44 <__modsi3+0x44>
   22b40:	1145c83a 	sub	r2,r2,r5
   22b44:	280ad07a 	srli	r5,r5,1
   22b48:	183ffb1e 	bne	r3,zero,22b38 <__alt_data_end+0xfffe2b38>
   22b4c:	38000126 	beq	r7,zero,22b54 <__modsi3+0x54>
   22b50:	0085c83a 	sub	r2,zero,r2
   22b54:	f800283a 	ret
   22b58:	014bc83a 	sub	r5,zero,r5
   22b5c:	003fec06 	br	22b10 <__alt_data_end+0xfffe2b10>
   22b60:	0109c83a 	sub	r4,zero,r4
   22b64:	01c00044 	movi	r7,1
   22b68:	003fe706 	br	22b08 <__alt_data_end+0xfffe2b08>
   22b6c:	00c00044 	movi	r3,1
   22b70:	003ff106 	br	22b38 <__alt_data_end+0xfffe2b38>

00022b74 <__udivsi3>:
   22b74:	200d883a 	mov	r6,r4
   22b78:	2900152e 	bgeu	r5,r4,22bd0 <__udivsi3+0x5c>
   22b7c:	28001416 	blt	r5,zero,22bd0 <__udivsi3+0x5c>
   22b80:	00800804 	movi	r2,32
   22b84:	00c00044 	movi	r3,1
   22b88:	00000206 	br	22b94 <__udivsi3+0x20>
   22b8c:	10000e26 	beq	r2,zero,22bc8 <__udivsi3+0x54>
   22b90:	28000516 	blt	r5,zero,22ba8 <__udivsi3+0x34>
   22b94:	294b883a 	add	r5,r5,r5
   22b98:	10bfffc4 	addi	r2,r2,-1
   22b9c:	18c7883a 	add	r3,r3,r3
   22ba0:	293ffa36 	bltu	r5,r4,22b8c <__alt_data_end+0xfffe2b8c>
   22ba4:	18000826 	beq	r3,zero,22bc8 <__udivsi3+0x54>
   22ba8:	0005883a 	mov	r2,zero
   22bac:	31400236 	bltu	r6,r5,22bb8 <__udivsi3+0x44>
   22bb0:	314dc83a 	sub	r6,r6,r5
   22bb4:	10c4b03a 	or	r2,r2,r3
   22bb8:	1806d07a 	srli	r3,r3,1
   22bbc:	280ad07a 	srli	r5,r5,1
   22bc0:	183ffa1e 	bne	r3,zero,22bac <__alt_data_end+0xfffe2bac>
   22bc4:	f800283a 	ret
   22bc8:	0005883a 	mov	r2,zero
   22bcc:	f800283a 	ret
   22bd0:	00c00044 	movi	r3,1
   22bd4:	003ff406 	br	22ba8 <__alt_data_end+0xfffe2ba8>

00022bd8 <__umodsi3>:
   22bd8:	2005883a 	mov	r2,r4
   22bdc:	2900122e 	bgeu	r5,r4,22c28 <__umodsi3+0x50>
   22be0:	28001116 	blt	r5,zero,22c28 <__umodsi3+0x50>
   22be4:	01800804 	movi	r6,32
   22be8:	00c00044 	movi	r3,1
   22bec:	00000206 	br	22bf8 <__umodsi3+0x20>
   22bf0:	30000c26 	beq	r6,zero,22c24 <__umodsi3+0x4c>
   22bf4:	28000516 	blt	r5,zero,22c0c <__umodsi3+0x34>
   22bf8:	294b883a 	add	r5,r5,r5
   22bfc:	31bfffc4 	addi	r6,r6,-1
   22c00:	18c7883a 	add	r3,r3,r3
   22c04:	293ffa36 	bltu	r5,r4,22bf0 <__alt_data_end+0xfffe2bf0>
   22c08:	18000626 	beq	r3,zero,22c24 <__umodsi3+0x4c>
   22c0c:	1806d07a 	srli	r3,r3,1
   22c10:	11400136 	bltu	r2,r5,22c18 <__umodsi3+0x40>
   22c14:	1145c83a 	sub	r2,r2,r5
   22c18:	280ad07a 	srli	r5,r5,1
   22c1c:	183ffb1e 	bne	r3,zero,22c0c <__alt_data_end+0xfffe2c0c>
   22c20:	f800283a 	ret
   22c24:	f800283a 	ret
   22c28:	00c00044 	movi	r3,1
   22c2c:	003ff706 	br	22c0c <__alt_data_end+0xfffe2c0c>

00022c30 <__mulsi3>:
   22c30:	0005883a 	mov	r2,zero
   22c34:	20000726 	beq	r4,zero,22c54 <__mulsi3+0x24>
   22c38:	20c0004c 	andi	r3,r4,1
   22c3c:	2008d07a 	srli	r4,r4,1
   22c40:	18000126 	beq	r3,zero,22c48 <__mulsi3+0x18>
   22c44:	1145883a 	add	r2,r2,r5
   22c48:	294b883a 	add	r5,r5,r5
   22c4c:	203ffa1e 	bne	r4,zero,22c38 <__alt_data_end+0xfffe2c38>
   22c50:	f800283a 	ret
   22c54:	f800283a 	ret

00022c58 <__divsf3>:
   22c58:	defff504 	addi	sp,sp,-44
   22c5c:	200cd5fa 	srli	r6,r4,23
   22c60:	dcc00415 	stw	r19,16(sp)
   22c64:	2026d7fa 	srli	r19,r4,31
   22c68:	00c02034 	movhi	r3,128
   22c6c:	dd800715 	stw	r22,28(sp)
   22c70:	dd000515 	stw	r20,20(sp)
   22c74:	dc800315 	stw	r18,12(sp)
   22c78:	18ffffc4 	addi	r3,r3,-1
   22c7c:	dfc00a15 	stw	ra,40(sp)
   22c80:	df000915 	stw	fp,36(sp)
   22c84:	ddc00815 	stw	r23,32(sp)
   22c88:	dd400615 	stw	r21,24(sp)
   22c8c:	dc400215 	stw	r17,8(sp)
   22c90:	dc000115 	stw	r16,4(sp)
   22c94:	35003fcc 	andi	r20,r6,255
   22c98:	1924703a 	and	r18,r3,r4
   22c9c:	9d803fcc 	andi	r22,r19,255
   22ca0:	a0005226 	beq	r20,zero,22dec <__divsf3+0x194>
   22ca4:	00803fc4 	movi	r2,255
   22ca8:	a0802e26 	beq	r20,r2,22d64 <__divsf3+0x10c>
   22cac:	91002034 	orhi	r4,r18,128
   22cb0:	202490fa 	slli	r18,r4,3
   22cb4:	a53fe044 	addi	r20,r20,-127
   22cb8:	0021883a 	mov	r16,zero
   22cbc:	002f883a 	mov	r23,zero
   22cc0:	280cd5fa 	srli	r6,r5,23
   22cc4:	282ad7fa 	srli	r21,r5,31
   22cc8:	00c02034 	movhi	r3,128
   22ccc:	18ffffc4 	addi	r3,r3,-1
   22cd0:	31803fcc 	andi	r6,r6,255
   22cd4:	1962703a 	and	r17,r3,r5
   22cd8:	af003fcc 	andi	fp,r21,255
   22cdc:	30004a26 	beq	r6,zero,22e08 <__divsf3+0x1b0>
   22ce0:	00803fc4 	movi	r2,255
   22ce4:	30804526 	beq	r6,r2,22dfc <__divsf3+0x1a4>
   22ce8:	89402034 	orhi	r5,r17,128
   22cec:	282290fa 	slli	r17,r5,3
   22cf0:	31bfe044 	addi	r6,r6,-127
   22cf4:	000b883a 	mov	r5,zero
   22cf8:	2c20b03a 	or	r16,r5,r16
   22cfc:	802090ba 	slli	r16,r16,2
   22d00:	008000b4 	movhi	r2,2
   22d04:	108b4904 	addi	r2,r2,11556
   22d08:	80a1883a 	add	r16,r16,r2
   22d0c:	81000017 	ldw	r4,0(r16)
   22d10:	9d46f03a 	xor	r3,r19,r21
   22d14:	180f883a 	mov	r7,r3
   22d18:	18803fcc 	andi	r2,r3,255
   22d1c:	a18dc83a 	sub	r6,r20,r6
   22d20:	2000683a 	jmp	r4
   22d24:	00022f08 	cmpgei	zero,zero,2236
   22d28:	00022d8c 	andi	zero,zero,2230
   22d2c:	00022efc 	xorhi	zero,zero,2235
   22d30:	00022d78 	rdprs	zero,zero,2229
   22d34:	00022efc 	xorhi	zero,zero,2235
   22d38:	00022ed4 	movui	zero,2235
   22d3c:	00022efc 	xorhi	zero,zero,2235
   22d40:	00022d78 	rdprs	zero,zero,2229
   22d44:	00022d8c 	andi	zero,zero,2230
   22d48:	00022d8c 	andi	zero,zero,2230
   22d4c:	00022ed4 	movui	zero,2235
   22d50:	00022d78 	rdprs	zero,zero,2229
   22d54:	00022fe8 	cmpgeui	zero,zero,2239
   22d58:	00022fe8 	cmpgeui	zero,zero,2239
   22d5c:	00022fe8 	cmpgeui	zero,zero,2239
   22d60:	00022f9c 	xori	zero,zero,2238
   22d64:	9000581e 	bne	r18,zero,22ec8 <__divsf3+0x270>
   22d68:	04000204 	movi	r16,8
   22d6c:	05c00084 	movi	r23,2
   22d70:	003fd306 	br	22cc0 <__alt_data_end+0xfffe2cc0>
   22d74:	0023883a 	mov	r17,zero
   22d78:	e02d883a 	mov	r22,fp
   22d7c:	282f883a 	mov	r23,r5
   22d80:	00800084 	movi	r2,2
   22d84:	b8808f1e 	bne	r23,r2,22fc4 <__divsf3+0x36c>
   22d88:	b005883a 	mov	r2,r22
   22d8c:	11c0004c 	andi	r7,r2,1
   22d90:	013fffc4 	movi	r4,-1
   22d94:	000d883a 	mov	r6,zero
   22d98:	21003fcc 	andi	r4,r4,255
   22d9c:	200895fa 	slli	r4,r4,23
   22da0:	38803fcc 	andi	r2,r7,255
   22da4:	00c02034 	movhi	r3,128
   22da8:	100497fa 	slli	r2,r2,31
   22dac:	18ffffc4 	addi	r3,r3,-1
   22db0:	30c6703a 	and	r3,r6,r3
   22db4:	1906b03a 	or	r3,r3,r4
   22db8:	1884b03a 	or	r2,r3,r2
   22dbc:	dfc00a17 	ldw	ra,40(sp)
   22dc0:	df000917 	ldw	fp,36(sp)
   22dc4:	ddc00817 	ldw	r23,32(sp)
   22dc8:	dd800717 	ldw	r22,28(sp)
   22dcc:	dd400617 	ldw	r21,24(sp)
   22dd0:	dd000517 	ldw	r20,20(sp)
   22dd4:	dcc00417 	ldw	r19,16(sp)
   22dd8:	dc800317 	ldw	r18,12(sp)
   22ddc:	dc400217 	ldw	r17,8(sp)
   22de0:	dc000117 	ldw	r16,4(sp)
   22de4:	dec00b04 	addi	sp,sp,44
   22de8:	f800283a 	ret
   22dec:	90002b1e 	bne	r18,zero,22e9c <__divsf3+0x244>
   22df0:	04000104 	movi	r16,4
   22df4:	05c00044 	movi	r23,1
   22df8:	003fb106 	br	22cc0 <__alt_data_end+0xfffe2cc0>
   22dfc:	8800251e 	bne	r17,zero,22e94 <__divsf3+0x23c>
   22e00:	01400084 	movi	r5,2
   22e04:	00000206 	br	22e10 <__divsf3+0x1b8>
   22e08:	88001a1e 	bne	r17,zero,22e74 <__divsf3+0x21c>
   22e0c:	01400044 	movi	r5,1
   22e10:	8160b03a 	or	r16,r16,r5
   22e14:	802090ba 	slli	r16,r16,2
   22e18:	00c000b4 	movhi	r3,2
   22e1c:	18cb8d04 	addi	r3,r3,11828
   22e20:	80e1883a 	add	r16,r16,r3
   22e24:	80c00017 	ldw	r3,0(r16)
   22e28:	9d44f03a 	xor	r2,r19,r21
   22e2c:	a18dc83a 	sub	r6,r20,r6
   22e30:	1800683a 	jmp	r3
   22e34:	00022d8c 	andi	zero,zero,2230
   22e38:	00022d8c 	andi	zero,zero,2230
   22e3c:	00022fd8 	cmpnei	zero,zero,2239
   22e40:	00022d74 	movhi	zero,2229
   22e44:	00022fd8 	cmpnei	zero,zero,2239
   22e48:	00022ed4 	movui	zero,2235
   22e4c:	00022fd8 	cmpnei	zero,zero,2239
   22e50:	00022d74 	movhi	zero,2229
   22e54:	00022d8c 	andi	zero,zero,2230
   22e58:	00022d8c 	andi	zero,zero,2230
   22e5c:	00022ed4 	movui	zero,2235
   22e60:	00022d74 	movhi	zero,2229
   22e64:	00022fe8 	cmpgeui	zero,zero,2239
   22e68:	00022fe8 	cmpgeui	zero,zero,2239
   22e6c:	00022fe8 	cmpgeui	zero,zero,2239
   22e70:	00023000 	call	2300 <__alt_mem_onchip_memory2_0-0x1dd00>
   22e74:	8809883a 	mov	r4,r17
   22e78:	00259ec0 	call	259ec <__clzsi2>
   22e7c:	10fffec4 	addi	r3,r2,-5
   22e80:	10801d84 	addi	r2,r2,118
   22e84:	88e2983a 	sll	r17,r17,r3
   22e88:	008dc83a 	sub	r6,zero,r2
   22e8c:	000b883a 	mov	r5,zero
   22e90:	003f9906 	br	22cf8 <__alt_data_end+0xfffe2cf8>
   22e94:	014000c4 	movi	r5,3
   22e98:	003f9706 	br	22cf8 <__alt_data_end+0xfffe2cf8>
   22e9c:	9009883a 	mov	r4,r18
   22ea0:	d9400015 	stw	r5,0(sp)
   22ea4:	00259ec0 	call	259ec <__clzsi2>
   22ea8:	10fffec4 	addi	r3,r2,-5
   22eac:	11801d84 	addi	r6,r2,118
   22eb0:	90e4983a 	sll	r18,r18,r3
   22eb4:	01a9c83a 	sub	r20,zero,r6
   22eb8:	0021883a 	mov	r16,zero
   22ebc:	002f883a 	mov	r23,zero
   22ec0:	d9400017 	ldw	r5,0(sp)
   22ec4:	003f7e06 	br	22cc0 <__alt_data_end+0xfffe2cc0>
   22ec8:	04000304 	movi	r16,12
   22ecc:	05c000c4 	movi	r23,3
   22ed0:	003f7b06 	br	22cc0 <__alt_data_end+0xfffe2cc0>
   22ed4:	01802034 	movhi	r6,128
   22ed8:	000f883a 	mov	r7,zero
   22edc:	31bfffc4 	addi	r6,r6,-1
   22ee0:	013fffc4 	movi	r4,-1
   22ee4:	003fac06 	br	22d98 <__alt_data_end+0xfffe2d98>
   22ee8:	01400044 	movi	r5,1
   22eec:	2909c83a 	sub	r4,r5,r4
   22ef0:	00c006c4 	movi	r3,27
   22ef4:	19004b0e 	bge	r3,r4,23024 <__divsf3+0x3cc>
   22ef8:	114e703a 	and	r7,r2,r5
   22efc:	0009883a 	mov	r4,zero
   22f00:	000d883a 	mov	r6,zero
   22f04:	003fa406 	br	22d98 <__alt_data_end+0xfffe2d98>
   22f08:	9006917a 	slli	r3,r18,5
   22f0c:	8822917a 	slli	r17,r17,5
   22f10:	1c40372e 	bgeu	r3,r17,22ff0 <__divsf3+0x398>
   22f14:	31bfffc4 	addi	r6,r6,-1
   22f18:	010006c4 	movi	r4,27
   22f1c:	000b883a 	mov	r5,zero
   22f20:	180f883a 	mov	r7,r3
   22f24:	294b883a 	add	r5,r5,r5
   22f28:	18c7883a 	add	r3,r3,r3
   22f2c:	38000116 	blt	r7,zero,22f34 <__divsf3+0x2dc>
   22f30:	1c400236 	bltu	r3,r17,22f3c <__divsf3+0x2e4>
   22f34:	1c47c83a 	sub	r3,r3,r17
   22f38:	29400054 	ori	r5,r5,1
   22f3c:	213fffc4 	addi	r4,r4,-1
   22f40:	203ff71e 	bne	r4,zero,22f20 <__alt_data_end+0xfffe2f20>
   22f44:	1806c03a 	cmpne	r3,r3,zero
   22f48:	1962b03a 	or	r17,r3,r5
   22f4c:	31001fc4 	addi	r4,r6,127
   22f50:	013fe50e 	bge	zero,r4,22ee8 <__alt_data_end+0xfffe2ee8>
   22f54:	88c001cc 	andi	r3,r17,7
   22f58:	18000426 	beq	r3,zero,22f6c <__divsf3+0x314>
   22f5c:	88c003cc 	andi	r3,r17,15
   22f60:	01400104 	movi	r5,4
   22f64:	19400126 	beq	r3,r5,22f6c <__divsf3+0x314>
   22f68:	8963883a 	add	r17,r17,r5
   22f6c:	88c2002c 	andhi	r3,r17,2048
   22f70:	18000426 	beq	r3,zero,22f84 <__divsf3+0x32c>
   22f74:	00fe0034 	movhi	r3,63488
   22f78:	18ffffc4 	addi	r3,r3,-1
   22f7c:	31002004 	addi	r4,r6,128
   22f80:	88e2703a 	and	r17,r17,r3
   22f84:	00c03f84 	movi	r3,254
   22f88:	193f8016 	blt	r3,r4,22d8c <__alt_data_end+0xfffe2d8c>
   22f8c:	880c91ba 	slli	r6,r17,6
   22f90:	11c0004c 	andi	r7,r2,1
   22f94:	300cd27a 	srli	r6,r6,9
   22f98:	003f7f06 	br	22d98 <__alt_data_end+0xfffe2d98>
   22f9c:	9080102c 	andhi	r2,r18,64
   22fa0:	10000226 	beq	r2,zero,22fac <__divsf3+0x354>
   22fa4:	8880102c 	andhi	r2,r17,64
   22fa8:	10001826 	beq	r2,zero,2300c <__divsf3+0x3b4>
   22fac:	00802034 	movhi	r2,128
   22fb0:	91801034 	orhi	r6,r18,64
   22fb4:	10bfffc4 	addi	r2,r2,-1
   22fb8:	980f883a 	mov	r7,r19
   22fbc:	308c703a 	and	r6,r6,r2
   22fc0:	003fc706 	br	22ee0 <__alt_data_end+0xfffe2ee0>
   22fc4:	008000c4 	movi	r2,3
   22fc8:	b8802d26 	beq	r23,r2,23080 <__divsf3+0x428>
   22fcc:	00c00044 	movi	r3,1
   22fd0:	b005883a 	mov	r2,r22
   22fd4:	b8ffdd1e 	bne	r23,r3,22f4c <__alt_data_end+0xfffe2f4c>
   22fd8:	11c0004c 	andi	r7,r2,1
   22fdc:	0009883a 	mov	r4,zero
   22fe0:	000d883a 	mov	r6,zero
   22fe4:	003f6c06 	br	22d98 <__alt_data_end+0xfffe2d98>
   22fe8:	9023883a 	mov	r17,r18
   22fec:	003f6406 	br	22d80 <__alt_data_end+0xfffe2d80>
   22ff0:	1c47c83a 	sub	r3,r3,r17
   22ff4:	01000684 	movi	r4,26
   22ff8:	01400044 	movi	r5,1
   22ffc:	003fc806 	br	22f20 <__alt_data_end+0xfffe2f20>
   23000:	9080102c 	andhi	r2,r18,64
   23004:	103fe926 	beq	r2,zero,22fac <__alt_data_end+0xfffe2fac>
   23008:	0023883a 	mov	r17,zero
   2300c:	00802034 	movhi	r2,128
   23010:	89801034 	orhi	r6,r17,64
   23014:	10bfffc4 	addi	r2,r2,-1
   23018:	a80f883a 	mov	r7,r21
   2301c:	308c703a 	and	r6,r6,r2
   23020:	003faf06 	br	22ee0 <__alt_data_end+0xfffe2ee0>
   23024:	01c00804 	movi	r7,32
   23028:	390fc83a 	sub	r7,r7,r4
   2302c:	89ce983a 	sll	r7,r17,r7
   23030:	890ad83a 	srl	r5,r17,r4
   23034:	380ec03a 	cmpne	r7,r7,zero
   23038:	29cab03a 	or	r5,r5,r7
   2303c:	28c001cc 	andi	r3,r5,7
   23040:	18000426 	beq	r3,zero,23054 <__divsf3+0x3fc>
   23044:	28c003cc 	andi	r3,r5,15
   23048:	01000104 	movi	r4,4
   2304c:	19000126 	beq	r3,r4,23054 <__divsf3+0x3fc>
   23050:	290b883a 	add	r5,r5,r4
   23054:	28c1002c 	andhi	r3,r5,1024
   23058:	18000426 	beq	r3,zero,2306c <__divsf3+0x414>
   2305c:	11c0004c 	andi	r7,r2,1
   23060:	01000044 	movi	r4,1
   23064:	000d883a 	mov	r6,zero
   23068:	003f4b06 	br	22d98 <__alt_data_end+0xfffe2d98>
   2306c:	280a91ba 	slli	r5,r5,6
   23070:	11c0004c 	andi	r7,r2,1
   23074:	0009883a 	mov	r4,zero
   23078:	280cd27a 	srli	r6,r5,9
   2307c:	003f4606 	br	22d98 <__alt_data_end+0xfffe2d98>
   23080:	00802034 	movhi	r2,128
   23084:	89801034 	orhi	r6,r17,64
   23088:	10bfffc4 	addi	r2,r2,-1
   2308c:	b00f883a 	mov	r7,r22
   23090:	308c703a 	and	r6,r6,r2
   23094:	003f9206 	br	22ee0 <__alt_data_end+0xfffe2ee0>

00023098 <__gesf2>:
   23098:	2004d5fa 	srli	r2,r4,23
   2309c:	2806d5fa 	srli	r3,r5,23
   230a0:	01802034 	movhi	r6,128
   230a4:	31bfffc4 	addi	r6,r6,-1
   230a8:	10803fcc 	andi	r2,r2,255
   230ac:	01c03fc4 	movi	r7,255
   230b0:	3110703a 	and	r8,r6,r4
   230b4:	18c03fcc 	andi	r3,r3,255
   230b8:	314c703a 	and	r6,r6,r5
   230bc:	2008d7fa 	srli	r4,r4,31
   230c0:	280ad7fa 	srli	r5,r5,31
   230c4:	11c01926 	beq	r2,r7,2312c <__gesf2+0x94>
   230c8:	01c03fc4 	movi	r7,255
   230cc:	19c00f26 	beq	r3,r7,2310c <__gesf2+0x74>
   230d0:	1000061e 	bne	r2,zero,230ec <__gesf2+0x54>
   230d4:	400f003a 	cmpeq	r7,r8,zero
   230d8:	1800071e 	bne	r3,zero,230f8 <__gesf2+0x60>
   230dc:	3000061e 	bne	r6,zero,230f8 <__gesf2+0x60>
   230e0:	0005883a 	mov	r2,zero
   230e4:	40000e1e 	bne	r8,zero,23120 <__gesf2+0x88>
   230e8:	f800283a 	ret
   230ec:	18000a1e 	bne	r3,zero,23118 <__gesf2+0x80>
   230f0:	30000b26 	beq	r6,zero,23120 <__gesf2+0x88>
   230f4:	000f883a 	mov	r7,zero
   230f8:	29403fcc 	andi	r5,r5,255
   230fc:	38000726 	beq	r7,zero,2311c <__gesf2+0x84>
   23100:	28000826 	beq	r5,zero,23124 <__gesf2+0x8c>
   23104:	00800044 	movi	r2,1
   23108:	f800283a 	ret
   2310c:	303ff026 	beq	r6,zero,230d0 <__alt_data_end+0xfffe30d0>
   23110:	00bfff84 	movi	r2,-2
   23114:	f800283a 	ret
   23118:	29403fcc 	andi	r5,r5,255
   2311c:	21400526 	beq	r4,r5,23134 <__gesf2+0x9c>
   23120:	203ff826 	beq	r4,zero,23104 <__alt_data_end+0xfffe3104>
   23124:	00bfffc4 	movi	r2,-1
   23128:	f800283a 	ret
   2312c:	403fe626 	beq	r8,zero,230c8 <__alt_data_end+0xfffe30c8>
   23130:	003ff706 	br	23110 <__alt_data_end+0xfffe3110>
   23134:	18bffa16 	blt	r3,r2,23120 <__alt_data_end+0xfffe3120>
   23138:	10c00216 	blt	r2,r3,23144 <__gesf2+0xac>
   2313c:	323ff836 	bltu	r6,r8,23120 <__alt_data_end+0xfffe3120>
   23140:	4180022e 	bgeu	r8,r6,2314c <__gesf2+0xb4>
   23144:	203fef1e 	bne	r4,zero,23104 <__alt_data_end+0xfffe3104>
   23148:	003ff606 	br	23124 <__alt_data_end+0xfffe3124>
   2314c:	0005883a 	mov	r2,zero
   23150:	f800283a 	ret

00023154 <__mulsf3>:
   23154:	defff504 	addi	sp,sp,-44
   23158:	dc000115 	stw	r16,4(sp)
   2315c:	2020d5fa 	srli	r16,r4,23
   23160:	dd400615 	stw	r21,24(sp)
   23164:	202ad7fa 	srli	r21,r4,31
   23168:	dc800315 	stw	r18,12(sp)
   2316c:	04802034 	movhi	r18,128
   23170:	df000915 	stw	fp,36(sp)
   23174:	dd000515 	stw	r20,20(sp)
   23178:	94bfffc4 	addi	r18,r18,-1
   2317c:	dfc00a15 	stw	ra,40(sp)
   23180:	ddc00815 	stw	r23,32(sp)
   23184:	dd800715 	stw	r22,28(sp)
   23188:	dcc00415 	stw	r19,16(sp)
   2318c:	dc400215 	stw	r17,8(sp)
   23190:	84003fcc 	andi	r16,r16,255
   23194:	9124703a 	and	r18,r18,r4
   23198:	a829883a 	mov	r20,r21
   2319c:	af003fcc 	andi	fp,r21,255
   231a0:	80005426 	beq	r16,zero,232f4 <__mulsf3+0x1a0>
   231a4:	00803fc4 	movi	r2,255
   231a8:	80802f26 	beq	r16,r2,23268 <__mulsf3+0x114>
   231ac:	91002034 	orhi	r4,r18,128
   231b0:	202490fa 	slli	r18,r4,3
   231b4:	843fe044 	addi	r16,r16,-127
   231b8:	0023883a 	mov	r17,zero
   231bc:	002f883a 	mov	r23,zero
   231c0:	2804d5fa 	srli	r2,r5,23
   231c4:	282cd7fa 	srli	r22,r5,31
   231c8:	01002034 	movhi	r4,128
   231cc:	213fffc4 	addi	r4,r4,-1
   231d0:	10803fcc 	andi	r2,r2,255
   231d4:	2166703a 	and	r19,r4,r5
   231d8:	b1803fcc 	andi	r6,r22,255
   231dc:	10004c26 	beq	r2,zero,23310 <__mulsf3+0x1bc>
   231e0:	00c03fc4 	movi	r3,255
   231e4:	10c04726 	beq	r2,r3,23304 <__mulsf3+0x1b0>
   231e8:	99002034 	orhi	r4,r19,128
   231ec:	202690fa 	slli	r19,r4,3
   231f0:	10bfe044 	addi	r2,r2,-127
   231f4:	0007883a 	mov	r3,zero
   231f8:	80a1883a 	add	r16,r16,r2
   231fc:	010003c4 	movi	r4,15
   23200:	1c44b03a 	or	r2,r3,r17
   23204:	b56af03a 	xor	r21,r22,r21
   23208:	81c00044 	addi	r7,r16,1
   2320c:	20806b36 	bltu	r4,r2,233bc <__mulsf3+0x268>
   23210:	100490ba 	slli	r2,r2,2
   23214:	010000b4 	movhi	r4,2
   23218:	210c8a04 	addi	r4,r4,12840
   2321c:	1105883a 	add	r2,r2,r4
   23220:	10800017 	ldw	r2,0(r2)
   23224:	1000683a 	jmp	r2
   23228:	000233bc 	xorhi	zero,zero,2254
   2322c:	0002327c 	xorhi	zero,zero,2249
   23230:	0002327c 	xorhi	zero,zero,2249
   23234:	00023278 	rdprs	zero,zero,2249
   23238:	000233a0 	cmpeqi	zero,zero,2254
   2323c:	000233a0 	cmpeqi	zero,zero,2254
   23240:	0002338c 	andi	zero,zero,2254
   23244:	00023278 	rdprs	zero,zero,2249
   23248:	000233a0 	cmpeqi	zero,zero,2254
   2324c:	0002338c 	andi	zero,zero,2254
   23250:	000233a0 	cmpeqi	zero,zero,2254
   23254:	00023278 	rdprs	zero,zero,2249
   23258:	000233ac 	andhi	zero,zero,2254
   2325c:	000233ac 	andhi	zero,zero,2254
   23260:	000233ac 	andhi	zero,zero,2254
   23264:	000234bc 	xorhi	zero,zero,2258
   23268:	90003b1e 	bne	r18,zero,23358 <__mulsf3+0x204>
   2326c:	04400204 	movi	r17,8
   23270:	05c00084 	movi	r23,2
   23274:	003fd206 	br	231c0 <__alt_data_end+0xfffe31c0>
   23278:	302b883a 	mov	r21,r6
   2327c:	00800084 	movi	r2,2
   23280:	18802626 	beq	r3,r2,2331c <__mulsf3+0x1c8>
   23284:	008000c4 	movi	r2,3
   23288:	1880b826 	beq	r3,r2,2356c <__mulsf3+0x418>
   2328c:	00800044 	movi	r2,1
   23290:	1880af1e 	bne	r3,r2,23550 <__mulsf3+0x3fc>
   23294:	a829883a 	mov	r20,r21
   23298:	0007883a 	mov	r3,zero
   2329c:	0009883a 	mov	r4,zero
   232a0:	18803fcc 	andi	r2,r3,255
   232a4:	100695fa 	slli	r3,r2,23
   232a8:	a0803fcc 	andi	r2,r20,255
   232ac:	100a97fa 	slli	r5,r2,31
   232b0:	00802034 	movhi	r2,128
   232b4:	10bfffc4 	addi	r2,r2,-1
   232b8:	2084703a 	and	r2,r4,r2
   232bc:	10c4b03a 	or	r2,r2,r3
   232c0:	1144b03a 	or	r2,r2,r5
   232c4:	dfc00a17 	ldw	ra,40(sp)
   232c8:	df000917 	ldw	fp,36(sp)
   232cc:	ddc00817 	ldw	r23,32(sp)
   232d0:	dd800717 	ldw	r22,28(sp)
   232d4:	dd400617 	ldw	r21,24(sp)
   232d8:	dd000517 	ldw	r20,20(sp)
   232dc:	dcc00417 	ldw	r19,16(sp)
   232e0:	dc800317 	ldw	r18,12(sp)
   232e4:	dc400217 	ldw	r17,8(sp)
   232e8:	dc000117 	ldw	r16,4(sp)
   232ec:	dec00b04 	addi	sp,sp,44
   232f0:	f800283a 	ret
   232f4:	90000d1e 	bne	r18,zero,2332c <__mulsf3+0x1d8>
   232f8:	04400104 	movi	r17,4
   232fc:	05c00044 	movi	r23,1
   23300:	003faf06 	br	231c0 <__alt_data_end+0xfffe31c0>
   23304:	9806c03a 	cmpne	r3,r19,zero
   23308:	18c00084 	addi	r3,r3,2
   2330c:	003fba06 	br	231f8 <__alt_data_end+0xfffe31f8>
   23310:	9800141e 	bne	r19,zero,23364 <__mulsf3+0x210>
   23314:	00c00044 	movi	r3,1
   23318:	003fb706 	br	231f8 <__alt_data_end+0xfffe31f8>
   2331c:	a829883a 	mov	r20,r21
   23320:	00ffffc4 	movi	r3,-1
   23324:	0009883a 	mov	r4,zero
   23328:	003fdd06 	br	232a0 <__alt_data_end+0xfffe32a0>
   2332c:	9009883a 	mov	r4,r18
   23330:	d9400015 	stw	r5,0(sp)
   23334:	00259ec0 	call	259ec <__clzsi2>
   23338:	10fffec4 	addi	r3,r2,-5
   2333c:	10801d84 	addi	r2,r2,118
   23340:	90e4983a 	sll	r18,r18,r3
   23344:	00a1c83a 	sub	r16,zero,r2
   23348:	0023883a 	mov	r17,zero
   2334c:	002f883a 	mov	r23,zero
   23350:	d9400017 	ldw	r5,0(sp)
   23354:	003f9a06 	br	231c0 <__alt_data_end+0xfffe31c0>
   23358:	04400304 	movi	r17,12
   2335c:	05c000c4 	movi	r23,3
   23360:	003f9706 	br	231c0 <__alt_data_end+0xfffe31c0>
   23364:	9809883a 	mov	r4,r19
   23368:	d9800015 	stw	r6,0(sp)
   2336c:	00259ec0 	call	259ec <__clzsi2>
   23370:	10fffec4 	addi	r3,r2,-5
   23374:	10801d84 	addi	r2,r2,118
   23378:	98e6983a 	sll	r19,r19,r3
   2337c:	0085c83a 	sub	r2,zero,r2
   23380:	0007883a 	mov	r3,zero
   23384:	d9800017 	ldw	r6,0(sp)
   23388:	003f9b06 	br	231f8 <__alt_data_end+0xfffe31f8>
   2338c:	01002034 	movhi	r4,128
   23390:	0029883a 	mov	r20,zero
   23394:	213fffc4 	addi	r4,r4,-1
   23398:	00ffffc4 	movi	r3,-1
   2339c:	003fc006 	br	232a0 <__alt_data_end+0xfffe32a0>
   233a0:	9027883a 	mov	r19,r18
   233a4:	b807883a 	mov	r3,r23
   233a8:	003fb406 	br	2327c <__alt_data_end+0xfffe327c>
   233ac:	9027883a 	mov	r19,r18
   233b0:	e02b883a 	mov	r21,fp
   233b4:	b807883a 	mov	r3,r23
   233b8:	003fb006 	br	2327c <__alt_data_end+0xfffe327c>
   233bc:	9028d43a 	srli	r20,r18,16
   233c0:	982cd43a 	srli	r22,r19,16
   233c4:	94bfffcc 	andi	r18,r18,65535
   233c8:	9cffffcc 	andi	r19,r19,65535
   233cc:	980b883a 	mov	r5,r19
   233d0:	9009883a 	mov	r4,r18
   233d4:	d9c00015 	stw	r7,0(sp)
   233d8:	0022c300 	call	22c30 <__mulsi3>
   233dc:	a00b883a 	mov	r5,r20
   233e0:	9809883a 	mov	r4,r19
   233e4:	1023883a 	mov	r17,r2
   233e8:	0022c300 	call	22c30 <__mulsi3>
   233ec:	a009883a 	mov	r4,r20
   233f0:	b00b883a 	mov	r5,r22
   233f4:	1027883a 	mov	r19,r2
   233f8:	0022c300 	call	22c30 <__mulsi3>
   233fc:	b00b883a 	mov	r5,r22
   23400:	9009883a 	mov	r4,r18
   23404:	1029883a 	mov	r20,r2
   23408:	0022c300 	call	22c30 <__mulsi3>
   2340c:	8806d43a 	srli	r3,r17,16
   23410:	14c5883a 	add	r2,r2,r19
   23414:	d9c00017 	ldw	r7,0(sp)
   23418:	1885883a 	add	r2,r3,r2
   2341c:	14c0022e 	bgeu	r2,r19,23428 <__mulsf3+0x2d4>
   23420:	00c00074 	movhi	r3,1
   23424:	a0e9883a 	add	r20,r20,r3
   23428:	1026943a 	slli	r19,r2,16
   2342c:	8c7fffcc 	andi	r17,r17,65535
   23430:	1004d43a 	srli	r2,r2,16
   23434:	9c63883a 	add	r17,r19,r17
   23438:	882691ba 	slli	r19,r17,6
   2343c:	1505883a 	add	r2,r2,r20
   23440:	8822d6ba 	srli	r17,r17,26
   23444:	100891ba 	slli	r4,r2,6
   23448:	9826c03a 	cmpne	r19,r19,zero
   2344c:	9c62b03a 	or	r17,r19,r17
   23450:	8926b03a 	or	r19,r17,r4
   23454:	9882002c 	andhi	r2,r19,2048
   23458:	10000426 	beq	r2,zero,2346c <__mulsf3+0x318>
   2345c:	9804d07a 	srli	r2,r19,1
   23460:	9900004c 	andi	r4,r19,1
   23464:	3821883a 	mov	r16,r7
   23468:	1126b03a 	or	r19,r2,r4
   2346c:	80c01fc4 	addi	r3,r16,127
   23470:	00c0210e 	bge	zero,r3,234f8 <__mulsf3+0x3a4>
   23474:	988001cc 	andi	r2,r19,7
   23478:	10000426 	beq	r2,zero,2348c <__mulsf3+0x338>
   2347c:	988003cc 	andi	r2,r19,15
   23480:	01000104 	movi	r4,4
   23484:	11000126 	beq	r2,r4,2348c <__mulsf3+0x338>
   23488:	9927883a 	add	r19,r19,r4
   2348c:	9882002c 	andhi	r2,r19,2048
   23490:	10000426 	beq	r2,zero,234a4 <__mulsf3+0x350>
   23494:	00be0034 	movhi	r2,63488
   23498:	10bfffc4 	addi	r2,r2,-1
   2349c:	80c02004 	addi	r3,r16,128
   234a0:	98a6703a 	and	r19,r19,r2
   234a4:	00803f84 	movi	r2,254
   234a8:	10ff9c16 	blt	r2,r3,2331c <__alt_data_end+0xfffe331c>
   234ac:	980891ba 	slli	r4,r19,6
   234b0:	a829883a 	mov	r20,r21
   234b4:	2008d27a 	srli	r4,r4,9
   234b8:	003f7906 	br	232a0 <__alt_data_end+0xfffe32a0>
   234bc:	9080102c 	andhi	r2,r18,64
   234c0:	10000826 	beq	r2,zero,234e4 <__mulsf3+0x390>
   234c4:	9880102c 	andhi	r2,r19,64
   234c8:	1000061e 	bne	r2,zero,234e4 <__mulsf3+0x390>
   234cc:	00802034 	movhi	r2,128
   234d0:	99001034 	orhi	r4,r19,64
   234d4:	10bfffc4 	addi	r2,r2,-1
   234d8:	b029883a 	mov	r20,r22
   234dc:	2088703a 	and	r4,r4,r2
   234e0:	003fad06 	br	23398 <__alt_data_end+0xfffe3398>
   234e4:	00802034 	movhi	r2,128
   234e8:	91001034 	orhi	r4,r18,64
   234ec:	10bfffc4 	addi	r2,r2,-1
   234f0:	2088703a 	and	r4,r4,r2
   234f4:	003fa806 	br	23398 <__alt_data_end+0xfffe3398>
   234f8:	00800044 	movi	r2,1
   234fc:	10c7c83a 	sub	r3,r2,r3
   23500:	008006c4 	movi	r2,27
   23504:	10ff6316 	blt	r2,r3,23294 <__alt_data_end+0xfffe3294>
   23508:	00800804 	movi	r2,32
   2350c:	10c5c83a 	sub	r2,r2,r3
   23510:	9884983a 	sll	r2,r19,r2
   23514:	98c6d83a 	srl	r3,r19,r3
   23518:	1004c03a 	cmpne	r2,r2,zero
   2351c:	1884b03a 	or	r2,r3,r2
   23520:	10c001cc 	andi	r3,r2,7
   23524:	18000426 	beq	r3,zero,23538 <__mulsf3+0x3e4>
   23528:	10c003cc 	andi	r3,r2,15
   2352c:	01000104 	movi	r4,4
   23530:	19000126 	beq	r3,r4,23538 <__mulsf3+0x3e4>
   23534:	1105883a 	add	r2,r2,r4
   23538:	10c1002c 	andhi	r3,r2,1024
   2353c:	18000626 	beq	r3,zero,23558 <__mulsf3+0x404>
   23540:	a829883a 	mov	r20,r21
   23544:	00c00044 	movi	r3,1
   23548:	0009883a 	mov	r4,zero
   2354c:	003f5406 	br	232a0 <__alt_data_end+0xfffe32a0>
   23550:	3821883a 	mov	r16,r7
   23554:	003fc506 	br	2346c <__alt_data_end+0xfffe346c>
   23558:	100491ba 	slli	r2,r2,6
   2355c:	a829883a 	mov	r20,r21
   23560:	0007883a 	mov	r3,zero
   23564:	1008d27a 	srli	r4,r2,9
   23568:	003f4d06 	br	232a0 <__alt_data_end+0xfffe32a0>
   2356c:	00802034 	movhi	r2,128
   23570:	99001034 	orhi	r4,r19,64
   23574:	10bfffc4 	addi	r2,r2,-1
   23578:	a829883a 	mov	r20,r21
   2357c:	2088703a 	and	r4,r4,r2
   23580:	003f8506 	br	23398 <__alt_data_end+0xfffe3398>

00023584 <__subsf3>:
   23584:	defffc04 	addi	sp,sp,-16
   23588:	280cd5fa 	srli	r6,r5,23
   2358c:	dc000015 	stw	r16,0(sp)
   23590:	01c02034 	movhi	r7,128
   23594:	2020d5fa 	srli	r16,r4,23
   23598:	39ffffc4 	addi	r7,r7,-1
   2359c:	3906703a 	and	r3,r7,r4
   235a0:	dc400115 	stw	r17,4(sp)
   235a4:	394e703a 	and	r7,r7,r5
   235a8:	2022d7fa 	srli	r17,r4,31
   235ac:	dfc00315 	stw	ra,12(sp)
   235b0:	dc800215 	stw	r18,8(sp)
   235b4:	31803fcc 	andi	r6,r6,255
   235b8:	01003fc4 	movi	r4,255
   235bc:	84003fcc 	andi	r16,r16,255
   235c0:	180690fa 	slli	r3,r3,3
   235c4:	2804d7fa 	srli	r2,r5,31
   235c8:	380e90fa 	slli	r7,r7,3
   235cc:	31006d26 	beq	r6,r4,23784 <__subsf3+0x200>
   235d0:	1080005c 	xori	r2,r2,1
   235d4:	8189c83a 	sub	r4,r16,r6
   235d8:	14404f26 	beq	r2,r17,23718 <__subsf3+0x194>
   235dc:	0100770e 	bge	zero,r4,237bc <__subsf3+0x238>
   235e0:	30001e1e 	bne	r6,zero,2365c <__subsf3+0xd8>
   235e4:	38006a1e 	bne	r7,zero,23790 <__subsf3+0x20c>
   235e8:	188001cc 	andi	r2,r3,7
   235ec:	10000426 	beq	r2,zero,23600 <__subsf3+0x7c>
   235f0:	188003cc 	andi	r2,r3,15
   235f4:	01000104 	movi	r4,4
   235f8:	11000126 	beq	r2,r4,23600 <__subsf3+0x7c>
   235fc:	1907883a 	add	r3,r3,r4
   23600:	1881002c 	andhi	r2,r3,1024
   23604:	10003926 	beq	r2,zero,236ec <__subsf3+0x168>
   23608:	84000044 	addi	r16,r16,1
   2360c:	00803fc4 	movi	r2,255
   23610:	80807526 	beq	r16,r2,237e8 <__subsf3+0x264>
   23614:	180691ba 	slli	r3,r3,6
   23618:	8880004c 	andi	r2,r17,1
   2361c:	180ad27a 	srli	r5,r3,9
   23620:	84003fcc 	andi	r16,r16,255
   23624:	800695fa 	slli	r3,r16,23
   23628:	10803fcc 	andi	r2,r2,255
   2362c:	01002034 	movhi	r4,128
   23630:	213fffc4 	addi	r4,r4,-1
   23634:	100497fa 	slli	r2,r2,31
   23638:	2920703a 	and	r16,r5,r4
   2363c:	80e0b03a 	or	r16,r16,r3
   23640:	8084b03a 	or	r2,r16,r2
   23644:	dfc00317 	ldw	ra,12(sp)
   23648:	dc800217 	ldw	r18,8(sp)
   2364c:	dc400117 	ldw	r17,4(sp)
   23650:	dc000017 	ldw	r16,0(sp)
   23654:	dec00404 	addi	sp,sp,16
   23658:	f800283a 	ret
   2365c:	00803fc4 	movi	r2,255
   23660:	80bfe126 	beq	r16,r2,235e8 <__alt_data_end+0xfffe35e8>
   23664:	39c10034 	orhi	r7,r7,1024
   23668:	008006c4 	movi	r2,27
   2366c:	11007416 	blt	r2,r4,23840 <__subsf3+0x2bc>
   23670:	00800804 	movi	r2,32
   23674:	1105c83a 	sub	r2,r2,r4
   23678:	3884983a 	sll	r2,r7,r2
   2367c:	390ed83a 	srl	r7,r7,r4
   23680:	1008c03a 	cmpne	r4,r2,zero
   23684:	390eb03a 	or	r7,r7,r4
   23688:	19c7c83a 	sub	r3,r3,r7
   2368c:	1881002c 	andhi	r2,r3,1024
   23690:	10001426 	beq	r2,zero,236e4 <__subsf3+0x160>
   23694:	04810034 	movhi	r18,1024
   23698:	94bfffc4 	addi	r18,r18,-1
   2369c:	1ca4703a 	and	r18,r3,r18
   236a0:	9009883a 	mov	r4,r18
   236a4:	00259ec0 	call	259ec <__clzsi2>
   236a8:	10bffec4 	addi	r2,r2,-5
   236ac:	90a4983a 	sll	r18,r18,r2
   236b0:	14005116 	blt	r2,r16,237f8 <__subsf3+0x274>
   236b4:	1405c83a 	sub	r2,r2,r16
   236b8:	10c00044 	addi	r3,r2,1
   236bc:	00800804 	movi	r2,32
   236c0:	10c5c83a 	sub	r2,r2,r3
   236c4:	9084983a 	sll	r2,r18,r2
   236c8:	90e4d83a 	srl	r18,r18,r3
   236cc:	0021883a 	mov	r16,zero
   236d0:	1006c03a 	cmpne	r3,r2,zero
   236d4:	90c6b03a 	or	r3,r18,r3
   236d8:	003fc306 	br	235e8 <__alt_data_end+0xfffe35e8>
   236dc:	2000e026 	beq	r4,zero,23a60 <__subsf3+0x4dc>
   236e0:	2007883a 	mov	r3,r4
   236e4:	188001cc 	andi	r2,r3,7
   236e8:	103fc11e 	bne	r2,zero,235f0 <__alt_data_end+0xfffe35f0>
   236ec:	180ad0fa 	srli	r5,r3,3
   236f0:	00c03fc4 	movi	r3,255
   236f4:	8880004c 	andi	r2,r17,1
   236f8:	80c0031e 	bne	r16,r3,23708 <__subsf3+0x184>
   236fc:	28006d26 	beq	r5,zero,238b4 <__subsf3+0x330>
   23700:	29401034 	orhi	r5,r5,64
   23704:	043fffc4 	movi	r16,-1
   23708:	00c02034 	movhi	r3,128
   2370c:	18ffffc4 	addi	r3,r3,-1
   23710:	28ca703a 	and	r5,r5,r3
   23714:	003fc206 	br	23620 <__alt_data_end+0xfffe3620>
   23718:	01003c0e 	bge	zero,r4,2380c <__subsf3+0x288>
   2371c:	30002126 	beq	r6,zero,237a4 <__subsf3+0x220>
   23720:	01403fc4 	movi	r5,255
   23724:	817fb026 	beq	r16,r5,235e8 <__alt_data_end+0xfffe35e8>
   23728:	39c10034 	orhi	r7,r7,1024
   2372c:	014006c4 	movi	r5,27
   23730:	29007416 	blt	r5,r4,23904 <__subsf3+0x380>
   23734:	01400804 	movi	r5,32
   23738:	290bc83a 	sub	r5,r5,r4
   2373c:	394a983a 	sll	r5,r7,r5
   23740:	390ed83a 	srl	r7,r7,r4
   23744:	2808c03a 	cmpne	r4,r5,zero
   23748:	390eb03a 	or	r7,r7,r4
   2374c:	19c7883a 	add	r3,r3,r7
   23750:	1901002c 	andhi	r4,r3,1024
   23754:	20003826 	beq	r4,zero,23838 <__subsf3+0x2b4>
   23758:	84000044 	addi	r16,r16,1
   2375c:	01003fc4 	movi	r4,255
   23760:	81005426 	beq	r16,r4,238b4 <__subsf3+0x330>
   23764:	1023883a 	mov	r17,r2
   23768:	00bf0034 	movhi	r2,64512
   2376c:	10bfffc4 	addi	r2,r2,-1
   23770:	1900004c 	andi	r4,r3,1
   23774:	1886703a 	and	r3,r3,r2
   23778:	1806d07a 	srli	r3,r3,1
   2377c:	1906b03a 	or	r3,r3,r4
   23780:	003f9906 	br	235e8 <__alt_data_end+0xfffe35e8>
   23784:	383f9226 	beq	r7,zero,235d0 <__alt_data_end+0xfffe35d0>
   23788:	10803fcc 	andi	r2,r2,255
   2378c:	003f9106 	br	235d4 <__alt_data_end+0xfffe35d4>
   23790:	213fffc4 	addi	r4,r4,-1
   23794:	203fbc26 	beq	r4,zero,23688 <__alt_data_end+0xfffe3688>
   23798:	00803fc4 	movi	r2,255
   2379c:	80bfb21e 	bne	r16,r2,23668 <__alt_data_end+0xfffe3668>
   237a0:	003f9106 	br	235e8 <__alt_data_end+0xfffe35e8>
   237a4:	383f9026 	beq	r7,zero,235e8 <__alt_data_end+0xfffe35e8>
   237a8:	213fffc4 	addi	r4,r4,-1
   237ac:	203fe726 	beq	r4,zero,2374c <__alt_data_end+0xfffe374c>
   237b0:	01403fc4 	movi	r5,255
   237b4:	817fdd1e 	bne	r16,r5,2372c <__alt_data_end+0xfffe372c>
   237b8:	003f8b06 	br	235e8 <__alt_data_end+0xfffe35e8>
   237bc:	2000221e 	bne	r4,zero,23848 <__subsf3+0x2c4>
   237c0:	81000044 	addi	r4,r16,1
   237c4:	21003fcc 	andi	r4,r4,255
   237c8:	01400044 	movi	r5,1
   237cc:	2900470e 	bge	r5,r4,238ec <__subsf3+0x368>
   237d0:	19e5c83a 	sub	r18,r3,r7
   237d4:	9141002c 	andhi	r5,r18,1024
   237d8:	28002d26 	beq	r5,zero,23890 <__subsf3+0x30c>
   237dc:	38e5c83a 	sub	r18,r7,r3
   237e0:	1023883a 	mov	r17,r2
   237e4:	003fae06 	br	236a0 <__alt_data_end+0xfffe36a0>
   237e8:	8880004c 	andi	r2,r17,1
   237ec:	043fffc4 	movi	r16,-1
   237f0:	000b883a 	mov	r5,zero
   237f4:	003f8a06 	br	23620 <__alt_data_end+0xfffe3620>
   237f8:	00ff0034 	movhi	r3,64512
   237fc:	18ffffc4 	addi	r3,r3,-1
   23800:	80a1c83a 	sub	r16,r16,r2
   23804:	90c6703a 	and	r3,r18,r3
   23808:	003f7706 	br	235e8 <__alt_data_end+0xfffe35e8>
   2380c:	2000431e 	bne	r4,zero,2391c <__subsf3+0x398>
   23810:	81000044 	addi	r4,r16,1
   23814:	21803fcc 	andi	r6,r4,255
   23818:	01400044 	movi	r5,1
   2381c:	2980280e 	bge	r5,r6,238c0 <__subsf3+0x33c>
   23820:	01403fc4 	movi	r5,255
   23824:	21402326 	beq	r4,r5,238b4 <__subsf3+0x330>
   23828:	19c7883a 	add	r3,r3,r7
   2382c:	1806d07a 	srli	r3,r3,1
   23830:	2021883a 	mov	r16,r4
   23834:	003f6c06 	br	235e8 <__alt_data_end+0xfffe35e8>
   23838:	1023883a 	mov	r17,r2
   2383c:	003fa906 	br	236e4 <__alt_data_end+0xfffe36e4>
   23840:	01c00044 	movi	r7,1
   23844:	003f9006 	br	23688 <__alt_data_end+0xfffe3688>
   23848:	8000151e 	bne	r16,zero,238a0 <__subsf3+0x31c>
   2384c:	18002f26 	beq	r3,zero,2390c <__subsf3+0x388>
   23850:	0108303a 	nor	r4,zero,r4
   23854:	20000a26 	beq	r4,zero,23880 <__subsf3+0x2fc>
   23858:	01403fc4 	movi	r5,255
   2385c:	31402b26 	beq	r6,r5,2390c <__subsf3+0x388>
   23860:	014006c4 	movi	r5,27
   23864:	29006e16 	blt	r5,r4,23a20 <__subsf3+0x49c>
   23868:	01400804 	movi	r5,32
   2386c:	290bc83a 	sub	r5,r5,r4
   23870:	194a983a 	sll	r5,r3,r5
   23874:	1908d83a 	srl	r4,r3,r4
   23878:	2806c03a 	cmpne	r3,r5,zero
   2387c:	20c6b03a 	or	r3,r4,r3
   23880:	38c7c83a 	sub	r3,r7,r3
   23884:	3021883a 	mov	r16,r6
   23888:	1023883a 	mov	r17,r2
   2388c:	003f7f06 	br	2368c <__alt_data_end+0xfffe368c>
   23890:	903f831e 	bne	r18,zero,236a0 <__alt_data_end+0xfffe36a0>
   23894:	0005883a 	mov	r2,zero
   23898:	0021883a 	mov	r16,zero
   2389c:	003f9a06 	br	23708 <__alt_data_end+0xfffe3708>
   238a0:	01403fc4 	movi	r5,255
   238a4:	31401926 	beq	r6,r5,2390c <__subsf3+0x388>
   238a8:	0109c83a 	sub	r4,zero,r4
   238ac:	18c10034 	orhi	r3,r3,1024
   238b0:	003feb06 	br	23860 <__alt_data_end+0xfffe3860>
   238b4:	043fffc4 	movi	r16,-1
   238b8:	000b883a 	mov	r5,zero
   238bc:	003f5806 	br	23620 <__alt_data_end+0xfffe3620>
   238c0:	8000481e 	bne	r16,zero,239e4 <__subsf3+0x460>
   238c4:	18006226 	beq	r3,zero,23a50 <__subsf3+0x4cc>
   238c8:	383f4726 	beq	r7,zero,235e8 <__alt_data_end+0xfffe35e8>
   238cc:	19c7883a 	add	r3,r3,r7
   238d0:	1881002c 	andhi	r2,r3,1024
   238d4:	103f8326 	beq	r2,zero,236e4 <__alt_data_end+0xfffe36e4>
   238d8:	00bf0034 	movhi	r2,64512
   238dc:	10bfffc4 	addi	r2,r2,-1
   238e0:	2821883a 	mov	r16,r5
   238e4:	1886703a 	and	r3,r3,r2
   238e8:	003f3f06 	br	235e8 <__alt_data_end+0xfffe35e8>
   238ec:	80001c1e 	bne	r16,zero,23960 <__subsf3+0x3dc>
   238f0:	1800261e 	bne	r3,zero,2398c <__subsf3+0x408>
   238f4:	38004c26 	beq	r7,zero,23a28 <__subsf3+0x4a4>
   238f8:	3807883a 	mov	r3,r7
   238fc:	1023883a 	mov	r17,r2
   23900:	003f3906 	br	235e8 <__alt_data_end+0xfffe35e8>
   23904:	01c00044 	movi	r7,1
   23908:	003f9006 	br	2374c <__alt_data_end+0xfffe374c>
   2390c:	3807883a 	mov	r3,r7
   23910:	3021883a 	mov	r16,r6
   23914:	1023883a 	mov	r17,r2
   23918:	003f3306 	br	235e8 <__alt_data_end+0xfffe35e8>
   2391c:	8000161e 	bne	r16,zero,23978 <__subsf3+0x3f4>
   23920:	18002d26 	beq	r3,zero,239d8 <__subsf3+0x454>
   23924:	0108303a 	nor	r4,zero,r4
   23928:	20000a26 	beq	r4,zero,23954 <__subsf3+0x3d0>
   2392c:	01403fc4 	movi	r5,255
   23930:	31402926 	beq	r6,r5,239d8 <__subsf3+0x454>
   23934:	014006c4 	movi	r5,27
   23938:	29004716 	blt	r5,r4,23a58 <__subsf3+0x4d4>
   2393c:	01400804 	movi	r5,32
   23940:	290bc83a 	sub	r5,r5,r4
   23944:	194a983a 	sll	r5,r3,r5
   23948:	1908d83a 	srl	r4,r3,r4
   2394c:	2806c03a 	cmpne	r3,r5,zero
   23950:	20c6b03a 	or	r3,r4,r3
   23954:	19c7883a 	add	r3,r3,r7
   23958:	3021883a 	mov	r16,r6
   2395c:	003f7c06 	br	23750 <__alt_data_end+0xfffe3750>
   23960:	1800111e 	bne	r3,zero,239a8 <__subsf3+0x424>
   23964:	38003326 	beq	r7,zero,23a34 <__subsf3+0x4b0>
   23968:	3807883a 	mov	r3,r7
   2396c:	1023883a 	mov	r17,r2
   23970:	04003fc4 	movi	r16,255
   23974:	003f1c06 	br	235e8 <__alt_data_end+0xfffe35e8>
   23978:	01403fc4 	movi	r5,255
   2397c:	31401626 	beq	r6,r5,239d8 <__subsf3+0x454>
   23980:	0109c83a 	sub	r4,zero,r4
   23984:	18c10034 	orhi	r3,r3,1024
   23988:	003fea06 	br	23934 <__alt_data_end+0xfffe3934>
   2398c:	383f1626 	beq	r7,zero,235e8 <__alt_data_end+0xfffe35e8>
   23990:	19c9c83a 	sub	r4,r3,r7
   23994:	2141002c 	andhi	r5,r4,1024
   23998:	283f5026 	beq	r5,zero,236dc <__alt_data_end+0xfffe36dc>
   2399c:	38c7c83a 	sub	r3,r7,r3
   239a0:	1023883a 	mov	r17,r2
   239a4:	003f1006 	br	235e8 <__alt_data_end+0xfffe35e8>
   239a8:	38001b26 	beq	r7,zero,23a18 <__subsf3+0x494>
   239ac:	1806d0fa 	srli	r3,r3,3
   239b0:	1900102c 	andhi	r4,r3,64
   239b4:	20000526 	beq	r4,zero,239cc <__subsf3+0x448>
   239b8:	380ed0fa 	srli	r7,r7,3
   239bc:	3900102c 	andhi	r4,r7,64
   239c0:	2000021e 	bne	r4,zero,239cc <__subsf3+0x448>
   239c4:	3807883a 	mov	r3,r7
   239c8:	1023883a 	mov	r17,r2
   239cc:	180690fa 	slli	r3,r3,3
   239d0:	04003fc4 	movi	r16,255
   239d4:	003f0406 	br	235e8 <__alt_data_end+0xfffe35e8>
   239d8:	3807883a 	mov	r3,r7
   239dc:	3021883a 	mov	r16,r6
   239e0:	003f0106 	br	235e8 <__alt_data_end+0xfffe35e8>
   239e4:	18001726 	beq	r3,zero,23a44 <__subsf3+0x4c0>
   239e8:	38000b26 	beq	r7,zero,23a18 <__subsf3+0x494>
   239ec:	1806d0fa 	srli	r3,r3,3
   239f0:	1900102c 	andhi	r4,r3,64
   239f4:	20000426 	beq	r4,zero,23a08 <__subsf3+0x484>
   239f8:	380ed0fa 	srli	r7,r7,3
   239fc:	3900102c 	andhi	r4,r7,64
   23a00:	2000011e 	bne	r4,zero,23a08 <__subsf3+0x484>
   23a04:	3807883a 	mov	r3,r7
   23a08:	180690fa 	slli	r3,r3,3
   23a0c:	1023883a 	mov	r17,r2
   23a10:	04003fc4 	movi	r16,255
   23a14:	003ef406 	br	235e8 <__alt_data_end+0xfffe35e8>
   23a18:	04003fc4 	movi	r16,255
   23a1c:	003ef206 	br	235e8 <__alt_data_end+0xfffe35e8>
   23a20:	00c00044 	movi	r3,1
   23a24:	003f9606 	br	23880 <__alt_data_end+0xfffe3880>
   23a28:	000b883a 	mov	r5,zero
   23a2c:	0005883a 	mov	r2,zero
   23a30:	003f3506 	br	23708 <__alt_data_end+0xfffe3708>
   23a34:	01402034 	movhi	r5,128
   23a38:	297fffc4 	addi	r5,r5,-1
   23a3c:	0005883a 	mov	r2,zero
   23a40:	003f2f06 	br	23700 <__alt_data_end+0xfffe3700>
   23a44:	3807883a 	mov	r3,r7
   23a48:	04003fc4 	movi	r16,255
   23a4c:	003ee606 	br	235e8 <__alt_data_end+0xfffe35e8>
   23a50:	3807883a 	mov	r3,r7
   23a54:	003ee406 	br	235e8 <__alt_data_end+0xfffe35e8>
   23a58:	00c00044 	movi	r3,1
   23a5c:	003fbd06 	br	23954 <__alt_data_end+0xfffe3954>
   23a60:	0005883a 	mov	r2,zero
   23a64:	003f2806 	br	23708 <__alt_data_end+0xfffe3708>

00023a68 <__fixsfsi>:
   23a68:	200ad5fa 	srli	r5,r4,23
   23a6c:	00c02034 	movhi	r3,128
   23a70:	18ffffc4 	addi	r3,r3,-1
   23a74:	29403fcc 	andi	r5,r5,255
   23a78:	00801f84 	movi	r2,126
   23a7c:	1906703a 	and	r3,r3,r4
   23a80:	2008d7fa 	srli	r4,r4,31
   23a84:	11400e0e 	bge	r2,r5,23ac0 <__fixsfsi+0x58>
   23a88:	00802744 	movi	r2,157
   23a8c:	11400816 	blt	r2,r5,23ab0 <__fixsfsi+0x48>
   23a90:	00802544 	movi	r2,149
   23a94:	18c02034 	orhi	r3,r3,128
   23a98:	11400b0e 	bge	r2,r5,23ac8 <__fixsfsi+0x60>
   23a9c:	28bfda84 	addi	r2,r5,-150
   23aa0:	1884983a 	sll	r2,r3,r2
   23aa4:	20000726 	beq	r4,zero,23ac4 <__fixsfsi+0x5c>
   23aa8:	0085c83a 	sub	r2,zero,r2
   23aac:	f800283a 	ret
   23ab0:	00a00034 	movhi	r2,32768
   23ab4:	10bfffc4 	addi	r2,r2,-1
   23ab8:	2085883a 	add	r2,r4,r2
   23abc:	f800283a 	ret
   23ac0:	0005883a 	mov	r2,zero
   23ac4:	f800283a 	ret
   23ac8:	00802584 	movi	r2,150
   23acc:	1145c83a 	sub	r2,r2,r5
   23ad0:	1884d83a 	srl	r2,r3,r2
   23ad4:	003ff306 	br	23aa4 <__alt_data_end+0xfffe3aa4>

00023ad8 <__floatsisf>:
   23ad8:	defffd04 	addi	sp,sp,-12
   23adc:	dfc00215 	stw	ra,8(sp)
   23ae0:	dc400115 	stw	r17,4(sp)
   23ae4:	dc000015 	stw	r16,0(sp)
   23ae8:	20003526 	beq	r4,zero,23bc0 <__floatsisf+0xe8>
   23aec:	2021883a 	mov	r16,r4
   23af0:	2022d7fa 	srli	r17,r4,31
   23af4:	20003616 	blt	r4,zero,23bd0 <__floatsisf+0xf8>
   23af8:	8009883a 	mov	r4,r16
   23afc:	00259ec0 	call	259ec <__clzsi2>
   23b00:	00c02784 	movi	r3,158
   23b04:	1887c83a 	sub	r3,r3,r2
   23b08:	01002584 	movi	r4,150
   23b0c:	20c01416 	blt	r4,r3,23b60 <__floatsisf+0x88>
   23b10:	20c9c83a 	sub	r4,r4,r3
   23b14:	8120983a 	sll	r16,r16,r4
   23b18:	00802034 	movhi	r2,128
   23b1c:	10bfffc4 	addi	r2,r2,-1
   23b20:	8809883a 	mov	r4,r17
   23b24:	80a0703a 	and	r16,r16,r2
   23b28:	18803fcc 	andi	r2,r3,255
   23b2c:	100695fa 	slli	r3,r2,23
   23b30:	20803fcc 	andi	r2,r4,255
   23b34:	100897fa 	slli	r4,r2,31
   23b38:	00802034 	movhi	r2,128
   23b3c:	10bfffc4 	addi	r2,r2,-1
   23b40:	8084703a 	and	r2,r16,r2
   23b44:	10c4b03a 	or	r2,r2,r3
   23b48:	1104b03a 	or	r2,r2,r4
   23b4c:	dfc00217 	ldw	ra,8(sp)
   23b50:	dc400117 	ldw	r17,4(sp)
   23b54:	dc000017 	ldw	r16,0(sp)
   23b58:	dec00304 	addi	sp,sp,12
   23b5c:	f800283a 	ret
   23b60:	01002644 	movi	r4,153
   23b64:	20c01c16 	blt	r4,r3,23bd8 <__floatsisf+0x100>
   23b68:	20c9c83a 	sub	r4,r4,r3
   23b6c:	8120983a 	sll	r16,r16,r4
   23b70:	013f0034 	movhi	r4,64512
   23b74:	213fffc4 	addi	r4,r4,-1
   23b78:	814001cc 	andi	r5,r16,7
   23b7c:	8108703a 	and	r4,r16,r4
   23b80:	28000426 	beq	r5,zero,23b94 <__floatsisf+0xbc>
   23b84:	840003cc 	andi	r16,r16,15
   23b88:	01400104 	movi	r5,4
   23b8c:	81400126 	beq	r16,r5,23b94 <__floatsisf+0xbc>
   23b90:	2149883a 	add	r4,r4,r5
   23b94:	2141002c 	andhi	r5,r4,1024
   23b98:	28000526 	beq	r5,zero,23bb0 <__floatsisf+0xd8>
   23b9c:	00c027c4 	movi	r3,159
   23ba0:	1887c83a 	sub	r3,r3,r2
   23ba4:	00bf0034 	movhi	r2,64512
   23ba8:	10bfffc4 	addi	r2,r2,-1
   23bac:	2088703a 	and	r4,r4,r2
   23bb0:	202091ba 	slli	r16,r4,6
   23bb4:	8809883a 	mov	r4,r17
   23bb8:	8020d27a 	srli	r16,r16,9
   23bbc:	003fda06 	br	23b28 <__alt_data_end+0xfffe3b28>
   23bc0:	0009883a 	mov	r4,zero
   23bc4:	0007883a 	mov	r3,zero
   23bc8:	0021883a 	mov	r16,zero
   23bcc:	003fd606 	br	23b28 <__alt_data_end+0xfffe3b28>
   23bd0:	0121c83a 	sub	r16,zero,r4
   23bd4:	003fc806 	br	23af8 <__alt_data_end+0xfffe3af8>
   23bd8:	01002e44 	movi	r4,185
   23bdc:	20c9c83a 	sub	r4,r4,r3
   23be0:	01400144 	movi	r5,5
   23be4:	8108983a 	sll	r4,r16,r4
   23be8:	288bc83a 	sub	r5,r5,r2
   23bec:	8160d83a 	srl	r16,r16,r5
   23bf0:	2008c03a 	cmpne	r4,r4,zero
   23bf4:	8120b03a 	or	r16,r16,r4
   23bf8:	003fdd06 	br	23b70 <__alt_data_end+0xfffe3b70>

00023bfc <__divdf3>:
   23bfc:	defff004 	addi	sp,sp,-64
   23c00:	dc800815 	stw	r18,32(sp)
   23c04:	2824d53a 	srli	r18,r5,20
   23c08:	dd800c15 	stw	r22,48(sp)
   23c0c:	282cd7fa 	srli	r22,r5,31
   23c10:	dc000615 	stw	r16,24(sp)
   23c14:	04000434 	movhi	r16,16
   23c18:	843fffc4 	addi	r16,r16,-1
   23c1c:	dfc00f15 	stw	ra,60(sp)
   23c20:	df000e15 	stw	fp,56(sp)
   23c24:	ddc00d15 	stw	r23,52(sp)
   23c28:	dd400b15 	stw	r21,44(sp)
   23c2c:	dd000a15 	stw	r20,40(sp)
   23c30:	dcc00915 	stw	r19,36(sp)
   23c34:	dc400715 	stw	r17,28(sp)
   23c38:	9481ffcc 	andi	r18,r18,2047
   23c3c:	2c20703a 	and	r16,r5,r16
   23c40:	b2003fcc 	andi	r8,r22,255
   23c44:	90006126 	beq	r18,zero,23dcc <__divdf3+0x1d0>
   23c48:	0081ffc4 	movi	r2,2047
   23c4c:	202b883a 	mov	r21,r4
   23c50:	90803726 	beq	r18,r2,23d30 <__divdf3+0x134>
   23c54:	80800434 	orhi	r2,r16,16
   23c58:	100490fa 	slli	r2,r2,3
   23c5c:	2020d77a 	srli	r16,r4,29
   23c60:	202a90fa 	slli	r21,r4,3
   23c64:	94bf0044 	addi	r18,r18,-1023
   23c68:	80a0b03a 	or	r16,r16,r2
   23c6c:	0013883a 	mov	r9,zero
   23c70:	000b883a 	mov	r5,zero
   23c74:	3806d53a 	srli	r3,r7,20
   23c78:	382ed7fa 	srli	r23,r7,31
   23c7c:	04400434 	movhi	r17,16
   23c80:	8c7fffc4 	addi	r17,r17,-1
   23c84:	18c1ffcc 	andi	r3,r3,2047
   23c88:	3029883a 	mov	r20,r6
   23c8c:	3c62703a 	and	r17,r7,r17
   23c90:	bf003fcc 	andi	fp,r23,255
   23c94:	18006e26 	beq	r3,zero,23e50 <__divdf3+0x254>
   23c98:	0081ffc4 	movi	r2,2047
   23c9c:	18806626 	beq	r3,r2,23e38 <__divdf3+0x23c>
   23ca0:	88800434 	orhi	r2,r17,16
   23ca4:	100490fa 	slli	r2,r2,3
   23ca8:	3022d77a 	srli	r17,r6,29
   23cac:	302890fa 	slli	r20,r6,3
   23cb0:	18ff0044 	addi	r3,r3,-1023
   23cb4:	88a2b03a 	or	r17,r17,r2
   23cb8:	000f883a 	mov	r7,zero
   23cbc:	b5e6f03a 	xor	r19,r22,r23
   23cc0:	3a4cb03a 	or	r6,r7,r9
   23cc4:	008003c4 	movi	r2,15
   23cc8:	9809883a 	mov	r4,r19
   23ccc:	90c7c83a 	sub	r3,r18,r3
   23cd0:	9cc03fcc 	andi	r19,r19,255
   23cd4:	11809636 	bltu	r2,r6,23f30 <__divdf3+0x334>
   23cd8:	300c90ba 	slli	r6,r6,2
   23cdc:	008000b4 	movhi	r2,2
   23ce0:	108f3c04 	addi	r2,r2,15600
   23ce4:	308d883a 	add	r6,r6,r2
   23ce8:	30800017 	ldw	r2,0(r6)
   23cec:	1000683a 	jmp	r2
   23cf0:	00023f30 	cmpltui	zero,zero,2300
   23cf4:	00023d68 	cmpgeui	zero,zero,2293
   23cf8:	00023f20 	cmpeqi	zero,zero,2300
   23cfc:	00023d5c 	xori	zero,zero,2293
   23d00:	00023f20 	cmpeqi	zero,zero,2300
   23d04:	00023ef4 	movhi	zero,2299
   23d08:	00023f20 	cmpeqi	zero,zero,2300
   23d0c:	00023d5c 	xori	zero,zero,2293
   23d10:	00023d68 	cmpgeui	zero,zero,2293
   23d14:	00023d68 	cmpgeui	zero,zero,2293
   23d18:	00023ef4 	movhi	zero,2299
   23d1c:	00023d5c 	xori	zero,zero,2293
   23d20:	00023d4c 	andi	zero,zero,2293
   23d24:	00023d4c 	andi	zero,zero,2293
   23d28:	00023d4c 	andi	zero,zero,2293
   23d2c:	000242b8 	rdprs	zero,zero,2314
   23d30:	2404b03a 	or	r2,r4,r16
   23d34:	10006c1e 	bne	r2,zero,23ee8 <__divdf3+0x2ec>
   23d38:	02400204 	movi	r9,8
   23d3c:	0021883a 	mov	r16,zero
   23d40:	002b883a 	mov	r21,zero
   23d44:	01400084 	movi	r5,2
   23d48:	003fca06 	br	23c74 <__alt_data_end+0xfffe3c74>
   23d4c:	8023883a 	mov	r17,r16
   23d50:	a829883a 	mov	r20,r21
   23d54:	4039883a 	mov	fp,r8
   23d58:	280f883a 	mov	r7,r5
   23d5c:	00800084 	movi	r2,2
   23d60:	3881601e 	bne	r7,r2,242e4 <__divdf3+0x6e8>
   23d64:	e027883a 	mov	r19,fp
   23d68:	9900004c 	andi	r4,r19,1
   23d6c:	0081ffc4 	movi	r2,2047
   23d70:	0021883a 	mov	r16,zero
   23d74:	002b883a 	mov	r21,zero
   23d78:	1004953a 	slli	r2,r2,20
   23d7c:	20c03fcc 	andi	r3,r4,255
   23d80:	01400434 	movhi	r5,16
   23d84:	297fffc4 	addi	r5,r5,-1
   23d88:	180697fa 	slli	r3,r3,31
   23d8c:	8160703a 	and	r16,r16,r5
   23d90:	80a0b03a 	or	r16,r16,r2
   23d94:	80c6b03a 	or	r3,r16,r3
   23d98:	a805883a 	mov	r2,r21
   23d9c:	dfc00f17 	ldw	ra,60(sp)
   23da0:	df000e17 	ldw	fp,56(sp)
   23da4:	ddc00d17 	ldw	r23,52(sp)
   23da8:	dd800c17 	ldw	r22,48(sp)
   23dac:	dd400b17 	ldw	r21,44(sp)
   23db0:	dd000a17 	ldw	r20,40(sp)
   23db4:	dcc00917 	ldw	r19,36(sp)
   23db8:	dc800817 	ldw	r18,32(sp)
   23dbc:	dc400717 	ldw	r17,28(sp)
   23dc0:	dc000617 	ldw	r16,24(sp)
   23dc4:	dec01004 	addi	sp,sp,64
   23dc8:	f800283a 	ret
   23dcc:	2404b03a 	or	r2,r4,r16
   23dd0:	2023883a 	mov	r17,r4
   23dd4:	10003f26 	beq	r2,zero,23ed4 <__divdf3+0x2d8>
   23dd8:	80015e26 	beq	r16,zero,24354 <__divdf3+0x758>
   23ddc:	8009883a 	mov	r4,r16
   23de0:	d9800215 	stw	r6,8(sp)
   23de4:	d9c00515 	stw	r7,20(sp)
   23de8:	da000415 	stw	r8,16(sp)
   23dec:	00259ec0 	call	259ec <__clzsi2>
   23df0:	d9800217 	ldw	r6,8(sp)
   23df4:	d9c00517 	ldw	r7,20(sp)
   23df8:	da000417 	ldw	r8,16(sp)
   23dfc:	113ffd44 	addi	r4,r2,-11
   23e00:	00c00704 	movi	r3,28
   23e04:	19014f16 	blt	r3,r4,24344 <__divdf3+0x748>
   23e08:	00c00744 	movi	r3,29
   23e0c:	157ffe04 	addi	r21,r2,-8
   23e10:	1907c83a 	sub	r3,r3,r4
   23e14:	8560983a 	sll	r16,r16,r21
   23e18:	88c6d83a 	srl	r3,r17,r3
   23e1c:	8d6a983a 	sll	r21,r17,r21
   23e20:	1c20b03a 	or	r16,r3,r16
   23e24:	1080fcc4 	addi	r2,r2,1011
   23e28:	00a5c83a 	sub	r18,zero,r2
   23e2c:	0013883a 	mov	r9,zero
   23e30:	000b883a 	mov	r5,zero
   23e34:	003f8f06 	br	23c74 <__alt_data_end+0xfffe3c74>
   23e38:	3444b03a 	or	r2,r6,r17
   23e3c:	1000231e 	bne	r2,zero,23ecc <__divdf3+0x2d0>
   23e40:	0023883a 	mov	r17,zero
   23e44:	0029883a 	mov	r20,zero
   23e48:	01c00084 	movi	r7,2
   23e4c:	003f9b06 	br	23cbc <__alt_data_end+0xfffe3cbc>
   23e50:	3444b03a 	or	r2,r6,r17
   23e54:	10001926 	beq	r2,zero,23ebc <__divdf3+0x2c0>
   23e58:	88014b26 	beq	r17,zero,24388 <__divdf3+0x78c>
   23e5c:	8809883a 	mov	r4,r17
   23e60:	d9400115 	stw	r5,4(sp)
   23e64:	d9800215 	stw	r6,8(sp)
   23e68:	da000415 	stw	r8,16(sp)
   23e6c:	da400315 	stw	r9,12(sp)
   23e70:	00259ec0 	call	259ec <__clzsi2>
   23e74:	d9400117 	ldw	r5,4(sp)
   23e78:	d9800217 	ldw	r6,8(sp)
   23e7c:	da000417 	ldw	r8,16(sp)
   23e80:	da400317 	ldw	r9,12(sp)
   23e84:	113ffd44 	addi	r4,r2,-11
   23e88:	00c00704 	movi	r3,28
   23e8c:	19013a16 	blt	r3,r4,24378 <__divdf3+0x77c>
   23e90:	00c00744 	movi	r3,29
   23e94:	153ffe04 	addi	r20,r2,-8
   23e98:	1907c83a 	sub	r3,r3,r4
   23e9c:	8d22983a 	sll	r17,r17,r20
   23ea0:	30c6d83a 	srl	r3,r6,r3
   23ea4:	3528983a 	sll	r20,r6,r20
   23ea8:	1c62b03a 	or	r17,r3,r17
   23eac:	1080fcc4 	addi	r2,r2,1011
   23eb0:	0087c83a 	sub	r3,zero,r2
   23eb4:	000f883a 	mov	r7,zero
   23eb8:	003f8006 	br	23cbc <__alt_data_end+0xfffe3cbc>
   23ebc:	0023883a 	mov	r17,zero
   23ec0:	0029883a 	mov	r20,zero
   23ec4:	01c00044 	movi	r7,1
   23ec8:	003f7c06 	br	23cbc <__alt_data_end+0xfffe3cbc>
   23ecc:	01c000c4 	movi	r7,3
   23ed0:	003f7a06 	br	23cbc <__alt_data_end+0xfffe3cbc>
   23ed4:	02400104 	movi	r9,4
   23ed8:	0021883a 	mov	r16,zero
   23edc:	002b883a 	mov	r21,zero
   23ee0:	01400044 	movi	r5,1
   23ee4:	003f6306 	br	23c74 <__alt_data_end+0xfffe3c74>
   23ee8:	02400304 	movi	r9,12
   23eec:	014000c4 	movi	r5,3
   23ef0:	003f6006 	br	23c74 <__alt_data_end+0xfffe3c74>
   23ef4:	04000434 	movhi	r16,16
   23ef8:	0009883a 	mov	r4,zero
   23efc:	843fffc4 	addi	r16,r16,-1
   23f00:	057fffc4 	movi	r21,-1
   23f04:	0081ffc4 	movi	r2,2047
   23f08:	003f9b06 	br	23d78 <__alt_data_end+0xfffe3d78>
   23f0c:	00c00044 	movi	r3,1
   23f10:	1887c83a 	sub	r3,r3,r2
   23f14:	01000e04 	movi	r4,56
   23f18:	20c1530e 	bge	r4,r3,24468 <__divdf3+0x86c>
   23f1c:	9900004c 	andi	r4,r19,1
   23f20:	0005883a 	mov	r2,zero
   23f24:	0021883a 	mov	r16,zero
   23f28:	002b883a 	mov	r21,zero
   23f2c:	003f9206 	br	23d78 <__alt_data_end+0xfffe3d78>
   23f30:	8c012e36 	bltu	r17,r16,243ec <__divdf3+0x7f0>
   23f34:	84412c26 	beq	r16,r17,243e8 <__divdf3+0x7ec>
   23f38:	a82f883a 	mov	r23,r21
   23f3c:	18ffffc4 	addi	r3,r3,-1
   23f40:	002b883a 	mov	r21,zero
   23f44:	a004d63a 	srli	r2,r20,24
   23f48:	8822923a 	slli	r17,r17,8
   23f4c:	a028923a 	slli	r20,r20,8
   23f50:	8009883a 	mov	r4,r16
   23f54:	88acb03a 	or	r22,r17,r2
   23f58:	dd000015 	stw	r20,0(sp)
   23f5c:	b028d43a 	srli	r20,r22,16
   23f60:	d8c00215 	stw	r3,8(sp)
   23f64:	b4bfffcc 	andi	r18,r22,65535
   23f68:	a00b883a 	mov	r5,r20
   23f6c:	0022b740 	call	22b74 <__udivsi3>
   23f70:	100b883a 	mov	r5,r2
   23f74:	9009883a 	mov	r4,r18
   23f78:	1023883a 	mov	r17,r2
   23f7c:	0022c300 	call	22c30 <__mulsi3>
   23f80:	8009883a 	mov	r4,r16
   23f84:	a00b883a 	mov	r5,r20
   23f88:	1039883a 	mov	fp,r2
   23f8c:	0022bd80 	call	22bd8 <__umodsi3>
   23f90:	1004943a 	slli	r2,r2,16
   23f94:	b808d43a 	srli	r4,r23,16
   23f98:	d8c00217 	ldw	r3,8(sp)
   23f9c:	2084b03a 	or	r2,r4,r2
   23fa0:	1700062e 	bgeu	r2,fp,23fbc <__divdf3+0x3c0>
   23fa4:	1585883a 	add	r2,r2,r22
   23fa8:	893fffc4 	addi	r4,r17,-1
   23fac:	15811d36 	bltu	r2,r22,24424 <__divdf3+0x828>
   23fb0:	17011c2e 	bgeu	r2,fp,24424 <__divdf3+0x828>
   23fb4:	8c7fff84 	addi	r17,r17,-2
   23fb8:	1585883a 	add	r2,r2,r22
   23fbc:	1739c83a 	sub	fp,r2,fp
   23fc0:	a00b883a 	mov	r5,r20
   23fc4:	e009883a 	mov	r4,fp
   23fc8:	d8c00215 	stw	r3,8(sp)
   23fcc:	0022b740 	call	22b74 <__udivsi3>
   23fd0:	100b883a 	mov	r5,r2
   23fd4:	9009883a 	mov	r4,r18
   23fd8:	1021883a 	mov	r16,r2
   23fdc:	0022c300 	call	22c30 <__mulsi3>
   23fe0:	a00b883a 	mov	r5,r20
   23fe4:	e009883a 	mov	r4,fp
   23fe8:	d8800415 	stw	r2,16(sp)
   23fec:	0022bd80 	call	22bd8 <__umodsi3>
   23ff0:	1004943a 	slli	r2,r2,16
   23ff4:	da000417 	ldw	r8,16(sp)
   23ff8:	bdffffcc 	andi	r23,r23,65535
   23ffc:	b884b03a 	or	r2,r23,r2
   24000:	d8c00217 	ldw	r3,8(sp)
   24004:	1200062e 	bgeu	r2,r8,24020 <__divdf3+0x424>
   24008:	1585883a 	add	r2,r2,r22
   2400c:	813fffc4 	addi	r4,r16,-1
   24010:	15810236 	bltu	r2,r22,2441c <__divdf3+0x820>
   24014:	1201012e 	bgeu	r2,r8,2441c <__divdf3+0x820>
   24018:	843fff84 	addi	r16,r16,-2
   2401c:	1585883a 	add	r2,r2,r22
   24020:	8822943a 	slli	r17,r17,16
   24024:	d9800017 	ldw	r6,0(sp)
   24028:	1211c83a 	sub	r8,r2,r8
   2402c:	8c22b03a 	or	r17,r17,r16
   24030:	373fffcc 	andi	fp,r6,65535
   24034:	8abfffcc 	andi	r10,r17,65535
   24038:	8820d43a 	srli	r16,r17,16
   2403c:	5009883a 	mov	r4,r10
   24040:	e00b883a 	mov	r5,fp
   24044:	302ed43a 	srli	r23,r6,16
   24048:	d8c00215 	stw	r3,8(sp)
   2404c:	da000415 	stw	r8,16(sp)
   24050:	da800115 	stw	r10,4(sp)
   24054:	0022c300 	call	22c30 <__mulsi3>
   24058:	800b883a 	mov	r5,r16
   2405c:	e009883a 	mov	r4,fp
   24060:	d8800515 	stw	r2,20(sp)
   24064:	0022c300 	call	22c30 <__mulsi3>
   24068:	8009883a 	mov	r4,r16
   2406c:	b80b883a 	mov	r5,r23
   24070:	d8800315 	stw	r2,12(sp)
   24074:	0022c300 	call	22c30 <__mulsi3>
   24078:	da800117 	ldw	r10,4(sp)
   2407c:	b80b883a 	mov	r5,r23
   24080:	1021883a 	mov	r16,r2
   24084:	5009883a 	mov	r4,r10
   24088:	0022c300 	call	22c30 <__mulsi3>
   2408c:	d9c00517 	ldw	r7,20(sp)
   24090:	da400317 	ldw	r9,12(sp)
   24094:	d8c00217 	ldw	r3,8(sp)
   24098:	3808d43a 	srli	r4,r7,16
   2409c:	1245883a 	add	r2,r2,r9
   240a0:	da000417 	ldw	r8,16(sp)
   240a4:	2085883a 	add	r2,r4,r2
   240a8:	1240022e 	bgeu	r2,r9,240b4 <__divdf3+0x4b8>
   240ac:	01000074 	movhi	r4,1
   240b0:	8121883a 	add	r16,r16,r4
   240b4:	1008d43a 	srli	r4,r2,16
   240b8:	1004943a 	slli	r2,r2,16
   240bc:	39ffffcc 	andi	r7,r7,65535
   240c0:	2409883a 	add	r4,r4,r16
   240c4:	11c5883a 	add	r2,r2,r7
   240c8:	4100bb36 	bltu	r8,r4,243b8 <__divdf3+0x7bc>
   240cc:	4100d726 	beq	r8,r4,2442c <__divdf3+0x830>
   240d0:	4109c83a 	sub	r4,r8,r4
   240d4:	a8a1c83a 	sub	r16,r21,r2
   240d8:	ac2b803a 	cmpltu	r21,r21,r16
   240dc:	256bc83a 	sub	r21,r4,r21
   240e0:	b540d926 	beq	r22,r21,24448 <__divdf3+0x84c>
   240e4:	a00b883a 	mov	r5,r20
   240e8:	a809883a 	mov	r4,r21
   240ec:	d8c00215 	stw	r3,8(sp)
   240f0:	0022b740 	call	22b74 <__udivsi3>
   240f4:	100b883a 	mov	r5,r2
   240f8:	9009883a 	mov	r4,r18
   240fc:	d8800515 	stw	r2,20(sp)
   24100:	0022c300 	call	22c30 <__mulsi3>
   24104:	a809883a 	mov	r4,r21
   24108:	a00b883a 	mov	r5,r20
   2410c:	d8800415 	stw	r2,16(sp)
   24110:	0022bd80 	call	22bd8 <__umodsi3>
   24114:	1004943a 	slli	r2,r2,16
   24118:	8008d43a 	srli	r4,r16,16
   2411c:	da000417 	ldw	r8,16(sp)
   24120:	d8c00217 	ldw	r3,8(sp)
   24124:	2084b03a 	or	r2,r4,r2
   24128:	d9c00517 	ldw	r7,20(sp)
   2412c:	1200062e 	bgeu	r2,r8,24148 <__divdf3+0x54c>
   24130:	1585883a 	add	r2,r2,r22
   24134:	393fffc4 	addi	r4,r7,-1
   24138:	1580c536 	bltu	r2,r22,24450 <__divdf3+0x854>
   2413c:	1200c42e 	bgeu	r2,r8,24450 <__divdf3+0x854>
   24140:	39ffff84 	addi	r7,r7,-2
   24144:	1585883a 	add	r2,r2,r22
   24148:	122bc83a 	sub	r21,r2,r8
   2414c:	a00b883a 	mov	r5,r20
   24150:	a809883a 	mov	r4,r21
   24154:	d8c00215 	stw	r3,8(sp)
   24158:	d9c00515 	stw	r7,20(sp)
   2415c:	0022b740 	call	22b74 <__udivsi3>
   24160:	9009883a 	mov	r4,r18
   24164:	100b883a 	mov	r5,r2
   24168:	d8800415 	stw	r2,16(sp)
   2416c:	0022c300 	call	22c30 <__mulsi3>
   24170:	a809883a 	mov	r4,r21
   24174:	a00b883a 	mov	r5,r20
   24178:	1025883a 	mov	r18,r2
   2417c:	0022bd80 	call	22bd8 <__umodsi3>
   24180:	1004943a 	slli	r2,r2,16
   24184:	813fffcc 	andi	r4,r16,65535
   24188:	d8c00217 	ldw	r3,8(sp)
   2418c:	20a0b03a 	or	r16,r4,r2
   24190:	d9c00517 	ldw	r7,20(sp)
   24194:	da000417 	ldw	r8,16(sp)
   24198:	8480062e 	bgeu	r16,r18,241b4 <__divdf3+0x5b8>
   2419c:	85a1883a 	add	r16,r16,r22
   241a0:	40bfffc4 	addi	r2,r8,-1
   241a4:	8580ac36 	bltu	r16,r22,24458 <__divdf3+0x85c>
   241a8:	8480ab2e 	bgeu	r16,r18,24458 <__divdf3+0x85c>
   241ac:	423fff84 	addi	r8,r8,-2
   241b0:	85a1883a 	add	r16,r16,r22
   241b4:	3804943a 	slli	r2,r7,16
   241b8:	84a1c83a 	sub	r16,r16,r18
   241bc:	e009883a 	mov	r4,fp
   241c0:	1228b03a 	or	r20,r2,r8
   241c4:	a1ffffcc 	andi	r7,r20,65535
   241c8:	a024d43a 	srli	r18,r20,16
   241cc:	380b883a 	mov	r5,r7
   241d0:	d8c00215 	stw	r3,8(sp)
   241d4:	d9c00515 	stw	r7,20(sp)
   241d8:	0022c300 	call	22c30 <__mulsi3>
   241dc:	900b883a 	mov	r5,r18
   241e0:	e009883a 	mov	r4,fp
   241e4:	102b883a 	mov	r21,r2
   241e8:	0022c300 	call	22c30 <__mulsi3>
   241ec:	900b883a 	mov	r5,r18
   241f0:	b809883a 	mov	r4,r23
   241f4:	1039883a 	mov	fp,r2
   241f8:	0022c300 	call	22c30 <__mulsi3>
   241fc:	d9c00517 	ldw	r7,20(sp)
   24200:	b80b883a 	mov	r5,r23
   24204:	1025883a 	mov	r18,r2
   24208:	3809883a 	mov	r4,r7
   2420c:	0022c300 	call	22c30 <__mulsi3>
   24210:	a808d43a 	srli	r4,r21,16
   24214:	1705883a 	add	r2,r2,fp
   24218:	d8c00217 	ldw	r3,8(sp)
   2421c:	2085883a 	add	r2,r4,r2
   24220:	1700022e 	bgeu	r2,fp,2422c <__divdf3+0x630>
   24224:	01000074 	movhi	r4,1
   24228:	9125883a 	add	r18,r18,r4
   2422c:	1008d43a 	srli	r4,r2,16
   24230:	1004943a 	slli	r2,r2,16
   24234:	ad7fffcc 	andi	r21,r21,65535
   24238:	2489883a 	add	r4,r4,r18
   2423c:	1545883a 	add	r2,r2,r21
   24240:	81003836 	bltu	r16,r4,24324 <__divdf3+0x728>
   24244:	81003626 	beq	r16,r4,24320 <__divdf3+0x724>
   24248:	a5000054 	ori	r20,r20,1
   2424c:	1880ffc4 	addi	r2,r3,1023
   24250:	00bf2e0e 	bge	zero,r2,23f0c <__alt_data_end+0xfffe3f0c>
   24254:	a10001cc 	andi	r4,r20,7
   24258:	20000726 	beq	r4,zero,24278 <__divdf3+0x67c>
   2425c:	a10003cc 	andi	r4,r20,15
   24260:	01400104 	movi	r5,4
   24264:	21400426 	beq	r4,r5,24278 <__divdf3+0x67c>
   24268:	a149883a 	add	r4,r20,r5
   2426c:	2529803a 	cmpltu	r20,r4,r20
   24270:	8d23883a 	add	r17,r17,r20
   24274:	2029883a 	mov	r20,r4
   24278:	8900402c 	andhi	r4,r17,256
   2427c:	20000426 	beq	r4,zero,24290 <__divdf3+0x694>
   24280:	18810004 	addi	r2,r3,1024
   24284:	00ffc034 	movhi	r3,65280
   24288:	18ffffc4 	addi	r3,r3,-1
   2428c:	88e2703a 	and	r17,r17,r3
   24290:	00c1ff84 	movi	r3,2046
   24294:	18beb416 	blt	r3,r2,23d68 <__alt_data_end+0xfffe3d68>
   24298:	a028d0fa 	srli	r20,r20,3
   2429c:	882a977a 	slli	r21,r17,29
   242a0:	8820927a 	slli	r16,r17,9
   242a4:	1081ffcc 	andi	r2,r2,2047
   242a8:	ad2ab03a 	or	r21,r21,r20
   242ac:	8020d33a 	srli	r16,r16,12
   242b0:	9900004c 	andi	r4,r19,1
   242b4:	003eb006 	br	23d78 <__alt_data_end+0xfffe3d78>
   242b8:	8080022c 	andhi	r2,r16,8
   242bc:	10001226 	beq	r2,zero,24308 <__divdf3+0x70c>
   242c0:	8880022c 	andhi	r2,r17,8
   242c4:	1000101e 	bne	r2,zero,24308 <__divdf3+0x70c>
   242c8:	00800434 	movhi	r2,16
   242cc:	8c000234 	orhi	r16,r17,8
   242d0:	10bfffc4 	addi	r2,r2,-1
   242d4:	b809883a 	mov	r4,r23
   242d8:	80a0703a 	and	r16,r16,r2
   242dc:	a02b883a 	mov	r21,r20
   242e0:	003f0806 	br	23f04 <__alt_data_end+0xfffe3f04>
   242e4:	008000c4 	movi	r2,3
   242e8:	3880b126 	beq	r7,r2,245b0 <__divdf3+0x9b4>
   242ec:	00800044 	movi	r2,1
   242f0:	38805b1e 	bne	r7,r2,24460 <__divdf3+0x864>
   242f4:	e009883a 	mov	r4,fp
   242f8:	0005883a 	mov	r2,zero
   242fc:	0021883a 	mov	r16,zero
   24300:	002b883a 	mov	r21,zero
   24304:	003e9c06 	br	23d78 <__alt_data_end+0xfffe3d78>
   24308:	00800434 	movhi	r2,16
   2430c:	84000234 	orhi	r16,r16,8
   24310:	10bfffc4 	addi	r2,r2,-1
   24314:	b009883a 	mov	r4,r22
   24318:	80a0703a 	and	r16,r16,r2
   2431c:	003ef906 	br	23f04 <__alt_data_end+0xfffe3f04>
   24320:	103fca26 	beq	r2,zero,2424c <__alt_data_end+0xfffe424c>
   24324:	b421883a 	add	r16,r22,r16
   24328:	a17fffc4 	addi	r5,r20,-1
   2432c:	8580422e 	bgeu	r16,r22,24438 <__divdf3+0x83c>
   24330:	2829883a 	mov	r20,r5
   24334:	813fc41e 	bne	r16,r4,24248 <__alt_data_end+0xfffe4248>
   24338:	d9800017 	ldw	r6,0(sp)
   2433c:	30bfc21e 	bne	r6,r2,24248 <__alt_data_end+0xfffe4248>
   24340:	003fc206 	br	2424c <__alt_data_end+0xfffe424c>
   24344:	143ff604 	addi	r16,r2,-40
   24348:	8c20983a 	sll	r16,r17,r16
   2434c:	002b883a 	mov	r21,zero
   24350:	003eb406 	br	23e24 <__alt_data_end+0xfffe3e24>
   24354:	d9800215 	stw	r6,8(sp)
   24358:	d9c00515 	stw	r7,20(sp)
   2435c:	da000415 	stw	r8,16(sp)
   24360:	00259ec0 	call	259ec <__clzsi2>
   24364:	10800804 	addi	r2,r2,32
   24368:	da000417 	ldw	r8,16(sp)
   2436c:	d9c00517 	ldw	r7,20(sp)
   24370:	d9800217 	ldw	r6,8(sp)
   24374:	003ea106 	br	23dfc <__alt_data_end+0xfffe3dfc>
   24378:	147ff604 	addi	r17,r2,-40
   2437c:	3462983a 	sll	r17,r6,r17
   24380:	0029883a 	mov	r20,zero
   24384:	003ec906 	br	23eac <__alt_data_end+0xfffe3eac>
   24388:	3009883a 	mov	r4,r6
   2438c:	d9400115 	stw	r5,4(sp)
   24390:	d9800215 	stw	r6,8(sp)
   24394:	da000415 	stw	r8,16(sp)
   24398:	da400315 	stw	r9,12(sp)
   2439c:	00259ec0 	call	259ec <__clzsi2>
   243a0:	10800804 	addi	r2,r2,32
   243a4:	da400317 	ldw	r9,12(sp)
   243a8:	da000417 	ldw	r8,16(sp)
   243ac:	d9800217 	ldw	r6,8(sp)
   243b0:	d9400117 	ldw	r5,4(sp)
   243b4:	003eb306 	br	23e84 <__alt_data_end+0xfffe3e84>
   243b8:	d9800017 	ldw	r6,0(sp)
   243bc:	a9ab883a 	add	r21,r21,r6
   243c0:	a98b803a 	cmpltu	r5,r21,r6
   243c4:	2d8b883a 	add	r5,r5,r22
   243c8:	2a11883a 	add	r8,r5,r8
   243cc:	897fffc4 	addi	r5,r17,-1
   243d0:	b2000c2e 	bgeu	r22,r8,24404 <__divdf3+0x808>
   243d4:	41003f36 	bltu	r8,r4,244d4 <__divdf3+0x8d8>
   243d8:	22006c26 	beq	r4,r8,2458c <__divdf3+0x990>
   243dc:	4109c83a 	sub	r4,r8,r4
   243e0:	2823883a 	mov	r17,r5
   243e4:	003f3b06 	br	240d4 <__alt_data_end+0xfffe40d4>
   243e8:	ad3ed336 	bltu	r21,r20,23f38 <__alt_data_end+0xfffe3f38>
   243ec:	a804d07a 	srli	r2,r21,1
   243f0:	802e97fa 	slli	r23,r16,31
   243f4:	a82a97fa 	slli	r21,r21,31
   243f8:	8020d07a 	srli	r16,r16,1
   243fc:	b8aeb03a 	or	r23,r23,r2
   24400:	003ed006 	br	23f44 <__alt_data_end+0xfffe3f44>
   24404:	b23ff51e 	bne	r22,r8,243dc <__alt_data_end+0xfffe43dc>
   24408:	d9800017 	ldw	r6,0(sp)
   2440c:	a9bff12e 	bgeu	r21,r6,243d4 <__alt_data_end+0xfffe43d4>
   24410:	b109c83a 	sub	r4,r22,r4
   24414:	2823883a 	mov	r17,r5
   24418:	003f2e06 	br	240d4 <__alt_data_end+0xfffe40d4>
   2441c:	2021883a 	mov	r16,r4
   24420:	003eff06 	br	24020 <__alt_data_end+0xfffe4020>
   24424:	2023883a 	mov	r17,r4
   24428:	003ee406 	br	23fbc <__alt_data_end+0xfffe3fbc>
   2442c:	a8bfe236 	bltu	r21,r2,243b8 <__alt_data_end+0xfffe43b8>
   24430:	0009883a 	mov	r4,zero
   24434:	003f2706 	br	240d4 <__alt_data_end+0xfffe40d4>
   24438:	81002d36 	bltu	r16,r4,244f0 <__divdf3+0x8f4>
   2443c:	24005626 	beq	r4,r16,24598 <__divdf3+0x99c>
   24440:	2829883a 	mov	r20,r5
   24444:	003f8006 	br	24248 <__alt_data_end+0xfffe4248>
   24448:	053fffc4 	movi	r20,-1
   2444c:	003f7f06 	br	2424c <__alt_data_end+0xfffe424c>
   24450:	200f883a 	mov	r7,r4
   24454:	003f3c06 	br	24148 <__alt_data_end+0xfffe4148>
   24458:	1011883a 	mov	r8,r2
   2445c:	003f5506 	br	241b4 <__alt_data_end+0xfffe41b4>
   24460:	e027883a 	mov	r19,fp
   24464:	003f7906 	br	2424c <__alt_data_end+0xfffe424c>
   24468:	010007c4 	movi	r4,31
   2446c:	20c02816 	blt	r4,r3,24510 <__divdf3+0x914>
   24470:	00800804 	movi	r2,32
   24474:	10c5c83a 	sub	r2,r2,r3
   24478:	888a983a 	sll	r5,r17,r2
   2447c:	a0c8d83a 	srl	r4,r20,r3
   24480:	a084983a 	sll	r2,r20,r2
   24484:	88e2d83a 	srl	r17,r17,r3
   24488:	2906b03a 	or	r3,r5,r4
   2448c:	1004c03a 	cmpne	r2,r2,zero
   24490:	1886b03a 	or	r3,r3,r2
   24494:	188001cc 	andi	r2,r3,7
   24498:	10000726 	beq	r2,zero,244b8 <__divdf3+0x8bc>
   2449c:	188003cc 	andi	r2,r3,15
   244a0:	01000104 	movi	r4,4
   244a4:	11000426 	beq	r2,r4,244b8 <__divdf3+0x8bc>
   244a8:	1805883a 	mov	r2,r3
   244ac:	10c00104 	addi	r3,r2,4
   244b0:	1885803a 	cmpltu	r2,r3,r2
   244b4:	88a3883a 	add	r17,r17,r2
   244b8:	8880202c 	andhi	r2,r17,128
   244bc:	10002926 	beq	r2,zero,24564 <__divdf3+0x968>
   244c0:	9900004c 	andi	r4,r19,1
   244c4:	00800044 	movi	r2,1
   244c8:	0021883a 	mov	r16,zero
   244cc:	002b883a 	mov	r21,zero
   244d0:	003e2906 	br	23d78 <__alt_data_end+0xfffe3d78>
   244d4:	d9800017 	ldw	r6,0(sp)
   244d8:	8c7fff84 	addi	r17,r17,-2
   244dc:	a9ab883a 	add	r21,r21,r6
   244e0:	a98b803a 	cmpltu	r5,r21,r6
   244e4:	2d8b883a 	add	r5,r5,r22
   244e8:	2a11883a 	add	r8,r5,r8
   244ec:	003ef806 	br	240d0 <__alt_data_end+0xfffe40d0>
   244f0:	d9800017 	ldw	r6,0(sp)
   244f4:	318f883a 	add	r7,r6,r6
   244f8:	398b803a 	cmpltu	r5,r7,r6
   244fc:	2d8d883a 	add	r6,r5,r22
   24500:	81a1883a 	add	r16,r16,r6
   24504:	a17fff84 	addi	r5,r20,-2
   24508:	d9c00015 	stw	r7,0(sp)
   2450c:	003f8806 	br	24330 <__alt_data_end+0xfffe4330>
   24510:	013ff844 	movi	r4,-31
   24514:	2085c83a 	sub	r2,r4,r2
   24518:	8888d83a 	srl	r4,r17,r2
   2451c:	00800804 	movi	r2,32
   24520:	18802126 	beq	r3,r2,245a8 <__divdf3+0x9ac>
   24524:	04001004 	movi	r16,64
   24528:	80c7c83a 	sub	r3,r16,r3
   2452c:	88e0983a 	sll	r16,r17,r3
   24530:	8504b03a 	or	r2,r16,r20
   24534:	1004c03a 	cmpne	r2,r2,zero
   24538:	2084b03a 	or	r2,r4,r2
   2453c:	144001cc 	andi	r17,r2,7
   24540:	88000d1e 	bne	r17,zero,24578 <__divdf3+0x97c>
   24544:	0021883a 	mov	r16,zero
   24548:	102ad0fa 	srli	r21,r2,3
   2454c:	9900004c 	andi	r4,r19,1
   24550:	0005883a 	mov	r2,zero
   24554:	ac6ab03a 	or	r21,r21,r17
   24558:	003e0706 	br	23d78 <__alt_data_end+0xfffe3d78>
   2455c:	1007883a 	mov	r3,r2
   24560:	0023883a 	mov	r17,zero
   24564:	8820927a 	slli	r16,r17,9
   24568:	1805883a 	mov	r2,r3
   2456c:	8822977a 	slli	r17,r17,29
   24570:	8020d33a 	srli	r16,r16,12
   24574:	003ff406 	br	24548 <__alt_data_end+0xfffe4548>
   24578:	10c003cc 	andi	r3,r2,15
   2457c:	01000104 	movi	r4,4
   24580:	193ff626 	beq	r3,r4,2455c <__alt_data_end+0xfffe455c>
   24584:	0023883a 	mov	r17,zero
   24588:	003fc806 	br	244ac <__alt_data_end+0xfffe44ac>
   2458c:	a8bfd136 	bltu	r21,r2,244d4 <__alt_data_end+0xfffe44d4>
   24590:	2823883a 	mov	r17,r5
   24594:	003fa606 	br	24430 <__alt_data_end+0xfffe4430>
   24598:	d9800017 	ldw	r6,0(sp)
   2459c:	30bfd436 	bltu	r6,r2,244f0 <__alt_data_end+0xfffe44f0>
   245a0:	2829883a 	mov	r20,r5
   245a4:	003f6406 	br	24338 <__alt_data_end+0xfffe4338>
   245a8:	0021883a 	mov	r16,zero
   245ac:	003fe006 	br	24530 <__alt_data_end+0xfffe4530>
   245b0:	00800434 	movhi	r2,16
   245b4:	8c000234 	orhi	r16,r17,8
   245b8:	10bfffc4 	addi	r2,r2,-1
   245bc:	e009883a 	mov	r4,fp
   245c0:	80a0703a 	and	r16,r16,r2
   245c4:	a02b883a 	mov	r21,r20
   245c8:	003e4e06 	br	23f04 <__alt_data_end+0xfffe3f04>

000245cc <__muldf3>:
   245cc:	deffee04 	addi	sp,sp,-72
   245d0:	dd000c15 	stw	r20,48(sp)
   245d4:	2828d53a 	srli	r20,r5,20
   245d8:	ddc00f15 	stw	r23,60(sp)
   245dc:	282ed7fa 	srli	r23,r5,31
   245e0:	dc000815 	stw	r16,32(sp)
   245e4:	04000434 	movhi	r16,16
   245e8:	dcc00b15 	stw	r19,44(sp)
   245ec:	843fffc4 	addi	r16,r16,-1
   245f0:	dfc01115 	stw	ra,68(sp)
   245f4:	df001015 	stw	fp,64(sp)
   245f8:	dd800e15 	stw	r22,56(sp)
   245fc:	dd400d15 	stw	r21,52(sp)
   24600:	dc800a15 	stw	r18,40(sp)
   24604:	dc400915 	stw	r17,36(sp)
   24608:	a501ffcc 	andi	r20,r20,2047
   2460c:	2c20703a 	and	r16,r5,r16
   24610:	b827883a 	mov	r19,r23
   24614:	ba403fcc 	andi	r9,r23,255
   24618:	a0006026 	beq	r20,zero,2479c <__muldf3+0x1d0>
   2461c:	0081ffc4 	movi	r2,2047
   24620:	202d883a 	mov	r22,r4
   24624:	a0803626 	beq	r20,r2,24700 <__muldf3+0x134>
   24628:	84000434 	orhi	r16,r16,16
   2462c:	200ad77a 	srli	r5,r4,29
   24630:	800490fa 	slli	r2,r16,3
   24634:	202c90fa 	slli	r22,r4,3
   24638:	a53f0044 	addi	r20,r20,-1023
   2463c:	28a0b03a 	or	r16,r5,r2
   24640:	002b883a 	mov	r21,zero
   24644:	000b883a 	mov	r5,zero
   24648:	3804d53a 	srli	r2,r7,20
   2464c:	3838d7fa 	srli	fp,r7,31
   24650:	04400434 	movhi	r17,16
   24654:	8c7fffc4 	addi	r17,r17,-1
   24658:	1081ffcc 	andi	r2,r2,2047
   2465c:	3025883a 	mov	r18,r6
   24660:	3c62703a 	and	r17,r7,r17
   24664:	e2803fcc 	andi	r10,fp,255
   24668:	10006d26 	beq	r2,zero,24820 <__muldf3+0x254>
   2466c:	00c1ffc4 	movi	r3,2047
   24670:	10c06526 	beq	r2,r3,24808 <__muldf3+0x23c>
   24674:	8c400434 	orhi	r17,r17,16
   24678:	300ed77a 	srli	r7,r6,29
   2467c:	880690fa 	slli	r3,r17,3
   24680:	302490fa 	slli	r18,r6,3
   24684:	10bf0044 	addi	r2,r2,-1023
   24688:	38e2b03a 	or	r17,r7,r3
   2468c:	000f883a 	mov	r7,zero
   24690:	a087883a 	add	r3,r20,r2
   24694:	010003c4 	movi	r4,15
   24698:	3d44b03a 	or	r2,r7,r21
   2469c:	e5ccf03a 	xor	r6,fp,r23
   246a0:	1a000044 	addi	r8,r3,1
   246a4:	20809b36 	bltu	r4,r2,24914 <__muldf3+0x348>
   246a8:	100490ba 	slli	r2,r2,2
   246ac:	010000b4 	movhi	r4,2
   246b0:	2111b004 	addi	r4,r4,18112
   246b4:	1105883a 	add	r2,r2,r4
   246b8:	10800017 	ldw	r2,0(r2)
   246bc:	1000683a 	jmp	r2
   246c0:	00024914 	movui	zero,2340
   246c4:	00024720 	cmpeqi	zero,zero,2332
   246c8:	00024720 	cmpeqi	zero,zero,2332
   246cc:	0002471c 	xori	zero,zero,2332
   246d0:	000248f0 	cmpltui	zero,zero,2339
   246d4:	000248f0 	cmpltui	zero,zero,2339
   246d8:	000248d8 	cmpnei	zero,zero,2339
   246dc:	0002471c 	xori	zero,zero,2332
   246e0:	000248f0 	cmpltui	zero,zero,2339
   246e4:	000248d8 	cmpnei	zero,zero,2339
   246e8:	000248f0 	cmpltui	zero,zero,2339
   246ec:	0002471c 	xori	zero,zero,2332
   246f0:	00024900 	call	2490 <__alt_mem_onchip_memory2_0-0x1db70>
   246f4:	00024900 	call	2490 <__alt_mem_onchip_memory2_0-0x1db70>
   246f8:	00024900 	call	2490 <__alt_mem_onchip_memory2_0-0x1db70>
   246fc:	00024c60 	cmpeqi	zero,zero,2353
   24700:	2404b03a 	or	r2,r4,r16
   24704:	1000711e 	bne	r2,zero,248cc <__muldf3+0x300>
   24708:	05400204 	movi	r21,8
   2470c:	0021883a 	mov	r16,zero
   24710:	002d883a 	mov	r22,zero
   24714:	01400084 	movi	r5,2
   24718:	003fcb06 	br	24648 <__alt_data_end+0xfffe4648>
   2471c:	500d883a 	mov	r6,r10
   24720:	00800084 	movi	r2,2
   24724:	38805926 	beq	r7,r2,2488c <__muldf3+0x2c0>
   24728:	008000c4 	movi	r2,3
   2472c:	3881bb26 	beq	r7,r2,24e1c <__muldf3+0x850>
   24730:	00800044 	movi	r2,1
   24734:	3881961e 	bne	r7,r2,24d90 <__muldf3+0x7c4>
   24738:	3027883a 	mov	r19,r6
   2473c:	0005883a 	mov	r2,zero
   24740:	0021883a 	mov	r16,zero
   24744:	002d883a 	mov	r22,zero
   24748:	1004953a 	slli	r2,r2,20
   2474c:	98c03fcc 	andi	r3,r19,255
   24750:	04400434 	movhi	r17,16
   24754:	8c7fffc4 	addi	r17,r17,-1
   24758:	180697fa 	slli	r3,r3,31
   2475c:	8460703a 	and	r16,r16,r17
   24760:	80a0b03a 	or	r16,r16,r2
   24764:	80c6b03a 	or	r3,r16,r3
   24768:	b005883a 	mov	r2,r22
   2476c:	dfc01117 	ldw	ra,68(sp)
   24770:	df001017 	ldw	fp,64(sp)
   24774:	ddc00f17 	ldw	r23,60(sp)
   24778:	dd800e17 	ldw	r22,56(sp)
   2477c:	dd400d17 	ldw	r21,52(sp)
   24780:	dd000c17 	ldw	r20,48(sp)
   24784:	dcc00b17 	ldw	r19,44(sp)
   24788:	dc800a17 	ldw	r18,40(sp)
   2478c:	dc400917 	ldw	r17,36(sp)
   24790:	dc000817 	ldw	r16,32(sp)
   24794:	dec01204 	addi	sp,sp,72
   24798:	f800283a 	ret
   2479c:	2404b03a 	or	r2,r4,r16
   247a0:	202b883a 	mov	r21,r4
   247a4:	10004426 	beq	r2,zero,248b8 <__muldf3+0x2ec>
   247a8:	80015126 	beq	r16,zero,24cf0 <__muldf3+0x724>
   247ac:	8009883a 	mov	r4,r16
   247b0:	d9800715 	stw	r6,28(sp)
   247b4:	d9c00215 	stw	r7,8(sp)
   247b8:	da400415 	stw	r9,16(sp)
   247bc:	00259ec0 	call	259ec <__clzsi2>
   247c0:	d9800717 	ldw	r6,28(sp)
   247c4:	d9c00217 	ldw	r7,8(sp)
   247c8:	da400417 	ldw	r9,16(sp)
   247cc:	113ffd44 	addi	r4,r2,-11
   247d0:	00c00704 	movi	r3,28
   247d4:	19014216 	blt	r3,r4,24ce0 <__muldf3+0x714>
   247d8:	00c00744 	movi	r3,29
   247dc:	15bffe04 	addi	r22,r2,-8
   247e0:	1907c83a 	sub	r3,r3,r4
   247e4:	85a0983a 	sll	r16,r16,r22
   247e8:	a8c6d83a 	srl	r3,r21,r3
   247ec:	adac983a 	sll	r22,r21,r22
   247f0:	1c20b03a 	or	r16,r3,r16
   247f4:	1080fcc4 	addi	r2,r2,1011
   247f8:	00a9c83a 	sub	r20,zero,r2
   247fc:	002b883a 	mov	r21,zero
   24800:	000b883a 	mov	r5,zero
   24804:	003f9006 	br	24648 <__alt_data_end+0xfffe4648>
   24808:	3446b03a 	or	r3,r6,r17
   2480c:	1800281e 	bne	r3,zero,248b0 <__muldf3+0x2e4>
   24810:	0023883a 	mov	r17,zero
   24814:	0025883a 	mov	r18,zero
   24818:	01c00084 	movi	r7,2
   2481c:	003f9c06 	br	24690 <__alt_data_end+0xfffe4690>
   24820:	3446b03a 	or	r3,r6,r17
   24824:	18001e26 	beq	r3,zero,248a0 <__muldf3+0x2d4>
   24828:	88012126 	beq	r17,zero,24cb0 <__muldf3+0x6e4>
   2482c:	8809883a 	mov	r4,r17
   24830:	d9400215 	stw	r5,8(sp)
   24834:	d9800715 	stw	r6,28(sp)
   24838:	da400415 	stw	r9,16(sp)
   2483c:	da800315 	stw	r10,12(sp)
   24840:	00259ec0 	call	259ec <__clzsi2>
   24844:	d9400217 	ldw	r5,8(sp)
   24848:	d9800717 	ldw	r6,28(sp)
   2484c:	da400417 	ldw	r9,16(sp)
   24850:	da800317 	ldw	r10,12(sp)
   24854:	113ffd44 	addi	r4,r2,-11
   24858:	00c00704 	movi	r3,28
   2485c:	19011016 	blt	r3,r4,24ca0 <__muldf3+0x6d4>
   24860:	00c00744 	movi	r3,29
   24864:	14bffe04 	addi	r18,r2,-8
   24868:	1907c83a 	sub	r3,r3,r4
   2486c:	8ca2983a 	sll	r17,r17,r18
   24870:	30c6d83a 	srl	r3,r6,r3
   24874:	34a4983a 	sll	r18,r6,r18
   24878:	1c62b03a 	or	r17,r3,r17
   2487c:	1080fcc4 	addi	r2,r2,1011
   24880:	0085c83a 	sub	r2,zero,r2
   24884:	000f883a 	mov	r7,zero
   24888:	003f8106 	br	24690 <__alt_data_end+0xfffe4690>
   2488c:	3027883a 	mov	r19,r6
   24890:	0081ffc4 	movi	r2,2047
   24894:	0021883a 	mov	r16,zero
   24898:	002d883a 	mov	r22,zero
   2489c:	003faa06 	br	24748 <__alt_data_end+0xfffe4748>
   248a0:	0023883a 	mov	r17,zero
   248a4:	0025883a 	mov	r18,zero
   248a8:	01c00044 	movi	r7,1
   248ac:	003f7806 	br	24690 <__alt_data_end+0xfffe4690>
   248b0:	01c000c4 	movi	r7,3
   248b4:	003f7606 	br	24690 <__alt_data_end+0xfffe4690>
   248b8:	05400104 	movi	r21,4
   248bc:	0021883a 	mov	r16,zero
   248c0:	002d883a 	mov	r22,zero
   248c4:	01400044 	movi	r5,1
   248c8:	003f5f06 	br	24648 <__alt_data_end+0xfffe4648>
   248cc:	05400304 	movi	r21,12
   248d0:	014000c4 	movi	r5,3
   248d4:	003f5c06 	br	24648 <__alt_data_end+0xfffe4648>
   248d8:	04000434 	movhi	r16,16
   248dc:	0027883a 	mov	r19,zero
   248e0:	843fffc4 	addi	r16,r16,-1
   248e4:	05bfffc4 	movi	r22,-1
   248e8:	0081ffc4 	movi	r2,2047
   248ec:	003f9606 	br	24748 <__alt_data_end+0xfffe4748>
   248f0:	8023883a 	mov	r17,r16
   248f4:	b025883a 	mov	r18,r22
   248f8:	280f883a 	mov	r7,r5
   248fc:	003f8806 	br	24720 <__alt_data_end+0xfffe4720>
   24900:	8023883a 	mov	r17,r16
   24904:	b025883a 	mov	r18,r22
   24908:	480d883a 	mov	r6,r9
   2490c:	280f883a 	mov	r7,r5
   24910:	003f8306 	br	24720 <__alt_data_end+0xfffe4720>
   24914:	b026d43a 	srli	r19,r22,16
   24918:	902ed43a 	srli	r23,r18,16
   2491c:	b5bfffcc 	andi	r22,r22,65535
   24920:	94bfffcc 	andi	r18,r18,65535
   24924:	b00b883a 	mov	r5,r22
   24928:	9009883a 	mov	r4,r18
   2492c:	d8c00515 	stw	r3,20(sp)
   24930:	d9800715 	stw	r6,28(sp)
   24934:	da000615 	stw	r8,24(sp)
   24938:	0022c300 	call	22c30 <__mulsi3>
   2493c:	980b883a 	mov	r5,r19
   24940:	9009883a 	mov	r4,r18
   24944:	1029883a 	mov	r20,r2
   24948:	0022c300 	call	22c30 <__mulsi3>
   2494c:	b80b883a 	mov	r5,r23
   24950:	9809883a 	mov	r4,r19
   24954:	102b883a 	mov	r21,r2
   24958:	0022c300 	call	22c30 <__mulsi3>
   2495c:	b809883a 	mov	r4,r23
   24960:	b00b883a 	mov	r5,r22
   24964:	1039883a 	mov	fp,r2
   24968:	0022c300 	call	22c30 <__mulsi3>
   2496c:	a008d43a 	srli	r4,r20,16
   24970:	1545883a 	add	r2,r2,r21
   24974:	d8c00517 	ldw	r3,20(sp)
   24978:	2085883a 	add	r2,r4,r2
   2497c:	d9800717 	ldw	r6,28(sp)
   24980:	da000617 	ldw	r8,24(sp)
   24984:	1540022e 	bgeu	r2,r21,24990 <__muldf3+0x3c4>
   24988:	01000074 	movhi	r4,1
   2498c:	e139883a 	add	fp,fp,r4
   24990:	100e943a 	slli	r7,r2,16
   24994:	1004d43a 	srli	r2,r2,16
   24998:	882ad43a 	srli	r21,r17,16
   2499c:	a53fffcc 	andi	r20,r20,65535
   249a0:	8c7fffcc 	andi	r17,r17,65535
   249a4:	3d29883a 	add	r20,r7,r20
   249a8:	b00b883a 	mov	r5,r22
   249ac:	8809883a 	mov	r4,r17
   249b0:	d8c00515 	stw	r3,20(sp)
   249b4:	d9800715 	stw	r6,28(sp)
   249b8:	da000615 	stw	r8,24(sp)
   249bc:	dd000115 	stw	r20,4(sp)
   249c0:	d8800015 	stw	r2,0(sp)
   249c4:	0022c300 	call	22c30 <__mulsi3>
   249c8:	980b883a 	mov	r5,r19
   249cc:	8809883a 	mov	r4,r17
   249d0:	d8800215 	stw	r2,8(sp)
   249d4:	0022c300 	call	22c30 <__mulsi3>
   249d8:	9809883a 	mov	r4,r19
   249dc:	a80b883a 	mov	r5,r21
   249e0:	1029883a 	mov	r20,r2
   249e4:	0022c300 	call	22c30 <__mulsi3>
   249e8:	b00b883a 	mov	r5,r22
   249ec:	a809883a 	mov	r4,r21
   249f0:	d8800415 	stw	r2,16(sp)
   249f4:	0022c300 	call	22c30 <__mulsi3>
   249f8:	d9c00217 	ldw	r7,8(sp)
   249fc:	1505883a 	add	r2,r2,r20
   24a00:	d8c00517 	ldw	r3,20(sp)
   24a04:	3826d43a 	srli	r19,r7,16
   24a08:	d9800717 	ldw	r6,28(sp)
   24a0c:	da000617 	ldw	r8,24(sp)
   24a10:	9885883a 	add	r2,r19,r2
   24a14:	da400417 	ldw	r9,16(sp)
   24a18:	1500022e 	bgeu	r2,r20,24a24 <__muldf3+0x458>
   24a1c:	01000074 	movhi	r4,1
   24a20:	4913883a 	add	r9,r9,r4
   24a24:	1028d43a 	srli	r20,r2,16
   24a28:	1004943a 	slli	r2,r2,16
   24a2c:	802cd43a 	srli	r22,r16,16
   24a30:	843fffcc 	andi	r16,r16,65535
   24a34:	3cffffcc 	andi	r19,r7,65535
   24a38:	9009883a 	mov	r4,r18
   24a3c:	800b883a 	mov	r5,r16
   24a40:	a269883a 	add	r20,r20,r9
   24a44:	d8c00515 	stw	r3,20(sp)
   24a48:	d9800715 	stw	r6,28(sp)
   24a4c:	da000615 	stw	r8,24(sp)
   24a50:	14e7883a 	add	r19,r2,r19
   24a54:	0022c300 	call	22c30 <__mulsi3>
   24a58:	9009883a 	mov	r4,r18
   24a5c:	b00b883a 	mov	r5,r22
   24a60:	d8800315 	stw	r2,12(sp)
   24a64:	0022c300 	call	22c30 <__mulsi3>
   24a68:	b809883a 	mov	r4,r23
   24a6c:	b00b883a 	mov	r5,r22
   24a70:	d8800215 	stw	r2,8(sp)
   24a74:	0022c300 	call	22c30 <__mulsi3>
   24a78:	b80b883a 	mov	r5,r23
   24a7c:	8009883a 	mov	r4,r16
   24a80:	d8800415 	stw	r2,16(sp)
   24a84:	0022c300 	call	22c30 <__mulsi3>
   24a88:	da800317 	ldw	r10,12(sp)
   24a8c:	d9c00217 	ldw	r7,8(sp)
   24a90:	d9000017 	ldw	r4,0(sp)
   24a94:	502ed43a 	srli	r23,r10,16
   24a98:	11c5883a 	add	r2,r2,r7
   24a9c:	24e5883a 	add	r18,r4,r19
   24aa0:	b885883a 	add	r2,r23,r2
   24aa4:	d8c00517 	ldw	r3,20(sp)
   24aa8:	d9800717 	ldw	r6,28(sp)
   24aac:	da000617 	ldw	r8,24(sp)
   24ab0:	da400417 	ldw	r9,16(sp)
   24ab4:	11c0022e 	bgeu	r2,r7,24ac0 <__muldf3+0x4f4>
   24ab8:	01000074 	movhi	r4,1
   24abc:	4913883a 	add	r9,r9,r4
   24ac0:	100ed43a 	srli	r7,r2,16
   24ac4:	1004943a 	slli	r2,r2,16
   24ac8:	55ffffcc 	andi	r23,r10,65535
   24acc:	3a53883a 	add	r9,r7,r9
   24ad0:	8809883a 	mov	r4,r17
   24ad4:	800b883a 	mov	r5,r16
   24ad8:	d8c00515 	stw	r3,20(sp)
   24adc:	d9800715 	stw	r6,28(sp)
   24ae0:	da000615 	stw	r8,24(sp)
   24ae4:	da400415 	stw	r9,16(sp)
   24ae8:	15ef883a 	add	r23,r2,r23
   24aec:	0022c300 	call	22c30 <__mulsi3>
   24af0:	8809883a 	mov	r4,r17
   24af4:	b00b883a 	mov	r5,r22
   24af8:	d8800215 	stw	r2,8(sp)
   24afc:	0022c300 	call	22c30 <__mulsi3>
   24b00:	b00b883a 	mov	r5,r22
   24b04:	a809883a 	mov	r4,r21
   24b08:	d8800315 	stw	r2,12(sp)
   24b0c:	0022c300 	call	22c30 <__mulsi3>
   24b10:	8009883a 	mov	r4,r16
   24b14:	a80b883a 	mov	r5,r21
   24b18:	1023883a 	mov	r17,r2
   24b1c:	0022c300 	call	22c30 <__mulsi3>
   24b20:	d9c00217 	ldw	r7,8(sp)
   24b24:	da800317 	ldw	r10,12(sp)
   24b28:	d8c00517 	ldw	r3,20(sp)
   24b2c:	3808d43a 	srli	r4,r7,16
   24b30:	1285883a 	add	r2,r2,r10
   24b34:	d9800717 	ldw	r6,28(sp)
   24b38:	2085883a 	add	r2,r4,r2
   24b3c:	da000617 	ldw	r8,24(sp)
   24b40:	da400417 	ldw	r9,16(sp)
   24b44:	1280022e 	bgeu	r2,r10,24b50 <__muldf3+0x584>
   24b48:	01000074 	movhi	r4,1
   24b4c:	8923883a 	add	r17,r17,r4
   24b50:	1008943a 	slli	r4,r2,16
   24b54:	39ffffcc 	andi	r7,r7,65535
   24b58:	e4b9883a 	add	fp,fp,r18
   24b5c:	21cf883a 	add	r7,r4,r7
   24b60:	e4e7803a 	cmpltu	r19,fp,r19
   24b64:	3d0f883a 	add	r7,r7,r20
   24b68:	bf39883a 	add	fp,r23,fp
   24b6c:	99c9883a 	add	r4,r19,r7
   24b70:	e5ef803a 	cmpltu	r23,fp,r23
   24b74:	490b883a 	add	r5,r9,r4
   24b78:	1004d43a 	srli	r2,r2,16
   24b7c:	b965883a 	add	r18,r23,r5
   24b80:	24c9803a 	cmpltu	r4,r4,r19
   24b84:	3d29803a 	cmpltu	r20,r7,r20
   24b88:	a128b03a 	or	r20,r20,r4
   24b8c:	95ef803a 	cmpltu	r23,r18,r23
   24b90:	2a53803a 	cmpltu	r9,r5,r9
   24b94:	a0a9883a 	add	r20,r20,r2
   24b98:	4deeb03a 	or	r23,r9,r23
   24b9c:	a5ef883a 	add	r23,r20,r23
   24ba0:	bc63883a 	add	r17,r23,r17
   24ba4:	e004927a 	slli	r2,fp,9
   24ba8:	d9000117 	ldw	r4,4(sp)
   24bac:	882e927a 	slli	r23,r17,9
   24bb0:	9022d5fa 	srli	r17,r18,23
   24bb4:	e038d5fa 	srli	fp,fp,23
   24bb8:	1104b03a 	or	r2,r2,r4
   24bbc:	9024927a 	slli	r18,r18,9
   24bc0:	1004c03a 	cmpne	r2,r2,zero
   24bc4:	bc62b03a 	or	r17,r23,r17
   24bc8:	1738b03a 	or	fp,r2,fp
   24bcc:	8880402c 	andhi	r2,r17,256
   24bd0:	e4a4b03a 	or	r18,fp,r18
   24bd4:	10000726 	beq	r2,zero,24bf4 <__muldf3+0x628>
   24bd8:	9006d07a 	srli	r3,r18,1
   24bdc:	880497fa 	slli	r2,r17,31
   24be0:	9480004c 	andi	r18,r18,1
   24be4:	8822d07a 	srli	r17,r17,1
   24be8:	1ca4b03a 	or	r18,r3,r18
   24bec:	14a4b03a 	or	r18,r2,r18
   24bf0:	4007883a 	mov	r3,r8
   24bf4:	1880ffc4 	addi	r2,r3,1023
   24bf8:	0080460e 	bge	zero,r2,24d14 <__muldf3+0x748>
   24bfc:	910001cc 	andi	r4,r18,7
   24c00:	20000726 	beq	r4,zero,24c20 <__muldf3+0x654>
   24c04:	910003cc 	andi	r4,r18,15
   24c08:	01400104 	movi	r5,4
   24c0c:	21400426 	beq	r4,r5,24c20 <__muldf3+0x654>
   24c10:	9149883a 	add	r4,r18,r5
   24c14:	24a5803a 	cmpltu	r18,r4,r18
   24c18:	8ca3883a 	add	r17,r17,r18
   24c1c:	2025883a 	mov	r18,r4
   24c20:	8900402c 	andhi	r4,r17,256
   24c24:	20000426 	beq	r4,zero,24c38 <__muldf3+0x66c>
   24c28:	18810004 	addi	r2,r3,1024
   24c2c:	00ffc034 	movhi	r3,65280
   24c30:	18ffffc4 	addi	r3,r3,-1
   24c34:	88e2703a 	and	r17,r17,r3
   24c38:	00c1ff84 	movi	r3,2046
   24c3c:	18bf1316 	blt	r3,r2,2488c <__alt_data_end+0xfffe488c>
   24c40:	882c977a 	slli	r22,r17,29
   24c44:	9024d0fa 	srli	r18,r18,3
   24c48:	8822927a 	slli	r17,r17,9
   24c4c:	1081ffcc 	andi	r2,r2,2047
   24c50:	b4acb03a 	or	r22,r22,r18
   24c54:	8820d33a 	srli	r16,r17,12
   24c58:	3027883a 	mov	r19,r6
   24c5c:	003eba06 	br	24748 <__alt_data_end+0xfffe4748>
   24c60:	8080022c 	andhi	r2,r16,8
   24c64:	10000926 	beq	r2,zero,24c8c <__muldf3+0x6c0>
   24c68:	8880022c 	andhi	r2,r17,8
   24c6c:	1000071e 	bne	r2,zero,24c8c <__muldf3+0x6c0>
   24c70:	00800434 	movhi	r2,16
   24c74:	8c000234 	orhi	r16,r17,8
   24c78:	10bfffc4 	addi	r2,r2,-1
   24c7c:	e027883a 	mov	r19,fp
   24c80:	80a0703a 	and	r16,r16,r2
   24c84:	902d883a 	mov	r22,r18
   24c88:	003f1706 	br	248e8 <__alt_data_end+0xfffe48e8>
   24c8c:	00800434 	movhi	r2,16
   24c90:	84000234 	orhi	r16,r16,8
   24c94:	10bfffc4 	addi	r2,r2,-1
   24c98:	80a0703a 	and	r16,r16,r2
   24c9c:	003f1206 	br	248e8 <__alt_data_end+0xfffe48e8>
   24ca0:	147ff604 	addi	r17,r2,-40
   24ca4:	3462983a 	sll	r17,r6,r17
   24ca8:	0025883a 	mov	r18,zero
   24cac:	003ef306 	br	2487c <__alt_data_end+0xfffe487c>
   24cb0:	3009883a 	mov	r4,r6
   24cb4:	d9400215 	stw	r5,8(sp)
   24cb8:	d9800715 	stw	r6,28(sp)
   24cbc:	da400415 	stw	r9,16(sp)
   24cc0:	da800315 	stw	r10,12(sp)
   24cc4:	00259ec0 	call	259ec <__clzsi2>
   24cc8:	10800804 	addi	r2,r2,32
   24ccc:	da800317 	ldw	r10,12(sp)
   24cd0:	da400417 	ldw	r9,16(sp)
   24cd4:	d9800717 	ldw	r6,28(sp)
   24cd8:	d9400217 	ldw	r5,8(sp)
   24cdc:	003edd06 	br	24854 <__alt_data_end+0xfffe4854>
   24ce0:	143ff604 	addi	r16,r2,-40
   24ce4:	ac20983a 	sll	r16,r21,r16
   24ce8:	002d883a 	mov	r22,zero
   24cec:	003ec106 	br	247f4 <__alt_data_end+0xfffe47f4>
   24cf0:	d9800715 	stw	r6,28(sp)
   24cf4:	d9c00215 	stw	r7,8(sp)
   24cf8:	da400415 	stw	r9,16(sp)
   24cfc:	00259ec0 	call	259ec <__clzsi2>
   24d00:	10800804 	addi	r2,r2,32
   24d04:	da400417 	ldw	r9,16(sp)
   24d08:	d9c00217 	ldw	r7,8(sp)
   24d0c:	d9800717 	ldw	r6,28(sp)
   24d10:	003eae06 	br	247cc <__alt_data_end+0xfffe47cc>
   24d14:	00c00044 	movi	r3,1
   24d18:	1887c83a 	sub	r3,r3,r2
   24d1c:	01000e04 	movi	r4,56
   24d20:	20fe8516 	blt	r4,r3,24738 <__alt_data_end+0xfffe4738>
   24d24:	010007c4 	movi	r4,31
   24d28:	20c01b16 	blt	r4,r3,24d98 <__muldf3+0x7cc>
   24d2c:	00800804 	movi	r2,32
   24d30:	10c5c83a 	sub	r2,r2,r3
   24d34:	888a983a 	sll	r5,r17,r2
   24d38:	90c8d83a 	srl	r4,r18,r3
   24d3c:	9084983a 	sll	r2,r18,r2
   24d40:	88e2d83a 	srl	r17,r17,r3
   24d44:	2906b03a 	or	r3,r5,r4
   24d48:	1004c03a 	cmpne	r2,r2,zero
   24d4c:	1886b03a 	or	r3,r3,r2
   24d50:	188001cc 	andi	r2,r3,7
   24d54:	10000726 	beq	r2,zero,24d74 <__muldf3+0x7a8>
   24d58:	188003cc 	andi	r2,r3,15
   24d5c:	01000104 	movi	r4,4
   24d60:	11000426 	beq	r2,r4,24d74 <__muldf3+0x7a8>
   24d64:	1805883a 	mov	r2,r3
   24d68:	10c00104 	addi	r3,r2,4
   24d6c:	1885803a 	cmpltu	r2,r3,r2
   24d70:	88a3883a 	add	r17,r17,r2
   24d74:	8880202c 	andhi	r2,r17,128
   24d78:	10001c26 	beq	r2,zero,24dec <__muldf3+0x820>
   24d7c:	3027883a 	mov	r19,r6
   24d80:	00800044 	movi	r2,1
   24d84:	0021883a 	mov	r16,zero
   24d88:	002d883a 	mov	r22,zero
   24d8c:	003e6e06 	br	24748 <__alt_data_end+0xfffe4748>
   24d90:	4007883a 	mov	r3,r8
   24d94:	003f9706 	br	24bf4 <__alt_data_end+0xfffe4bf4>
   24d98:	017ff844 	movi	r5,-31
   24d9c:	2885c83a 	sub	r2,r5,r2
   24da0:	888ad83a 	srl	r5,r17,r2
   24da4:	00800804 	movi	r2,32
   24da8:	18801a26 	beq	r3,r2,24e14 <__muldf3+0x848>
   24dac:	01001004 	movi	r4,64
   24db0:	20c7c83a 	sub	r3,r4,r3
   24db4:	88e2983a 	sll	r17,r17,r3
   24db8:	8ca4b03a 	or	r18,r17,r18
   24dbc:	9004c03a 	cmpne	r2,r18,zero
   24dc0:	2884b03a 	or	r2,r5,r2
   24dc4:	144001cc 	andi	r17,r2,7
   24dc8:	88000d1e 	bne	r17,zero,24e00 <__muldf3+0x834>
   24dcc:	0021883a 	mov	r16,zero
   24dd0:	102cd0fa 	srli	r22,r2,3
   24dd4:	3027883a 	mov	r19,r6
   24dd8:	0005883a 	mov	r2,zero
   24ddc:	b46cb03a 	or	r22,r22,r17
   24de0:	003e5906 	br	24748 <__alt_data_end+0xfffe4748>
   24de4:	1007883a 	mov	r3,r2
   24de8:	0023883a 	mov	r17,zero
   24dec:	8820927a 	slli	r16,r17,9
   24df0:	1805883a 	mov	r2,r3
   24df4:	8822977a 	slli	r17,r17,29
   24df8:	8020d33a 	srli	r16,r16,12
   24dfc:	003ff406 	br	24dd0 <__alt_data_end+0xfffe4dd0>
   24e00:	10c003cc 	andi	r3,r2,15
   24e04:	01000104 	movi	r4,4
   24e08:	193ff626 	beq	r3,r4,24de4 <__alt_data_end+0xfffe4de4>
   24e0c:	0023883a 	mov	r17,zero
   24e10:	003fd506 	br	24d68 <__alt_data_end+0xfffe4d68>
   24e14:	0023883a 	mov	r17,zero
   24e18:	003fe706 	br	24db8 <__alt_data_end+0xfffe4db8>
   24e1c:	00800434 	movhi	r2,16
   24e20:	8c000234 	orhi	r16,r17,8
   24e24:	10bfffc4 	addi	r2,r2,-1
   24e28:	3027883a 	mov	r19,r6
   24e2c:	80a0703a 	and	r16,r16,r2
   24e30:	902d883a 	mov	r22,r18
   24e34:	003eac06 	br	248e8 <__alt_data_end+0xfffe48e8>

00024e38 <__subdf3>:
   24e38:	02000434 	movhi	r8,16
   24e3c:	423fffc4 	addi	r8,r8,-1
   24e40:	defffb04 	addi	sp,sp,-20
   24e44:	2a14703a 	and	r10,r5,r8
   24e48:	3812d53a 	srli	r9,r7,20
   24e4c:	3a10703a 	and	r8,r7,r8
   24e50:	2006d77a 	srli	r3,r4,29
   24e54:	3004d77a 	srli	r2,r6,29
   24e58:	dc000015 	stw	r16,0(sp)
   24e5c:	501490fa 	slli	r10,r10,3
   24e60:	2820d53a 	srli	r16,r5,20
   24e64:	401090fa 	slli	r8,r8,3
   24e68:	dc800215 	stw	r18,8(sp)
   24e6c:	dc400115 	stw	r17,4(sp)
   24e70:	dfc00415 	stw	ra,16(sp)
   24e74:	202290fa 	slli	r17,r4,3
   24e78:	dcc00315 	stw	r19,12(sp)
   24e7c:	4a41ffcc 	andi	r9,r9,2047
   24e80:	0101ffc4 	movi	r4,2047
   24e84:	2824d7fa 	srli	r18,r5,31
   24e88:	8401ffcc 	andi	r16,r16,2047
   24e8c:	50c6b03a 	or	r3,r10,r3
   24e90:	380ed7fa 	srli	r7,r7,31
   24e94:	408ab03a 	or	r5,r8,r2
   24e98:	300c90fa 	slli	r6,r6,3
   24e9c:	49009626 	beq	r9,r4,250f8 <__subdf3+0x2c0>
   24ea0:	39c0005c 	xori	r7,r7,1
   24ea4:	8245c83a 	sub	r2,r16,r9
   24ea8:	3c807426 	beq	r7,r18,2507c <__subdf3+0x244>
   24eac:	0080af0e 	bge	zero,r2,2516c <__subdf3+0x334>
   24eb0:	48002a1e 	bne	r9,zero,24f5c <__subdf3+0x124>
   24eb4:	2988b03a 	or	r4,r5,r6
   24eb8:	20009a1e 	bne	r4,zero,25124 <__subdf3+0x2ec>
   24ebc:	888001cc 	andi	r2,r17,7
   24ec0:	10000726 	beq	r2,zero,24ee0 <__subdf3+0xa8>
   24ec4:	888003cc 	andi	r2,r17,15
   24ec8:	01000104 	movi	r4,4
   24ecc:	11000426 	beq	r2,r4,24ee0 <__subdf3+0xa8>
   24ed0:	890b883a 	add	r5,r17,r4
   24ed4:	2c63803a 	cmpltu	r17,r5,r17
   24ed8:	1c47883a 	add	r3,r3,r17
   24edc:	2823883a 	mov	r17,r5
   24ee0:	1880202c 	andhi	r2,r3,128
   24ee4:	10005926 	beq	r2,zero,2504c <__subdf3+0x214>
   24ee8:	84000044 	addi	r16,r16,1
   24eec:	0081ffc4 	movi	r2,2047
   24ef0:	8080be26 	beq	r16,r2,251ec <__subdf3+0x3b4>
   24ef4:	017fe034 	movhi	r5,65408
   24ef8:	297fffc4 	addi	r5,r5,-1
   24efc:	1946703a 	and	r3,r3,r5
   24f00:	1804977a 	slli	r2,r3,29
   24f04:	1806927a 	slli	r3,r3,9
   24f08:	8822d0fa 	srli	r17,r17,3
   24f0c:	8401ffcc 	andi	r16,r16,2047
   24f10:	180ad33a 	srli	r5,r3,12
   24f14:	9100004c 	andi	r4,r18,1
   24f18:	1444b03a 	or	r2,r2,r17
   24f1c:	80c1ffcc 	andi	r3,r16,2047
   24f20:	1820953a 	slli	r16,r3,20
   24f24:	20c03fcc 	andi	r3,r4,255
   24f28:	180897fa 	slli	r4,r3,31
   24f2c:	00c00434 	movhi	r3,16
   24f30:	18ffffc4 	addi	r3,r3,-1
   24f34:	28c6703a 	and	r3,r5,r3
   24f38:	1c06b03a 	or	r3,r3,r16
   24f3c:	1906b03a 	or	r3,r3,r4
   24f40:	dfc00417 	ldw	ra,16(sp)
   24f44:	dcc00317 	ldw	r19,12(sp)
   24f48:	dc800217 	ldw	r18,8(sp)
   24f4c:	dc400117 	ldw	r17,4(sp)
   24f50:	dc000017 	ldw	r16,0(sp)
   24f54:	dec00504 	addi	sp,sp,20
   24f58:	f800283a 	ret
   24f5c:	0101ffc4 	movi	r4,2047
   24f60:	813fd626 	beq	r16,r4,24ebc <__alt_data_end+0xfffe4ebc>
   24f64:	29402034 	orhi	r5,r5,128
   24f68:	01000e04 	movi	r4,56
   24f6c:	2080a316 	blt	r4,r2,251fc <__subdf3+0x3c4>
   24f70:	010007c4 	movi	r4,31
   24f74:	2080c616 	blt	r4,r2,25290 <__subdf3+0x458>
   24f78:	01000804 	movi	r4,32
   24f7c:	2089c83a 	sub	r4,r4,r2
   24f80:	2910983a 	sll	r8,r5,r4
   24f84:	308ed83a 	srl	r7,r6,r2
   24f88:	3108983a 	sll	r4,r6,r4
   24f8c:	2884d83a 	srl	r2,r5,r2
   24f90:	41ccb03a 	or	r6,r8,r7
   24f94:	2008c03a 	cmpne	r4,r4,zero
   24f98:	310cb03a 	or	r6,r6,r4
   24f9c:	898dc83a 	sub	r6,r17,r6
   24fa0:	89a3803a 	cmpltu	r17,r17,r6
   24fa4:	1887c83a 	sub	r3,r3,r2
   24fa8:	1c47c83a 	sub	r3,r3,r17
   24fac:	3023883a 	mov	r17,r6
   24fb0:	1880202c 	andhi	r2,r3,128
   24fb4:	10002326 	beq	r2,zero,25044 <__subdf3+0x20c>
   24fb8:	04c02034 	movhi	r19,128
   24fbc:	9cffffc4 	addi	r19,r19,-1
   24fc0:	1ce6703a 	and	r19,r3,r19
   24fc4:	98007a26 	beq	r19,zero,251b0 <__subdf3+0x378>
   24fc8:	9809883a 	mov	r4,r19
   24fcc:	00259ec0 	call	259ec <__clzsi2>
   24fd0:	113ffe04 	addi	r4,r2,-8
   24fd4:	00c007c4 	movi	r3,31
   24fd8:	19007b16 	blt	r3,r4,251c8 <__subdf3+0x390>
   24fdc:	00800804 	movi	r2,32
   24fe0:	1105c83a 	sub	r2,r2,r4
   24fe4:	8884d83a 	srl	r2,r17,r2
   24fe8:	9906983a 	sll	r3,r19,r4
   24fec:	8922983a 	sll	r17,r17,r4
   24ff0:	10c4b03a 	or	r2,r2,r3
   24ff4:	24007816 	blt	r4,r16,251d8 <__subdf3+0x3a0>
   24ff8:	2421c83a 	sub	r16,r4,r16
   24ffc:	80c00044 	addi	r3,r16,1
   25000:	010007c4 	movi	r4,31
   25004:	20c09516 	blt	r4,r3,2525c <__subdf3+0x424>
   25008:	01400804 	movi	r5,32
   2500c:	28cbc83a 	sub	r5,r5,r3
   25010:	88c8d83a 	srl	r4,r17,r3
   25014:	8962983a 	sll	r17,r17,r5
   25018:	114a983a 	sll	r5,r2,r5
   2501c:	10c6d83a 	srl	r3,r2,r3
   25020:	8804c03a 	cmpne	r2,r17,zero
   25024:	290ab03a 	or	r5,r5,r4
   25028:	28a2b03a 	or	r17,r5,r2
   2502c:	0021883a 	mov	r16,zero
   25030:	003fa206 	br	24ebc <__alt_data_end+0xfffe4ebc>
   25034:	2090b03a 	or	r8,r4,r2
   25038:	40018e26 	beq	r8,zero,25674 <__subdf3+0x83c>
   2503c:	1007883a 	mov	r3,r2
   25040:	2023883a 	mov	r17,r4
   25044:	888001cc 	andi	r2,r17,7
   25048:	103f9e1e 	bne	r2,zero,24ec4 <__alt_data_end+0xfffe4ec4>
   2504c:	1804977a 	slli	r2,r3,29
   25050:	8822d0fa 	srli	r17,r17,3
   25054:	1810d0fa 	srli	r8,r3,3
   25058:	9100004c 	andi	r4,r18,1
   2505c:	1444b03a 	or	r2,r2,r17
   25060:	00c1ffc4 	movi	r3,2047
   25064:	80c02826 	beq	r16,r3,25108 <__subdf3+0x2d0>
   25068:	01400434 	movhi	r5,16
   2506c:	297fffc4 	addi	r5,r5,-1
   25070:	80e0703a 	and	r16,r16,r3
   25074:	414a703a 	and	r5,r8,r5
   25078:	003fa806 	br	24f1c <__alt_data_end+0xfffe4f1c>
   2507c:	0080630e 	bge	zero,r2,2520c <__subdf3+0x3d4>
   25080:	48003026 	beq	r9,zero,25144 <__subdf3+0x30c>
   25084:	0101ffc4 	movi	r4,2047
   25088:	813f8c26 	beq	r16,r4,24ebc <__alt_data_end+0xfffe4ebc>
   2508c:	29402034 	orhi	r5,r5,128
   25090:	01000e04 	movi	r4,56
   25094:	2080a90e 	bge	r4,r2,2533c <__subdf3+0x504>
   25098:	298cb03a 	or	r6,r5,r6
   2509c:	3012c03a 	cmpne	r9,r6,zero
   250a0:	0005883a 	mov	r2,zero
   250a4:	4c53883a 	add	r9,r9,r17
   250a8:	4c63803a 	cmpltu	r17,r9,r17
   250ac:	10c7883a 	add	r3,r2,r3
   250b0:	88c7883a 	add	r3,r17,r3
   250b4:	4823883a 	mov	r17,r9
   250b8:	1880202c 	andhi	r2,r3,128
   250bc:	1000d026 	beq	r2,zero,25400 <__subdf3+0x5c8>
   250c0:	84000044 	addi	r16,r16,1
   250c4:	0081ffc4 	movi	r2,2047
   250c8:	8080fe26 	beq	r16,r2,254c4 <__subdf3+0x68c>
   250cc:	00bfe034 	movhi	r2,65408
   250d0:	10bfffc4 	addi	r2,r2,-1
   250d4:	1886703a 	and	r3,r3,r2
   250d8:	880ad07a 	srli	r5,r17,1
   250dc:	180497fa 	slli	r2,r3,31
   250e0:	8900004c 	andi	r4,r17,1
   250e4:	2922b03a 	or	r17,r5,r4
   250e8:	1806d07a 	srli	r3,r3,1
   250ec:	1462b03a 	or	r17,r2,r17
   250f0:	3825883a 	mov	r18,r7
   250f4:	003f7106 	br	24ebc <__alt_data_end+0xfffe4ebc>
   250f8:	2984b03a 	or	r2,r5,r6
   250fc:	103f6826 	beq	r2,zero,24ea0 <__alt_data_end+0xfffe4ea0>
   25100:	39c03fcc 	andi	r7,r7,255
   25104:	003f6706 	br	24ea4 <__alt_data_end+0xfffe4ea4>
   25108:	4086b03a 	or	r3,r8,r2
   2510c:	18015226 	beq	r3,zero,25658 <__subdf3+0x820>
   25110:	00c00434 	movhi	r3,16
   25114:	41400234 	orhi	r5,r8,8
   25118:	18ffffc4 	addi	r3,r3,-1
   2511c:	28ca703a 	and	r5,r5,r3
   25120:	003f7e06 	br	24f1c <__alt_data_end+0xfffe4f1c>
   25124:	10bfffc4 	addi	r2,r2,-1
   25128:	1000491e 	bne	r2,zero,25250 <__subdf3+0x418>
   2512c:	898fc83a 	sub	r7,r17,r6
   25130:	89e3803a 	cmpltu	r17,r17,r7
   25134:	1947c83a 	sub	r3,r3,r5
   25138:	1c47c83a 	sub	r3,r3,r17
   2513c:	3823883a 	mov	r17,r7
   25140:	003f9b06 	br	24fb0 <__alt_data_end+0xfffe4fb0>
   25144:	2988b03a 	or	r4,r5,r6
   25148:	203f5c26 	beq	r4,zero,24ebc <__alt_data_end+0xfffe4ebc>
   2514c:	10bfffc4 	addi	r2,r2,-1
   25150:	1000931e 	bne	r2,zero,253a0 <__subdf3+0x568>
   25154:	898d883a 	add	r6,r17,r6
   25158:	3463803a 	cmpltu	r17,r6,r17
   2515c:	1947883a 	add	r3,r3,r5
   25160:	88c7883a 	add	r3,r17,r3
   25164:	3023883a 	mov	r17,r6
   25168:	003fd306 	br	250b8 <__alt_data_end+0xfffe50b8>
   2516c:	1000541e 	bne	r2,zero,252c0 <__subdf3+0x488>
   25170:	80800044 	addi	r2,r16,1
   25174:	1081ffcc 	andi	r2,r2,2047
   25178:	01000044 	movi	r4,1
   2517c:	2080a20e 	bge	r4,r2,25408 <__subdf3+0x5d0>
   25180:	8989c83a 	sub	r4,r17,r6
   25184:	8905803a 	cmpltu	r2,r17,r4
   25188:	1967c83a 	sub	r19,r3,r5
   2518c:	98a7c83a 	sub	r19,r19,r2
   25190:	9880202c 	andhi	r2,r19,128
   25194:	10006326 	beq	r2,zero,25324 <__subdf3+0x4ec>
   25198:	3463c83a 	sub	r17,r6,r17
   2519c:	28c7c83a 	sub	r3,r5,r3
   251a0:	344d803a 	cmpltu	r6,r6,r17
   251a4:	19a7c83a 	sub	r19,r3,r6
   251a8:	3825883a 	mov	r18,r7
   251ac:	983f861e 	bne	r19,zero,24fc8 <__alt_data_end+0xfffe4fc8>
   251b0:	8809883a 	mov	r4,r17
   251b4:	00259ec0 	call	259ec <__clzsi2>
   251b8:	10800804 	addi	r2,r2,32
   251bc:	113ffe04 	addi	r4,r2,-8
   251c0:	00c007c4 	movi	r3,31
   251c4:	193f850e 	bge	r3,r4,24fdc <__alt_data_end+0xfffe4fdc>
   251c8:	10bff604 	addi	r2,r2,-40
   251cc:	8884983a 	sll	r2,r17,r2
   251d0:	0023883a 	mov	r17,zero
   251d4:	243f880e 	bge	r4,r16,24ff8 <__alt_data_end+0xfffe4ff8>
   251d8:	00ffe034 	movhi	r3,65408
   251dc:	18ffffc4 	addi	r3,r3,-1
   251e0:	8121c83a 	sub	r16,r16,r4
   251e4:	10c6703a 	and	r3,r2,r3
   251e8:	003f3406 	br	24ebc <__alt_data_end+0xfffe4ebc>
   251ec:	9100004c 	andi	r4,r18,1
   251f0:	000b883a 	mov	r5,zero
   251f4:	0005883a 	mov	r2,zero
   251f8:	003f4806 	br	24f1c <__alt_data_end+0xfffe4f1c>
   251fc:	298cb03a 	or	r6,r5,r6
   25200:	300cc03a 	cmpne	r6,r6,zero
   25204:	0005883a 	mov	r2,zero
   25208:	003f6406 	br	24f9c <__alt_data_end+0xfffe4f9c>
   2520c:	10009a1e 	bne	r2,zero,25478 <__subdf3+0x640>
   25210:	82400044 	addi	r9,r16,1
   25214:	4881ffcc 	andi	r2,r9,2047
   25218:	02800044 	movi	r10,1
   2521c:	5080670e 	bge	r10,r2,253bc <__subdf3+0x584>
   25220:	0081ffc4 	movi	r2,2047
   25224:	4880af26 	beq	r9,r2,254e4 <__subdf3+0x6ac>
   25228:	898d883a 	add	r6,r17,r6
   2522c:	1945883a 	add	r2,r3,r5
   25230:	3447803a 	cmpltu	r3,r6,r17
   25234:	1887883a 	add	r3,r3,r2
   25238:	182297fa 	slli	r17,r3,31
   2523c:	300cd07a 	srli	r6,r6,1
   25240:	1806d07a 	srli	r3,r3,1
   25244:	4821883a 	mov	r16,r9
   25248:	89a2b03a 	or	r17,r17,r6
   2524c:	003f1b06 	br	24ebc <__alt_data_end+0xfffe4ebc>
   25250:	0101ffc4 	movi	r4,2047
   25254:	813f441e 	bne	r16,r4,24f68 <__alt_data_end+0xfffe4f68>
   25258:	003f1806 	br	24ebc <__alt_data_end+0xfffe4ebc>
   2525c:	843ff844 	addi	r16,r16,-31
   25260:	01400804 	movi	r5,32
   25264:	1408d83a 	srl	r4,r2,r16
   25268:	19405026 	beq	r3,r5,253ac <__subdf3+0x574>
   2526c:	01401004 	movi	r5,64
   25270:	28c7c83a 	sub	r3,r5,r3
   25274:	10c4983a 	sll	r2,r2,r3
   25278:	88a2b03a 	or	r17,r17,r2
   2527c:	8822c03a 	cmpne	r17,r17,zero
   25280:	2462b03a 	or	r17,r4,r17
   25284:	0007883a 	mov	r3,zero
   25288:	0021883a 	mov	r16,zero
   2528c:	003f6d06 	br	25044 <__alt_data_end+0xfffe5044>
   25290:	11fff804 	addi	r7,r2,-32
   25294:	01000804 	movi	r4,32
   25298:	29ced83a 	srl	r7,r5,r7
   2529c:	11004526 	beq	r2,r4,253b4 <__subdf3+0x57c>
   252a0:	01001004 	movi	r4,64
   252a4:	2089c83a 	sub	r4,r4,r2
   252a8:	2904983a 	sll	r2,r5,r4
   252ac:	118cb03a 	or	r6,r2,r6
   252b0:	300cc03a 	cmpne	r6,r6,zero
   252b4:	398cb03a 	or	r6,r7,r6
   252b8:	0005883a 	mov	r2,zero
   252bc:	003f3706 	br	24f9c <__alt_data_end+0xfffe4f9c>
   252c0:	80002a26 	beq	r16,zero,2536c <__subdf3+0x534>
   252c4:	0101ffc4 	movi	r4,2047
   252c8:	49006626 	beq	r9,r4,25464 <__subdf3+0x62c>
   252cc:	0085c83a 	sub	r2,zero,r2
   252d0:	18c02034 	orhi	r3,r3,128
   252d4:	01000e04 	movi	r4,56
   252d8:	20807e16 	blt	r4,r2,254d4 <__subdf3+0x69c>
   252dc:	010007c4 	movi	r4,31
   252e0:	2080e716 	blt	r4,r2,25680 <__subdf3+0x848>
   252e4:	01000804 	movi	r4,32
   252e8:	2089c83a 	sub	r4,r4,r2
   252ec:	1914983a 	sll	r10,r3,r4
   252f0:	8890d83a 	srl	r8,r17,r2
   252f4:	8908983a 	sll	r4,r17,r4
   252f8:	1884d83a 	srl	r2,r3,r2
   252fc:	5222b03a 	or	r17,r10,r8
   25300:	2006c03a 	cmpne	r3,r4,zero
   25304:	88e2b03a 	or	r17,r17,r3
   25308:	3463c83a 	sub	r17,r6,r17
   2530c:	2885c83a 	sub	r2,r5,r2
   25310:	344d803a 	cmpltu	r6,r6,r17
   25314:	1187c83a 	sub	r3,r2,r6
   25318:	4821883a 	mov	r16,r9
   2531c:	3825883a 	mov	r18,r7
   25320:	003f2306 	br	24fb0 <__alt_data_end+0xfffe4fb0>
   25324:	24d0b03a 	or	r8,r4,r19
   25328:	40001b1e 	bne	r8,zero,25398 <__subdf3+0x560>
   2532c:	0005883a 	mov	r2,zero
   25330:	0009883a 	mov	r4,zero
   25334:	0021883a 	mov	r16,zero
   25338:	003f4906 	br	25060 <__alt_data_end+0xfffe5060>
   2533c:	010007c4 	movi	r4,31
   25340:	20803a16 	blt	r4,r2,2542c <__subdf3+0x5f4>
   25344:	01000804 	movi	r4,32
   25348:	2089c83a 	sub	r4,r4,r2
   2534c:	2912983a 	sll	r9,r5,r4
   25350:	3090d83a 	srl	r8,r6,r2
   25354:	3108983a 	sll	r4,r6,r4
   25358:	2884d83a 	srl	r2,r5,r2
   2535c:	4a12b03a 	or	r9,r9,r8
   25360:	2008c03a 	cmpne	r4,r4,zero
   25364:	4912b03a 	or	r9,r9,r4
   25368:	003f4e06 	br	250a4 <__alt_data_end+0xfffe50a4>
   2536c:	1c48b03a 	or	r4,r3,r17
   25370:	20003c26 	beq	r4,zero,25464 <__subdf3+0x62c>
   25374:	0084303a 	nor	r2,zero,r2
   25378:	1000381e 	bne	r2,zero,2545c <__subdf3+0x624>
   2537c:	3463c83a 	sub	r17,r6,r17
   25380:	28c5c83a 	sub	r2,r5,r3
   25384:	344d803a 	cmpltu	r6,r6,r17
   25388:	1187c83a 	sub	r3,r2,r6
   2538c:	4821883a 	mov	r16,r9
   25390:	3825883a 	mov	r18,r7
   25394:	003f0606 	br	24fb0 <__alt_data_end+0xfffe4fb0>
   25398:	2023883a 	mov	r17,r4
   2539c:	003f0906 	br	24fc4 <__alt_data_end+0xfffe4fc4>
   253a0:	0101ffc4 	movi	r4,2047
   253a4:	813f3a1e 	bne	r16,r4,25090 <__alt_data_end+0xfffe5090>
   253a8:	003ec406 	br	24ebc <__alt_data_end+0xfffe4ebc>
   253ac:	0005883a 	mov	r2,zero
   253b0:	003fb106 	br	25278 <__alt_data_end+0xfffe5278>
   253b4:	0005883a 	mov	r2,zero
   253b8:	003fbc06 	br	252ac <__alt_data_end+0xfffe52ac>
   253bc:	1c44b03a 	or	r2,r3,r17
   253c0:	80008e1e 	bne	r16,zero,255fc <__subdf3+0x7c4>
   253c4:	1000c826 	beq	r2,zero,256e8 <__subdf3+0x8b0>
   253c8:	2984b03a 	or	r2,r5,r6
   253cc:	103ebb26 	beq	r2,zero,24ebc <__alt_data_end+0xfffe4ebc>
   253d0:	8989883a 	add	r4,r17,r6
   253d4:	1945883a 	add	r2,r3,r5
   253d8:	2447803a 	cmpltu	r3,r4,r17
   253dc:	1887883a 	add	r3,r3,r2
   253e0:	1880202c 	andhi	r2,r3,128
   253e4:	2023883a 	mov	r17,r4
   253e8:	103f1626 	beq	r2,zero,25044 <__alt_data_end+0xfffe5044>
   253ec:	00bfe034 	movhi	r2,65408
   253f0:	10bfffc4 	addi	r2,r2,-1
   253f4:	5021883a 	mov	r16,r10
   253f8:	1886703a 	and	r3,r3,r2
   253fc:	003eaf06 	br	24ebc <__alt_data_end+0xfffe4ebc>
   25400:	3825883a 	mov	r18,r7
   25404:	003f0f06 	br	25044 <__alt_data_end+0xfffe5044>
   25408:	1c44b03a 	or	r2,r3,r17
   2540c:	8000251e 	bne	r16,zero,254a4 <__subdf3+0x66c>
   25410:	1000661e 	bne	r2,zero,255ac <__subdf3+0x774>
   25414:	2990b03a 	or	r8,r5,r6
   25418:	40009626 	beq	r8,zero,25674 <__subdf3+0x83c>
   2541c:	2807883a 	mov	r3,r5
   25420:	3023883a 	mov	r17,r6
   25424:	3825883a 	mov	r18,r7
   25428:	003ea406 	br	24ebc <__alt_data_end+0xfffe4ebc>
   2542c:	127ff804 	addi	r9,r2,-32
   25430:	01000804 	movi	r4,32
   25434:	2a52d83a 	srl	r9,r5,r9
   25438:	11008c26 	beq	r2,r4,2566c <__subdf3+0x834>
   2543c:	01001004 	movi	r4,64
   25440:	2085c83a 	sub	r2,r4,r2
   25444:	2884983a 	sll	r2,r5,r2
   25448:	118cb03a 	or	r6,r2,r6
   2544c:	300cc03a 	cmpne	r6,r6,zero
   25450:	4992b03a 	or	r9,r9,r6
   25454:	0005883a 	mov	r2,zero
   25458:	003f1206 	br	250a4 <__alt_data_end+0xfffe50a4>
   2545c:	0101ffc4 	movi	r4,2047
   25460:	493f9c1e 	bne	r9,r4,252d4 <__alt_data_end+0xfffe52d4>
   25464:	2807883a 	mov	r3,r5
   25468:	3023883a 	mov	r17,r6
   2546c:	4821883a 	mov	r16,r9
   25470:	3825883a 	mov	r18,r7
   25474:	003e9106 	br	24ebc <__alt_data_end+0xfffe4ebc>
   25478:	80001f1e 	bne	r16,zero,254f8 <__subdf3+0x6c0>
   2547c:	1c48b03a 	or	r4,r3,r17
   25480:	20005a26 	beq	r4,zero,255ec <__subdf3+0x7b4>
   25484:	0084303a 	nor	r2,zero,r2
   25488:	1000561e 	bne	r2,zero,255e4 <__subdf3+0x7ac>
   2548c:	89a3883a 	add	r17,r17,r6
   25490:	1945883a 	add	r2,r3,r5
   25494:	898d803a 	cmpltu	r6,r17,r6
   25498:	3087883a 	add	r3,r6,r2
   2549c:	4821883a 	mov	r16,r9
   254a0:	003f0506 	br	250b8 <__alt_data_end+0xfffe50b8>
   254a4:	10002b1e 	bne	r2,zero,25554 <__subdf3+0x71c>
   254a8:	2984b03a 	or	r2,r5,r6
   254ac:	10008026 	beq	r2,zero,256b0 <__subdf3+0x878>
   254b0:	2807883a 	mov	r3,r5
   254b4:	3023883a 	mov	r17,r6
   254b8:	3825883a 	mov	r18,r7
   254bc:	0401ffc4 	movi	r16,2047
   254c0:	003e7e06 	br	24ebc <__alt_data_end+0xfffe4ebc>
   254c4:	3809883a 	mov	r4,r7
   254c8:	0011883a 	mov	r8,zero
   254cc:	0005883a 	mov	r2,zero
   254d0:	003ee306 	br	25060 <__alt_data_end+0xfffe5060>
   254d4:	1c62b03a 	or	r17,r3,r17
   254d8:	8822c03a 	cmpne	r17,r17,zero
   254dc:	0005883a 	mov	r2,zero
   254e0:	003f8906 	br	25308 <__alt_data_end+0xfffe5308>
   254e4:	3809883a 	mov	r4,r7
   254e8:	4821883a 	mov	r16,r9
   254ec:	0011883a 	mov	r8,zero
   254f0:	0005883a 	mov	r2,zero
   254f4:	003eda06 	br	25060 <__alt_data_end+0xfffe5060>
   254f8:	0101ffc4 	movi	r4,2047
   254fc:	49003b26 	beq	r9,r4,255ec <__subdf3+0x7b4>
   25500:	0085c83a 	sub	r2,zero,r2
   25504:	18c02034 	orhi	r3,r3,128
   25508:	01000e04 	movi	r4,56
   2550c:	20806e16 	blt	r4,r2,256c8 <__subdf3+0x890>
   25510:	010007c4 	movi	r4,31
   25514:	20807716 	blt	r4,r2,256f4 <__subdf3+0x8bc>
   25518:	01000804 	movi	r4,32
   2551c:	2089c83a 	sub	r4,r4,r2
   25520:	1914983a 	sll	r10,r3,r4
   25524:	8890d83a 	srl	r8,r17,r2
   25528:	8908983a 	sll	r4,r17,r4
   2552c:	1884d83a 	srl	r2,r3,r2
   25530:	5222b03a 	or	r17,r10,r8
   25534:	2006c03a 	cmpne	r3,r4,zero
   25538:	88e2b03a 	or	r17,r17,r3
   2553c:	89a3883a 	add	r17,r17,r6
   25540:	1145883a 	add	r2,r2,r5
   25544:	898d803a 	cmpltu	r6,r17,r6
   25548:	3087883a 	add	r3,r6,r2
   2554c:	4821883a 	mov	r16,r9
   25550:	003ed906 	br	250b8 <__alt_data_end+0xfffe50b8>
   25554:	2984b03a 	or	r2,r5,r6
   25558:	10004226 	beq	r2,zero,25664 <__subdf3+0x82c>
   2555c:	1808d0fa 	srli	r4,r3,3
   25560:	8822d0fa 	srli	r17,r17,3
   25564:	1806977a 	slli	r3,r3,29
   25568:	2080022c 	andhi	r2,r4,8
   2556c:	1c62b03a 	or	r17,r3,r17
   25570:	10000826 	beq	r2,zero,25594 <__subdf3+0x75c>
   25574:	2812d0fa 	srli	r9,r5,3
   25578:	4880022c 	andhi	r2,r9,8
   2557c:	1000051e 	bne	r2,zero,25594 <__subdf3+0x75c>
   25580:	300cd0fa 	srli	r6,r6,3
   25584:	2804977a 	slli	r2,r5,29
   25588:	4809883a 	mov	r4,r9
   2558c:	3825883a 	mov	r18,r7
   25590:	11a2b03a 	or	r17,r2,r6
   25594:	8806d77a 	srli	r3,r17,29
   25598:	200890fa 	slli	r4,r4,3
   2559c:	882290fa 	slli	r17,r17,3
   255a0:	0401ffc4 	movi	r16,2047
   255a4:	1906b03a 	or	r3,r3,r4
   255a8:	003e4406 	br	24ebc <__alt_data_end+0xfffe4ebc>
   255ac:	2984b03a 	or	r2,r5,r6
   255b0:	103e4226 	beq	r2,zero,24ebc <__alt_data_end+0xfffe4ebc>
   255b4:	8989c83a 	sub	r4,r17,r6
   255b8:	8911803a 	cmpltu	r8,r17,r4
   255bc:	1945c83a 	sub	r2,r3,r5
   255c0:	1205c83a 	sub	r2,r2,r8
   255c4:	1200202c 	andhi	r8,r2,128
   255c8:	403e9a26 	beq	r8,zero,25034 <__alt_data_end+0xfffe5034>
   255cc:	3463c83a 	sub	r17,r6,r17
   255d0:	28c5c83a 	sub	r2,r5,r3
   255d4:	344d803a 	cmpltu	r6,r6,r17
   255d8:	1187c83a 	sub	r3,r2,r6
   255dc:	3825883a 	mov	r18,r7
   255e0:	003e3606 	br	24ebc <__alt_data_end+0xfffe4ebc>
   255e4:	0101ffc4 	movi	r4,2047
   255e8:	493fc71e 	bne	r9,r4,25508 <__alt_data_end+0xfffe5508>
   255ec:	2807883a 	mov	r3,r5
   255f0:	3023883a 	mov	r17,r6
   255f4:	4821883a 	mov	r16,r9
   255f8:	003e3006 	br	24ebc <__alt_data_end+0xfffe4ebc>
   255fc:	10003626 	beq	r2,zero,256d8 <__subdf3+0x8a0>
   25600:	2984b03a 	or	r2,r5,r6
   25604:	10001726 	beq	r2,zero,25664 <__subdf3+0x82c>
   25608:	1808d0fa 	srli	r4,r3,3
   2560c:	8822d0fa 	srli	r17,r17,3
   25610:	1806977a 	slli	r3,r3,29
   25614:	2080022c 	andhi	r2,r4,8
   25618:	1c62b03a 	or	r17,r3,r17
   2561c:	10000726 	beq	r2,zero,2563c <__subdf3+0x804>
   25620:	2812d0fa 	srli	r9,r5,3
   25624:	4880022c 	andhi	r2,r9,8
   25628:	1000041e 	bne	r2,zero,2563c <__subdf3+0x804>
   2562c:	300cd0fa 	srli	r6,r6,3
   25630:	2804977a 	slli	r2,r5,29
   25634:	4809883a 	mov	r4,r9
   25638:	11a2b03a 	or	r17,r2,r6
   2563c:	8806d77a 	srli	r3,r17,29
   25640:	200890fa 	slli	r4,r4,3
   25644:	882290fa 	slli	r17,r17,3
   25648:	3825883a 	mov	r18,r7
   2564c:	1906b03a 	or	r3,r3,r4
   25650:	0401ffc4 	movi	r16,2047
   25654:	003e1906 	br	24ebc <__alt_data_end+0xfffe4ebc>
   25658:	000b883a 	mov	r5,zero
   2565c:	0005883a 	mov	r2,zero
   25660:	003e2e06 	br	24f1c <__alt_data_end+0xfffe4f1c>
   25664:	0401ffc4 	movi	r16,2047
   25668:	003e1406 	br	24ebc <__alt_data_end+0xfffe4ebc>
   2566c:	0005883a 	mov	r2,zero
   25670:	003f7506 	br	25448 <__alt_data_end+0xfffe5448>
   25674:	0005883a 	mov	r2,zero
   25678:	0009883a 	mov	r4,zero
   2567c:	003e7806 	br	25060 <__alt_data_end+0xfffe5060>
   25680:	123ff804 	addi	r8,r2,-32
   25684:	01000804 	movi	r4,32
   25688:	1a10d83a 	srl	r8,r3,r8
   2568c:	11002526 	beq	r2,r4,25724 <__subdf3+0x8ec>
   25690:	01001004 	movi	r4,64
   25694:	2085c83a 	sub	r2,r4,r2
   25698:	1884983a 	sll	r2,r3,r2
   2569c:	1444b03a 	or	r2,r2,r17
   256a0:	1004c03a 	cmpne	r2,r2,zero
   256a4:	40a2b03a 	or	r17,r8,r2
   256a8:	0005883a 	mov	r2,zero
   256ac:	003f1606 	br	25308 <__alt_data_end+0xfffe5308>
   256b0:	02000434 	movhi	r8,16
   256b4:	0009883a 	mov	r4,zero
   256b8:	423fffc4 	addi	r8,r8,-1
   256bc:	00bfffc4 	movi	r2,-1
   256c0:	0401ffc4 	movi	r16,2047
   256c4:	003e6606 	br	25060 <__alt_data_end+0xfffe5060>
   256c8:	1c62b03a 	or	r17,r3,r17
   256cc:	8822c03a 	cmpne	r17,r17,zero
   256d0:	0005883a 	mov	r2,zero
   256d4:	003f9906 	br	2553c <__alt_data_end+0xfffe553c>
   256d8:	2807883a 	mov	r3,r5
   256dc:	3023883a 	mov	r17,r6
   256e0:	0401ffc4 	movi	r16,2047
   256e4:	003df506 	br	24ebc <__alt_data_end+0xfffe4ebc>
   256e8:	2807883a 	mov	r3,r5
   256ec:	3023883a 	mov	r17,r6
   256f0:	003df206 	br	24ebc <__alt_data_end+0xfffe4ebc>
   256f4:	123ff804 	addi	r8,r2,-32
   256f8:	01000804 	movi	r4,32
   256fc:	1a10d83a 	srl	r8,r3,r8
   25700:	11000a26 	beq	r2,r4,2572c <__subdf3+0x8f4>
   25704:	01001004 	movi	r4,64
   25708:	2085c83a 	sub	r2,r4,r2
   2570c:	1884983a 	sll	r2,r3,r2
   25710:	1444b03a 	or	r2,r2,r17
   25714:	1004c03a 	cmpne	r2,r2,zero
   25718:	40a2b03a 	or	r17,r8,r2
   2571c:	0005883a 	mov	r2,zero
   25720:	003f8606 	br	2553c <__alt_data_end+0xfffe553c>
   25724:	0005883a 	mov	r2,zero
   25728:	003fdc06 	br	2569c <__alt_data_end+0xfffe569c>
   2572c:	0005883a 	mov	r2,zero
   25730:	003ff706 	br	25710 <__alt_data_end+0xfffe5710>

00025734 <__extendsfdf2>:
   25734:	200ad5fa 	srli	r5,r4,23
   25738:	defffd04 	addi	sp,sp,-12
   2573c:	dc400115 	stw	r17,4(sp)
   25740:	29403fcc 	andi	r5,r5,255
   25744:	29800044 	addi	r6,r5,1
   25748:	04402034 	movhi	r17,128
   2574c:	dc000015 	stw	r16,0(sp)
   25750:	8c7fffc4 	addi	r17,r17,-1
   25754:	dfc00215 	stw	ra,8(sp)
   25758:	31803fcc 	andi	r6,r6,255
   2575c:	00800044 	movi	r2,1
   25760:	8922703a 	and	r17,r17,r4
   25764:	2020d7fa 	srli	r16,r4,31
   25768:	1180110e 	bge	r2,r6,257b0 <__extendsfdf2+0x7c>
   2576c:	880cd0fa 	srli	r6,r17,3
   25770:	8822977a 	slli	r17,r17,29
   25774:	2940e004 	addi	r5,r5,896
   25778:	2941ffcc 	andi	r5,r5,2047
   2577c:	2804953a 	slli	r2,r5,20
   25780:	01400434 	movhi	r5,16
   25784:	800697fa 	slli	r3,r16,31
   25788:	297fffc4 	addi	r5,r5,-1
   2578c:	314a703a 	and	r5,r6,r5
   25790:	288ab03a 	or	r5,r5,r2
   25794:	28c6b03a 	or	r3,r5,r3
   25798:	8805883a 	mov	r2,r17
   2579c:	dfc00217 	ldw	ra,8(sp)
   257a0:	dc400117 	ldw	r17,4(sp)
   257a4:	dc000017 	ldw	r16,0(sp)
   257a8:	dec00304 	addi	sp,sp,12
   257ac:	f800283a 	ret
   257b0:	2800111e 	bne	r5,zero,257f8 <__extendsfdf2+0xc4>
   257b4:	88001c26 	beq	r17,zero,25828 <__extendsfdf2+0xf4>
   257b8:	8809883a 	mov	r4,r17
   257bc:	00259ec0 	call	259ec <__clzsi2>
   257c0:	00c00284 	movi	r3,10
   257c4:	18801b16 	blt	r3,r2,25834 <__extendsfdf2+0x100>
   257c8:	018002c4 	movi	r6,11
   257cc:	308dc83a 	sub	r6,r6,r2
   257d0:	11000544 	addi	r4,r2,21
   257d4:	8986d83a 	srl	r3,r17,r6
   257d8:	8922983a 	sll	r17,r17,r4
   257dc:	0180e244 	movi	r6,905
   257e0:	01400434 	movhi	r5,16
   257e4:	3085c83a 	sub	r2,r6,r2
   257e8:	297fffc4 	addi	r5,r5,-1
   257ec:	194c703a 	and	r6,r3,r5
   257f0:	1141ffcc 	andi	r5,r2,2047
   257f4:	003fe006 	br	25778 <__alt_data_end+0xfffe5778>
   257f8:	88000826 	beq	r17,zero,2581c <__extendsfdf2+0xe8>
   257fc:	880cd0fa 	srli	r6,r17,3
   25800:	00800434 	movhi	r2,16
   25804:	10bfffc4 	addi	r2,r2,-1
   25808:	31800234 	orhi	r6,r6,8
   2580c:	8822977a 	slli	r17,r17,29
   25810:	308c703a 	and	r6,r6,r2
   25814:	0141ffc4 	movi	r5,2047
   25818:	003fd706 	br	25778 <__alt_data_end+0xfffe5778>
   2581c:	0141ffc4 	movi	r5,2047
   25820:	000d883a 	mov	r6,zero
   25824:	003fd406 	br	25778 <__alt_data_end+0xfffe5778>
   25828:	000b883a 	mov	r5,zero
   2582c:	000d883a 	mov	r6,zero
   25830:	003fd106 	br	25778 <__alt_data_end+0xfffe5778>
   25834:	11bffd44 	addi	r6,r2,-11
   25838:	8986983a 	sll	r3,r17,r6
   2583c:	0023883a 	mov	r17,zero
   25840:	003fe606 	br	257dc <__alt_data_end+0xfffe57dc>

00025844 <__truncdfsf2>:
   25844:	2810d53a 	srli	r8,r5,20
   25848:	01c00434 	movhi	r7,16
   2584c:	39ffffc4 	addi	r7,r7,-1
   25850:	29ce703a 	and	r7,r5,r7
   25854:	4201ffcc 	andi	r8,r8,2047
   25858:	380e90fa 	slli	r7,r7,3
   2585c:	200cd77a 	srli	r6,r4,29
   25860:	42400044 	addi	r9,r8,1
   25864:	4a41ffcc 	andi	r9,r9,2047
   25868:	00c00044 	movi	r3,1
   2586c:	280ad7fa 	srli	r5,r5,31
   25870:	31ceb03a 	or	r7,r6,r7
   25874:	200490fa 	slli	r2,r4,3
   25878:	1a40230e 	bge	r3,r9,25908 <__truncdfsf2+0xc4>
   2587c:	40ff2004 	addi	r3,r8,-896
   25880:	01803f84 	movi	r6,254
   25884:	30c01516 	blt	r6,r3,258dc <__truncdfsf2+0x98>
   25888:	00c0380e 	bge	zero,r3,2596c <__truncdfsf2+0x128>
   2588c:	200c91ba 	slli	r6,r4,6
   25890:	380e90fa 	slli	r7,r7,3
   25894:	1004d77a 	srli	r2,r2,29
   25898:	300cc03a 	cmpne	r6,r6,zero
   2589c:	31ccb03a 	or	r6,r6,r7
   258a0:	308cb03a 	or	r6,r6,r2
   258a4:	308001cc 	andi	r2,r6,7
   258a8:	10000426 	beq	r2,zero,258bc <__truncdfsf2+0x78>
   258ac:	308003cc 	andi	r2,r6,15
   258b0:	01000104 	movi	r4,4
   258b4:	11000126 	beq	r2,r4,258bc <__truncdfsf2+0x78>
   258b8:	31800104 	addi	r6,r6,4
   258bc:	3081002c 	andhi	r2,r6,1024
   258c0:	10001626 	beq	r2,zero,2591c <__truncdfsf2+0xd8>
   258c4:	18c00044 	addi	r3,r3,1
   258c8:	00803fc4 	movi	r2,255
   258cc:	18800326 	beq	r3,r2,258dc <__truncdfsf2+0x98>
   258d0:	300c91ba 	slli	r6,r6,6
   258d4:	300cd27a 	srli	r6,r6,9
   258d8:	00000206 	br	258e4 <__truncdfsf2+0xa0>
   258dc:	00ffffc4 	movi	r3,-1
   258e0:	000d883a 	mov	r6,zero
   258e4:	18c03fcc 	andi	r3,r3,255
   258e8:	180895fa 	slli	r4,r3,23
   258ec:	00c02034 	movhi	r3,128
   258f0:	280a97fa 	slli	r5,r5,31
   258f4:	18ffffc4 	addi	r3,r3,-1
   258f8:	30c6703a 	and	r3,r6,r3
   258fc:	1906b03a 	or	r3,r3,r4
   25900:	1944b03a 	or	r2,r3,r5
   25904:	f800283a 	ret
   25908:	40000b1e 	bne	r8,zero,25938 <__truncdfsf2+0xf4>
   2590c:	388cb03a 	or	r6,r7,r2
   25910:	0007883a 	mov	r3,zero
   25914:	30000426 	beq	r6,zero,25928 <__truncdfsf2+0xe4>
   25918:	01800144 	movi	r6,5
   2591c:	00803fc4 	movi	r2,255
   25920:	300cd0fa 	srli	r6,r6,3
   25924:	18800a26 	beq	r3,r2,25950 <__truncdfsf2+0x10c>
   25928:	00802034 	movhi	r2,128
   2592c:	10bfffc4 	addi	r2,r2,-1
   25930:	308c703a 	and	r6,r6,r2
   25934:	003feb06 	br	258e4 <__alt_data_end+0xfffe58e4>
   25938:	3888b03a 	or	r4,r7,r2
   2593c:	203fe726 	beq	r4,zero,258dc <__alt_data_end+0xfffe58dc>
   25940:	380c90fa 	slli	r6,r7,3
   25944:	00c03fc4 	movi	r3,255
   25948:	31808034 	orhi	r6,r6,512
   2594c:	003fd506 	br	258a4 <__alt_data_end+0xfffe58a4>
   25950:	303fe226 	beq	r6,zero,258dc <__alt_data_end+0xfffe58dc>
   25954:	00802034 	movhi	r2,128
   25958:	31801034 	orhi	r6,r6,64
   2595c:	10bfffc4 	addi	r2,r2,-1
   25960:	00ffffc4 	movi	r3,-1
   25964:	308c703a 	and	r6,r6,r2
   25968:	003fde06 	br	258e4 <__alt_data_end+0xfffe58e4>
   2596c:	013ffa44 	movi	r4,-23
   25970:	19000e16 	blt	r3,r4,259ac <__truncdfsf2+0x168>
   25974:	01000784 	movi	r4,30
   25978:	20c9c83a 	sub	r4,r4,r3
   2597c:	018007c4 	movi	r6,31
   25980:	39c02034 	orhi	r7,r7,128
   25984:	31000b16 	blt	r6,r4,259b4 <__truncdfsf2+0x170>
   25988:	423f2084 	addi	r8,r8,-894
   2598c:	120c983a 	sll	r6,r2,r8
   25990:	3a0e983a 	sll	r7,r7,r8
   25994:	1104d83a 	srl	r2,r2,r4
   25998:	300cc03a 	cmpne	r6,r6,zero
   2599c:	31ceb03a 	or	r7,r6,r7
   259a0:	388cb03a 	or	r6,r7,r2
   259a4:	0007883a 	mov	r3,zero
   259a8:	003fbe06 	br	258a4 <__alt_data_end+0xfffe58a4>
   259ac:	0007883a 	mov	r3,zero
   259b0:	003fd906 	br	25918 <__alt_data_end+0xfffe5918>
   259b4:	01bfff84 	movi	r6,-2
   259b8:	30cdc83a 	sub	r6,r6,r3
   259bc:	00c00804 	movi	r3,32
   259c0:	398cd83a 	srl	r6,r7,r6
   259c4:	20c00726 	beq	r4,r3,259e4 <__truncdfsf2+0x1a0>
   259c8:	423f2884 	addi	r8,r8,-862
   259cc:	3a0e983a 	sll	r7,r7,r8
   259d0:	3884b03a 	or	r2,r7,r2
   259d4:	1004c03a 	cmpne	r2,r2,zero
   259d8:	118cb03a 	or	r6,r2,r6
   259dc:	0007883a 	mov	r3,zero
   259e0:	003fb006 	br	258a4 <__alt_data_end+0xfffe58a4>
   259e4:	000f883a 	mov	r7,zero
   259e8:	003ff906 	br	259d0 <__alt_data_end+0xfffe59d0>

000259ec <__clzsi2>:
   259ec:	00bfffd4 	movui	r2,65535
   259f0:	11000536 	bltu	r2,r4,25a08 <__clzsi2+0x1c>
   259f4:	00803fc4 	movi	r2,255
   259f8:	11000f36 	bltu	r2,r4,25a38 <__clzsi2+0x4c>
   259fc:	00800804 	movi	r2,32
   25a00:	0007883a 	mov	r3,zero
   25a04:	00000506 	br	25a1c <__clzsi2+0x30>
   25a08:	00804034 	movhi	r2,256
   25a0c:	10bfffc4 	addi	r2,r2,-1
   25a10:	11000c2e 	bgeu	r2,r4,25a44 <__clzsi2+0x58>
   25a14:	00800204 	movi	r2,8
   25a18:	00c00604 	movi	r3,24
   25a1c:	20c8d83a 	srl	r4,r4,r3
   25a20:	00c000f4 	movhi	r3,3
   25a24:	18fe2b84 	addi	r3,r3,-1874
   25a28:	1909883a 	add	r4,r3,r4
   25a2c:	20c00003 	ldbu	r3,0(r4)
   25a30:	10c5c83a 	sub	r2,r2,r3
   25a34:	f800283a 	ret
   25a38:	00800604 	movi	r2,24
   25a3c:	00c00204 	movi	r3,8
   25a40:	003ff606 	br	25a1c <__alt_data_end+0xfffe5a1c>
   25a44:	00800404 	movi	r2,16
   25a48:	1007883a 	mov	r3,r2
   25a4c:	003ff306 	br	25a1c <__alt_data_end+0xfffe5a1c>

00025a50 <memset>:
   25a50:	2005883a 	mov	r2,r4
   25a54:	2007883a 	mov	r3,r4
   25a58:	218d883a 	add	r6,r4,r6
   25a5c:	19800326 	beq	r3,r6,25a6c <memset+0x1c>
   25a60:	19400005 	stb	r5,0(r3)
   25a64:	18c00044 	addi	r3,r3,1
   25a68:	003ffc06 	br	25a5c <__alt_data_end+0xfffe5a5c>
   25a6c:	f800283a 	ret

00025a70 <_printf_r>:
   25a70:	defffd04 	addi	sp,sp,-12
   25a74:	dfc00015 	stw	ra,0(sp)
   25a78:	d9800115 	stw	r6,4(sp)
   25a7c:	d9c00215 	stw	r7,8(sp)
   25a80:	20c00217 	ldw	r3,8(r4)
   25a84:	018000b4 	movhi	r6,2
   25a88:	3199fb04 	addi	r6,r6,26604
   25a8c:	19800115 	stw	r6,4(r3)
   25a90:	280d883a 	mov	r6,r5
   25a94:	21400217 	ldw	r5,8(r4)
   25a98:	d9c00104 	addi	r7,sp,4
   25a9c:	00262a40 	call	262a4 <___vfprintf_internal_r>
   25aa0:	dfc00017 	ldw	ra,0(sp)
   25aa4:	dec00304 	addi	sp,sp,12
   25aa8:	f800283a 	ret

00025aac <printf>:
   25aac:	defffc04 	addi	sp,sp,-16
   25ab0:	dfc00015 	stw	ra,0(sp)
   25ab4:	d9400115 	stw	r5,4(sp)
   25ab8:	d9800215 	stw	r6,8(sp)
   25abc:	d9c00315 	stw	r7,12(sp)
   25ac0:	008000f4 	movhi	r2,3
   25ac4:	10bf4704 	addi	r2,r2,-740
   25ac8:	10800017 	ldw	r2,0(r2)
   25acc:	014000b4 	movhi	r5,2
   25ad0:	2959fb04 	addi	r5,r5,26604
   25ad4:	10c00217 	ldw	r3,8(r2)
   25ad8:	d9800104 	addi	r6,sp,4
   25adc:	19400115 	stw	r5,4(r3)
   25ae0:	200b883a 	mov	r5,r4
   25ae4:	11000217 	ldw	r4,8(r2)
   25ae8:	00267d00 	call	267d0 <__vfprintf_internal>
   25aec:	dfc00017 	ldw	ra,0(sp)
   25af0:	dec00404 	addi	sp,sp,16
   25af4:	f800283a 	ret

00025af8 <_puts_r>:
   25af8:	defffd04 	addi	sp,sp,-12
   25afc:	dc000015 	stw	r16,0(sp)
   25b00:	2021883a 	mov	r16,r4
   25b04:	2809883a 	mov	r4,r5
   25b08:	dfc00215 	stw	ra,8(sp)
   25b0c:	dc400115 	stw	r17,4(sp)
   25b10:	2823883a 	mov	r17,r5
   25b14:	0025c680 	call	25c68 <strlen>
   25b18:	81400217 	ldw	r5,8(r16)
   25b1c:	010000b4 	movhi	r4,2
   25b20:	2119fb04 	addi	r4,r4,26604
   25b24:	29000115 	stw	r4,4(r5)
   25b28:	100f883a 	mov	r7,r2
   25b2c:	880d883a 	mov	r6,r17
   25b30:	8009883a 	mov	r4,r16
   25b34:	00267ec0 	call	267ec <__sfvwrite_small_dev>
   25b38:	00ffffc4 	movi	r3,-1
   25b3c:	10c00926 	beq	r2,r3,25b64 <_puts_r+0x6c>
   25b40:	81400217 	ldw	r5,8(r16)
   25b44:	018000f4 	movhi	r6,3
   25b48:	01c00044 	movi	r7,1
   25b4c:	28800117 	ldw	r2,4(r5)
   25b50:	31be6c04 	addi	r6,r6,-1616
   25b54:	8009883a 	mov	r4,r16
   25b58:	103ee83a 	callr	r2
   25b5c:	10bfffe0 	cmpeqi	r2,r2,-1
   25b60:	0085c83a 	sub	r2,zero,r2
   25b64:	dfc00217 	ldw	ra,8(sp)
   25b68:	dc400117 	ldw	r17,4(sp)
   25b6c:	dc000017 	ldw	r16,0(sp)
   25b70:	dec00304 	addi	sp,sp,12
   25b74:	f800283a 	ret

00025b78 <puts>:
   25b78:	008000f4 	movhi	r2,3
   25b7c:	10bf4704 	addi	r2,r2,-740
   25b80:	200b883a 	mov	r5,r4
   25b84:	11000017 	ldw	r4,0(r2)
   25b88:	0025af81 	jmpi	25af8 <_puts_r>

00025b8c <_sprintf_r>:
   25b8c:	defff704 	addi	sp,sp,-36
   25b90:	dfc00715 	stw	ra,28(sp)
   25b94:	d9c00815 	stw	r7,32(sp)
   25b98:	00808204 	movi	r2,520
   25b9c:	d880000d 	sth	r2,0(sp)
   25ba0:	00a00034 	movhi	r2,32768
   25ba4:	10bfffc4 	addi	r2,r2,-1
   25ba8:	d8800515 	stw	r2,20(sp)
   25bac:	d8800315 	stw	r2,12(sp)
   25bb0:	00bfffc4 	movi	r2,-1
   25bb4:	d880008d 	sth	r2,2(sp)
   25bb8:	008000b4 	movhi	r2,2
   25bbc:	d9400415 	stw	r5,16(sp)
   25bc0:	d9400215 	stw	r5,8(sp)
   25bc4:	109a2904 	addi	r2,r2,26788
   25bc8:	d9c00804 	addi	r7,sp,32
   25bcc:	d80b883a 	mov	r5,sp
   25bd0:	d8800115 	stw	r2,4(sp)
   25bd4:	d8000615 	stw	zero,24(sp)
   25bd8:	0025cf00 	call	25cf0 <___svfprintf_internal_r>
   25bdc:	d8c00417 	ldw	r3,16(sp)
   25be0:	18000005 	stb	zero,0(r3)
   25be4:	dfc00717 	ldw	ra,28(sp)
   25be8:	dec00904 	addi	sp,sp,36
   25bec:	f800283a 	ret

00025bf0 <sprintf>:
   25bf0:	defff604 	addi	sp,sp,-40
   25bf4:	dfc00715 	stw	ra,28(sp)
   25bf8:	d9800815 	stw	r6,32(sp)
   25bfc:	d9c00915 	stw	r7,36(sp)
   25c00:	00808204 	movi	r2,520
   25c04:	d880000d 	sth	r2,0(sp)
   25c08:	00a00034 	movhi	r2,32768
   25c0c:	10bfffc4 	addi	r2,r2,-1
   25c10:	d8800515 	stw	r2,20(sp)
   25c14:	d8800315 	stw	r2,12(sp)
   25c18:	00bfffc4 	movi	r2,-1
   25c1c:	d880008d 	sth	r2,2(sp)
   25c20:	008000b4 	movhi	r2,2
   25c24:	109a2904 	addi	r2,r2,26788
   25c28:	d8800115 	stw	r2,4(sp)
   25c2c:	008000f4 	movhi	r2,3
   25c30:	10bf4704 	addi	r2,r2,-740
   25c34:	d9000415 	stw	r4,16(sp)
   25c38:	d9000215 	stw	r4,8(sp)
   25c3c:	11000017 	ldw	r4,0(r2)
   25c40:	280d883a 	mov	r6,r5
   25c44:	d9c00804 	addi	r7,sp,32
   25c48:	d80b883a 	mov	r5,sp
   25c4c:	d8000615 	stw	zero,24(sp)
   25c50:	0025cf00 	call	25cf0 <___svfprintf_internal_r>
   25c54:	d8c00417 	ldw	r3,16(sp)
   25c58:	18000005 	stb	zero,0(r3)
   25c5c:	dfc00717 	ldw	ra,28(sp)
   25c60:	dec00a04 	addi	sp,sp,40
   25c64:	f800283a 	ret

00025c68 <strlen>:
   25c68:	2005883a 	mov	r2,r4
   25c6c:	10c00007 	ldb	r3,0(r2)
   25c70:	18000226 	beq	r3,zero,25c7c <strlen+0x14>
   25c74:	10800044 	addi	r2,r2,1
   25c78:	003ffc06 	br	25c6c <__alt_data_end+0xfffe5c6c>
   25c7c:	1105c83a 	sub	r2,r2,r4
   25c80:	f800283a 	ret

00025c84 <print_repeat>:
   25c84:	defffb04 	addi	sp,sp,-20
   25c88:	dc800315 	stw	r18,12(sp)
   25c8c:	dc400215 	stw	r17,8(sp)
   25c90:	dc000115 	stw	r16,4(sp)
   25c94:	dfc00415 	stw	ra,16(sp)
   25c98:	2025883a 	mov	r18,r4
   25c9c:	2823883a 	mov	r17,r5
   25ca0:	d9800005 	stb	r6,0(sp)
   25ca4:	3821883a 	mov	r16,r7
   25ca8:	04000a0e 	bge	zero,r16,25cd4 <print_repeat+0x50>
   25cac:	88800117 	ldw	r2,4(r17)
   25cb0:	01c00044 	movi	r7,1
   25cb4:	d80d883a 	mov	r6,sp
   25cb8:	880b883a 	mov	r5,r17
   25cbc:	9009883a 	mov	r4,r18
   25cc0:	103ee83a 	callr	r2
   25cc4:	843fffc4 	addi	r16,r16,-1
   25cc8:	103ff726 	beq	r2,zero,25ca8 <__alt_data_end+0xfffe5ca8>
   25ccc:	00bfffc4 	movi	r2,-1
   25cd0:	00000106 	br	25cd8 <print_repeat+0x54>
   25cd4:	0005883a 	mov	r2,zero
   25cd8:	dfc00417 	ldw	ra,16(sp)
   25cdc:	dc800317 	ldw	r18,12(sp)
   25ce0:	dc400217 	ldw	r17,8(sp)
   25ce4:	dc000117 	ldw	r16,4(sp)
   25ce8:	dec00504 	addi	sp,sp,20
   25cec:	f800283a 	ret

00025cf0 <___svfprintf_internal_r>:
   25cf0:	deffe504 	addi	sp,sp,-108
   25cf4:	d8c00804 	addi	r3,sp,32
   25cf8:	ddc01815 	stw	r23,96(sp)
   25cfc:	dd801715 	stw	r22,92(sp)
   25d00:	dd401615 	stw	r21,88(sp)
   25d04:	dd001515 	stw	r20,84(sp)
   25d08:	dcc01415 	stw	r19,80(sp)
   25d0c:	dc801315 	stw	r18,76(sp)
   25d10:	dc401215 	stw	r17,72(sp)
   25d14:	dc001115 	stw	r16,68(sp)
   25d18:	dfc01a15 	stw	ra,104(sp)
   25d1c:	df001915 	stw	fp,100(sp)
   25d20:	2029883a 	mov	r20,r4
   25d24:	2823883a 	mov	r17,r5
   25d28:	382d883a 	mov	r22,r7
   25d2c:	d9800f15 	stw	r6,60(sp)
   25d30:	0021883a 	mov	r16,zero
   25d34:	d8000e15 	stw	zero,56(sp)
   25d38:	d8000a15 	stw	zero,40(sp)
   25d3c:	002b883a 	mov	r21,zero
   25d40:	0027883a 	mov	r19,zero
   25d44:	0025883a 	mov	r18,zero
   25d48:	d8000c15 	stw	zero,48(sp)
   25d4c:	d8000b15 	stw	zero,44(sp)
   25d50:	002f883a 	mov	r23,zero
   25d54:	d8c00915 	stw	r3,36(sp)
   25d58:	d8c00f17 	ldw	r3,60(sp)
   25d5c:	19000003 	ldbu	r4,0(r3)
   25d60:	20803fcc 	andi	r2,r4,255
   25d64:	1080201c 	xori	r2,r2,128
   25d68:	10bfe004 	addi	r2,r2,-128
   25d6c:	10011e26 	beq	r2,zero,261e8 <___svfprintf_internal_r+0x4f8>
   25d70:	00c00044 	movi	r3,1
   25d74:	b8c01426 	beq	r23,r3,25dc8 <___svfprintf_internal_r+0xd8>
   25d78:	1dc00216 	blt	r3,r23,25d84 <___svfprintf_internal_r+0x94>
   25d7c:	b8000626 	beq	r23,zero,25d98 <___svfprintf_internal_r+0xa8>
   25d80:	00011506 	br	261d8 <___svfprintf_internal_r+0x4e8>
   25d84:	01400084 	movi	r5,2
   25d88:	b9401d26 	beq	r23,r5,25e00 <___svfprintf_internal_r+0x110>
   25d8c:	014000c4 	movi	r5,3
   25d90:	b9402b26 	beq	r23,r5,25e40 <___svfprintf_internal_r+0x150>
   25d94:	00011006 	br	261d8 <___svfprintf_internal_r+0x4e8>
   25d98:	01400944 	movi	r5,37
   25d9c:	1140fc26 	beq	r2,r5,26190 <___svfprintf_internal_r+0x4a0>
   25da0:	88800117 	ldw	r2,4(r17)
   25da4:	d9000005 	stb	r4,0(sp)
   25da8:	01c00044 	movi	r7,1
   25dac:	d80d883a 	mov	r6,sp
   25db0:	880b883a 	mov	r5,r17
   25db4:	a009883a 	mov	r4,r20
   25db8:	103ee83a 	callr	r2
   25dbc:	1000d81e 	bne	r2,zero,26120 <___svfprintf_internal_r+0x430>
   25dc0:	84000044 	addi	r16,r16,1
   25dc4:	00010406 	br	261d8 <___svfprintf_internal_r+0x4e8>
   25dc8:	01400c04 	movi	r5,48
   25dcc:	1140fa26 	beq	r2,r5,261b8 <___svfprintf_internal_r+0x4c8>
   25dd0:	01400944 	movi	r5,37
   25dd4:	11400a1e 	bne	r2,r5,25e00 <___svfprintf_internal_r+0x110>
   25dd8:	d8800005 	stb	r2,0(sp)
   25ddc:	88800117 	ldw	r2,4(r17)
   25de0:	b80f883a 	mov	r7,r23
   25de4:	d80d883a 	mov	r6,sp
   25de8:	880b883a 	mov	r5,r17
   25dec:	a009883a 	mov	r4,r20
   25df0:	103ee83a 	callr	r2
   25df4:	1000ca1e 	bne	r2,zero,26120 <___svfprintf_internal_r+0x430>
   25df8:	84000044 	addi	r16,r16,1
   25dfc:	0000f506 	br	261d4 <___svfprintf_internal_r+0x4e4>
   25e00:	25fff404 	addi	r23,r4,-48
   25e04:	bdc03fcc 	andi	r23,r23,255
   25e08:	00c00244 	movi	r3,9
   25e0c:	1dc00936 	bltu	r3,r23,25e34 <___svfprintf_internal_r+0x144>
   25e10:	00bfffc4 	movi	r2,-1
   25e14:	90800426 	beq	r18,r2,25e28 <___svfprintf_internal_r+0x138>
   25e18:	01400284 	movi	r5,10
   25e1c:	9009883a 	mov	r4,r18
   25e20:	0022c300 	call	22c30 <__mulsi3>
   25e24:	00000106 	br	25e2c <___svfprintf_internal_r+0x13c>
   25e28:	0005883a 	mov	r2,zero
   25e2c:	b8a5883a 	add	r18,r23,r2
   25e30:	0000e206 	br	261bc <___svfprintf_internal_r+0x4cc>
   25e34:	01400b84 	movi	r5,46
   25e38:	1140e426 	beq	r2,r5,261cc <___svfprintf_internal_r+0x4dc>
   25e3c:	05c00084 	movi	r23,2
   25e40:	213ff404 	addi	r4,r4,-48
   25e44:	27003fcc 	andi	fp,r4,255
   25e48:	00c00244 	movi	r3,9
   25e4c:	1f000936 	bltu	r3,fp,25e74 <___svfprintf_internal_r+0x184>
   25e50:	00bfffc4 	movi	r2,-1
   25e54:	98800426 	beq	r19,r2,25e68 <___svfprintf_internal_r+0x178>
   25e58:	01400284 	movi	r5,10
   25e5c:	9809883a 	mov	r4,r19
   25e60:	0022c300 	call	22c30 <__mulsi3>
   25e64:	00000106 	br	25e6c <___svfprintf_internal_r+0x17c>
   25e68:	0005883a 	mov	r2,zero
   25e6c:	e0a7883a 	add	r19,fp,r2
   25e70:	0000d906 	br	261d8 <___svfprintf_internal_r+0x4e8>
   25e74:	00c01b04 	movi	r3,108
   25e78:	10c0d226 	beq	r2,r3,261c4 <___svfprintf_internal_r+0x4d4>
   25e7c:	013fffc4 	movi	r4,-1
   25e80:	99000226 	beq	r19,r4,25e8c <___svfprintf_internal_r+0x19c>
   25e84:	d8000b15 	stw	zero,44(sp)
   25e88:	00000106 	br	25e90 <___svfprintf_internal_r+0x1a0>
   25e8c:	04c00044 	movi	r19,1
   25e90:	01001a44 	movi	r4,105
   25e94:	11001626 	beq	r2,r4,25ef0 <___svfprintf_internal_r+0x200>
   25e98:	20800916 	blt	r4,r2,25ec0 <___svfprintf_internal_r+0x1d0>
   25e9c:	010018c4 	movi	r4,99
   25ea0:	11008826 	beq	r2,r4,260c4 <___svfprintf_internal_r+0x3d4>
   25ea4:	01001904 	movi	r4,100
   25ea8:	11001126 	beq	r2,r4,25ef0 <___svfprintf_internal_r+0x200>
   25eac:	01001604 	movi	r4,88
   25eb0:	1100c81e 	bne	r2,r4,261d4 <___svfprintf_internal_r+0x4e4>
   25eb4:	00c00044 	movi	r3,1
   25eb8:	d8c00e15 	stw	r3,56(sp)
   25ebc:	00001506 	br	25f14 <___svfprintf_internal_r+0x224>
   25ec0:	01001cc4 	movi	r4,115
   25ec4:	11009826 	beq	r2,r4,26128 <___svfprintf_internal_r+0x438>
   25ec8:	20800416 	blt	r4,r2,25edc <___svfprintf_internal_r+0x1ec>
   25ecc:	01001bc4 	movi	r4,111
   25ed0:	1100c01e 	bne	r2,r4,261d4 <___svfprintf_internal_r+0x4e4>
   25ed4:	05400204 	movi	r21,8
   25ed8:	00000f06 	br	25f18 <___svfprintf_internal_r+0x228>
   25edc:	01001d44 	movi	r4,117
   25ee0:	11000d26 	beq	r2,r4,25f18 <___svfprintf_internal_r+0x228>
   25ee4:	01001e04 	movi	r4,120
   25ee8:	11000a26 	beq	r2,r4,25f14 <___svfprintf_internal_r+0x224>
   25eec:	0000b906 	br	261d4 <___svfprintf_internal_r+0x4e4>
   25ef0:	d8c00a17 	ldw	r3,40(sp)
   25ef4:	b7000104 	addi	fp,r22,4
   25ef8:	18000726 	beq	r3,zero,25f18 <___svfprintf_internal_r+0x228>
   25efc:	df000d15 	stw	fp,52(sp)
   25f00:	b5c00017 	ldw	r23,0(r22)
   25f04:	b800080e 	bge	r23,zero,25f28 <___svfprintf_internal_r+0x238>
   25f08:	05efc83a 	sub	r23,zero,r23
   25f0c:	02400044 	movi	r9,1
   25f10:	00000606 	br	25f2c <___svfprintf_internal_r+0x23c>
   25f14:	05400404 	movi	r21,16
   25f18:	b0c00104 	addi	r3,r22,4
   25f1c:	d8c00d15 	stw	r3,52(sp)
   25f20:	b5c00017 	ldw	r23,0(r22)
   25f24:	d8000a15 	stw	zero,40(sp)
   25f28:	0013883a 	mov	r9,zero
   25f2c:	d839883a 	mov	fp,sp
   25f30:	b8001726 	beq	r23,zero,25f90 <___svfprintf_internal_r+0x2a0>
   25f34:	a80b883a 	mov	r5,r21
   25f38:	b809883a 	mov	r4,r23
   25f3c:	da401015 	stw	r9,64(sp)
   25f40:	0022b740 	call	22b74 <__udivsi3>
   25f44:	a80b883a 	mov	r5,r21
   25f48:	1009883a 	mov	r4,r2
   25f4c:	102d883a 	mov	r22,r2
   25f50:	0022c300 	call	22c30 <__mulsi3>
   25f54:	b885c83a 	sub	r2,r23,r2
   25f58:	00c00244 	movi	r3,9
   25f5c:	da401017 	ldw	r9,64(sp)
   25f60:	18800216 	blt	r3,r2,25f6c <___svfprintf_internal_r+0x27c>
   25f64:	10800c04 	addi	r2,r2,48
   25f68:	00000506 	br	25f80 <___svfprintf_internal_r+0x290>
   25f6c:	d8c00e17 	ldw	r3,56(sp)
   25f70:	18000226 	beq	r3,zero,25f7c <___svfprintf_internal_r+0x28c>
   25f74:	10800dc4 	addi	r2,r2,55
   25f78:	00000106 	br	25f80 <___svfprintf_internal_r+0x290>
   25f7c:	108015c4 	addi	r2,r2,87
   25f80:	e0800005 	stb	r2,0(fp)
   25f84:	b02f883a 	mov	r23,r22
   25f88:	e7000044 	addi	fp,fp,1
   25f8c:	003fe806 	br	25f30 <__alt_data_end+0xfffe5f30>
   25f90:	e6efc83a 	sub	r23,fp,sp
   25f94:	9dc5c83a 	sub	r2,r19,r23
   25f98:	0080090e 	bge	zero,r2,25fc0 <___svfprintf_internal_r+0x2d0>
   25f9c:	e085883a 	add	r2,fp,r2
   25fa0:	01400c04 	movi	r5,48
   25fa4:	d8c00917 	ldw	r3,36(sp)
   25fa8:	e009883a 	mov	r4,fp
   25fac:	e0c0032e 	bgeu	fp,r3,25fbc <___svfprintf_internal_r+0x2cc>
   25fb0:	e7000044 	addi	fp,fp,1
   25fb4:	21400005 	stb	r5,0(r4)
   25fb8:	e0bffa1e 	bne	fp,r2,25fa4 <__alt_data_end+0xfffe5fa4>
   25fbc:	e6efc83a 	sub	r23,fp,sp
   25fc0:	d8c00b17 	ldw	r3,44(sp)
   25fc4:	4dd1883a 	add	r8,r9,r23
   25fc8:	922dc83a 	sub	r22,r18,r8
   25fcc:	18001626 	beq	r3,zero,26028 <___svfprintf_internal_r+0x338>
   25fd0:	48000a26 	beq	r9,zero,25ffc <___svfprintf_internal_r+0x30c>
   25fd4:	00800b44 	movi	r2,45
   25fd8:	d8800805 	stb	r2,32(sp)
   25fdc:	88800117 	ldw	r2,4(r17)
   25fe0:	01c00044 	movi	r7,1
   25fe4:	d9800804 	addi	r6,sp,32
   25fe8:	880b883a 	mov	r5,r17
   25fec:	a009883a 	mov	r4,r20
   25ff0:	103ee83a 	callr	r2
   25ff4:	10004a1e 	bne	r2,zero,26120 <___svfprintf_internal_r+0x430>
   25ff8:	84000044 	addi	r16,r16,1
   25ffc:	0580070e 	bge	zero,r22,2601c <___svfprintf_internal_r+0x32c>
   26000:	b00f883a 	mov	r7,r22
   26004:	01800c04 	movi	r6,48
   26008:	880b883a 	mov	r5,r17
   2600c:	a009883a 	mov	r4,r20
   26010:	0025c840 	call	25c84 <print_repeat>
   26014:	1000421e 	bne	r2,zero,26120 <___svfprintf_internal_r+0x430>
   26018:	85a1883a 	add	r16,r16,r22
   2601c:	e02d883a 	mov	r22,fp
   26020:	bf2fc83a 	sub	r23,r23,fp
   26024:	00002006 	br	260a8 <___svfprintf_internal_r+0x3b8>
   26028:	0580090e 	bge	zero,r22,26050 <___svfprintf_internal_r+0x360>
   2602c:	b00f883a 	mov	r7,r22
   26030:	01800804 	movi	r6,32
   26034:	880b883a 	mov	r5,r17
   26038:	a009883a 	mov	r4,r20
   2603c:	da401015 	stw	r9,64(sp)
   26040:	0025c840 	call	25c84 <print_repeat>
   26044:	da401017 	ldw	r9,64(sp)
   26048:	1000351e 	bne	r2,zero,26120 <___svfprintf_internal_r+0x430>
   2604c:	85a1883a 	add	r16,r16,r22
   26050:	483ff226 	beq	r9,zero,2601c <__alt_data_end+0xfffe601c>
   26054:	00800b44 	movi	r2,45
   26058:	d8800805 	stb	r2,32(sp)
   2605c:	88800117 	ldw	r2,4(r17)
   26060:	01c00044 	movi	r7,1
   26064:	d9800804 	addi	r6,sp,32
   26068:	880b883a 	mov	r5,r17
   2606c:	a009883a 	mov	r4,r20
   26070:	103ee83a 	callr	r2
   26074:	10002a1e 	bne	r2,zero,26120 <___svfprintf_internal_r+0x430>
   26078:	84000044 	addi	r16,r16,1
   2607c:	003fe706 	br	2601c <__alt_data_end+0xfffe601c>
   26080:	b5bfffc4 	addi	r22,r22,-1
   26084:	b0800003 	ldbu	r2,0(r22)
   26088:	01c00044 	movi	r7,1
   2608c:	d9800804 	addi	r6,sp,32
   26090:	d8800805 	stb	r2,32(sp)
   26094:	88800117 	ldw	r2,4(r17)
   26098:	880b883a 	mov	r5,r17
   2609c:	a009883a 	mov	r4,r20
   260a0:	103ee83a 	callr	r2
   260a4:	10001e1e 	bne	r2,zero,26120 <___svfprintf_internal_r+0x430>
   260a8:	8585c83a 	sub	r2,r16,r22
   260ac:	b5c9883a 	add	r4,r22,r23
   260b0:	e085883a 	add	r2,fp,r2
   260b4:	013ff216 	blt	zero,r4,26080 <__alt_data_end+0xfffe6080>
   260b8:	1021883a 	mov	r16,r2
   260bc:	dd800d17 	ldw	r22,52(sp)
   260c0:	00004406 	br	261d4 <___svfprintf_internal_r+0x4e4>
   260c4:	00800044 	movi	r2,1
   260c8:	1480080e 	bge	r2,r18,260ec <___svfprintf_internal_r+0x3fc>
   260cc:	95ffffc4 	addi	r23,r18,-1
   260d0:	b80f883a 	mov	r7,r23
   260d4:	01800804 	movi	r6,32
   260d8:	880b883a 	mov	r5,r17
   260dc:	a009883a 	mov	r4,r20
   260e0:	0025c840 	call	25c84 <print_repeat>
   260e4:	10000e1e 	bne	r2,zero,26120 <___svfprintf_internal_r+0x430>
   260e8:	85e1883a 	add	r16,r16,r23
   260ec:	b0800017 	ldw	r2,0(r22)
   260f0:	01c00044 	movi	r7,1
   260f4:	d80d883a 	mov	r6,sp
   260f8:	d8800005 	stb	r2,0(sp)
   260fc:	88800117 	ldw	r2,4(r17)
   26100:	880b883a 	mov	r5,r17
   26104:	a009883a 	mov	r4,r20
   26108:	b5c00104 	addi	r23,r22,4
   2610c:	103ee83a 	callr	r2
   26110:	1000031e 	bne	r2,zero,26120 <___svfprintf_internal_r+0x430>
   26114:	84000044 	addi	r16,r16,1
   26118:	b82d883a 	mov	r22,r23
   2611c:	00002d06 	br	261d4 <___svfprintf_internal_r+0x4e4>
   26120:	00bfffc4 	movi	r2,-1
   26124:	00003106 	br	261ec <___svfprintf_internal_r+0x4fc>
   26128:	b5c00017 	ldw	r23,0(r22)
   2612c:	b7000104 	addi	fp,r22,4
   26130:	b809883a 	mov	r4,r23
   26134:	0025c680 	call	25c68 <strlen>
   26138:	9091c83a 	sub	r8,r18,r2
   2613c:	102d883a 	mov	r22,r2
   26140:	0200090e 	bge	zero,r8,26168 <___svfprintf_internal_r+0x478>
   26144:	400f883a 	mov	r7,r8
   26148:	01800804 	movi	r6,32
   2614c:	880b883a 	mov	r5,r17
   26150:	a009883a 	mov	r4,r20
   26154:	da001015 	stw	r8,64(sp)
   26158:	0025c840 	call	25c84 <print_repeat>
   2615c:	da001017 	ldw	r8,64(sp)
   26160:	103fef1e 	bne	r2,zero,26120 <__alt_data_end+0xfffe6120>
   26164:	8221883a 	add	r16,r16,r8
   26168:	88800117 	ldw	r2,4(r17)
   2616c:	b00f883a 	mov	r7,r22
   26170:	b80d883a 	mov	r6,r23
   26174:	880b883a 	mov	r5,r17
   26178:	a009883a 	mov	r4,r20
   2617c:	103ee83a 	callr	r2
   26180:	103fe71e 	bne	r2,zero,26120 <__alt_data_end+0xfffe6120>
   26184:	85a1883a 	add	r16,r16,r22
   26188:	e02d883a 	mov	r22,fp
   2618c:	00001106 	br	261d4 <___svfprintf_internal_r+0x4e4>
   26190:	00c00044 	movi	r3,1
   26194:	04ffffc4 	movi	r19,-1
   26198:	d8000e15 	stw	zero,56(sp)
   2619c:	d8c00a15 	stw	r3,40(sp)
   261a0:	05400284 	movi	r21,10
   261a4:	9825883a 	mov	r18,r19
   261a8:	d8000c15 	stw	zero,48(sp)
   261ac:	d8000b15 	stw	zero,44(sp)
   261b0:	182f883a 	mov	r23,r3
   261b4:	00000806 	br	261d8 <___svfprintf_internal_r+0x4e8>
   261b8:	ddc00b15 	stw	r23,44(sp)
   261bc:	05c00084 	movi	r23,2
   261c0:	00000506 	br	261d8 <___svfprintf_internal_r+0x4e8>
   261c4:	00c00044 	movi	r3,1
   261c8:	d8c00c15 	stw	r3,48(sp)
   261cc:	05c000c4 	movi	r23,3
   261d0:	00000106 	br	261d8 <___svfprintf_internal_r+0x4e8>
   261d4:	002f883a 	mov	r23,zero
   261d8:	d8c00f17 	ldw	r3,60(sp)
   261dc:	18c00044 	addi	r3,r3,1
   261e0:	d8c00f15 	stw	r3,60(sp)
   261e4:	003edc06 	br	25d58 <__alt_data_end+0xfffe5d58>
   261e8:	8005883a 	mov	r2,r16
   261ec:	dfc01a17 	ldw	ra,104(sp)
   261f0:	df001917 	ldw	fp,100(sp)
   261f4:	ddc01817 	ldw	r23,96(sp)
   261f8:	dd801717 	ldw	r22,92(sp)
   261fc:	dd401617 	ldw	r21,88(sp)
   26200:	dd001517 	ldw	r20,84(sp)
   26204:	dcc01417 	ldw	r19,80(sp)
   26208:	dc801317 	ldw	r18,76(sp)
   2620c:	dc401217 	ldw	r17,72(sp)
   26210:	dc001117 	ldw	r16,68(sp)
   26214:	dec01b04 	addi	sp,sp,108
   26218:	f800283a 	ret

0002621c <__vfprintf_internal_unused>:
   2621c:	008000f4 	movhi	r2,3
   26220:	10bf4704 	addi	r2,r2,-740
   26224:	300f883a 	mov	r7,r6
   26228:	280d883a 	mov	r6,r5
   2622c:	200b883a 	mov	r5,r4
   26230:	11000017 	ldw	r4,0(r2)
   26234:	0025cf01 	jmpi	25cf0 <___svfprintf_internal_r>

00026238 <print_repeat>:
   26238:	defffb04 	addi	sp,sp,-20
   2623c:	dc800315 	stw	r18,12(sp)
   26240:	dc400215 	stw	r17,8(sp)
   26244:	dc000115 	stw	r16,4(sp)
   26248:	dfc00415 	stw	ra,16(sp)
   2624c:	2025883a 	mov	r18,r4
   26250:	2823883a 	mov	r17,r5
   26254:	d9800005 	stb	r6,0(sp)
   26258:	3821883a 	mov	r16,r7
   2625c:	04000a0e 	bge	zero,r16,26288 <print_repeat+0x50>
   26260:	88800117 	ldw	r2,4(r17)
   26264:	01c00044 	movi	r7,1
   26268:	d80d883a 	mov	r6,sp
   2626c:	880b883a 	mov	r5,r17
   26270:	9009883a 	mov	r4,r18
   26274:	103ee83a 	callr	r2
   26278:	843fffc4 	addi	r16,r16,-1
   2627c:	103ff726 	beq	r2,zero,2625c <__alt_data_end+0xfffe625c>
   26280:	00bfffc4 	movi	r2,-1
   26284:	00000106 	br	2628c <print_repeat+0x54>
   26288:	0005883a 	mov	r2,zero
   2628c:	dfc00417 	ldw	ra,16(sp)
   26290:	dc800317 	ldw	r18,12(sp)
   26294:	dc400217 	ldw	r17,8(sp)
   26298:	dc000117 	ldw	r16,4(sp)
   2629c:	dec00504 	addi	sp,sp,20
   262a0:	f800283a 	ret

000262a4 <___vfprintf_internal_r>:
   262a4:	deffe504 	addi	sp,sp,-108
   262a8:	d8c00804 	addi	r3,sp,32
   262ac:	ddc01815 	stw	r23,96(sp)
   262b0:	dd801715 	stw	r22,92(sp)
   262b4:	dd401615 	stw	r21,88(sp)
   262b8:	dd001515 	stw	r20,84(sp)
   262bc:	dcc01415 	stw	r19,80(sp)
   262c0:	dc801315 	stw	r18,76(sp)
   262c4:	dc401215 	stw	r17,72(sp)
   262c8:	dc001115 	stw	r16,68(sp)
   262cc:	dfc01a15 	stw	ra,104(sp)
   262d0:	df001915 	stw	fp,100(sp)
   262d4:	2029883a 	mov	r20,r4
   262d8:	2823883a 	mov	r17,r5
   262dc:	382d883a 	mov	r22,r7
   262e0:	d9800f15 	stw	r6,60(sp)
   262e4:	0021883a 	mov	r16,zero
   262e8:	d8000e15 	stw	zero,56(sp)
   262ec:	d8000a15 	stw	zero,40(sp)
   262f0:	002b883a 	mov	r21,zero
   262f4:	0027883a 	mov	r19,zero
   262f8:	0025883a 	mov	r18,zero
   262fc:	d8000c15 	stw	zero,48(sp)
   26300:	d8000b15 	stw	zero,44(sp)
   26304:	002f883a 	mov	r23,zero
   26308:	d8c00915 	stw	r3,36(sp)
   2630c:	d8c00f17 	ldw	r3,60(sp)
   26310:	19000003 	ldbu	r4,0(r3)
   26314:	20803fcc 	andi	r2,r4,255
   26318:	1080201c 	xori	r2,r2,128
   2631c:	10bfe004 	addi	r2,r2,-128
   26320:	10011e26 	beq	r2,zero,2679c <___vfprintf_internal_r+0x4f8>
   26324:	00c00044 	movi	r3,1
   26328:	b8c01426 	beq	r23,r3,2637c <___vfprintf_internal_r+0xd8>
   2632c:	1dc00216 	blt	r3,r23,26338 <___vfprintf_internal_r+0x94>
   26330:	b8000626 	beq	r23,zero,2634c <___vfprintf_internal_r+0xa8>
   26334:	00011506 	br	2678c <___vfprintf_internal_r+0x4e8>
   26338:	01400084 	movi	r5,2
   2633c:	b9401d26 	beq	r23,r5,263b4 <___vfprintf_internal_r+0x110>
   26340:	014000c4 	movi	r5,3
   26344:	b9402b26 	beq	r23,r5,263f4 <___vfprintf_internal_r+0x150>
   26348:	00011006 	br	2678c <___vfprintf_internal_r+0x4e8>
   2634c:	01400944 	movi	r5,37
   26350:	1140fc26 	beq	r2,r5,26744 <___vfprintf_internal_r+0x4a0>
   26354:	88800117 	ldw	r2,4(r17)
   26358:	d9000005 	stb	r4,0(sp)
   2635c:	01c00044 	movi	r7,1
   26360:	d80d883a 	mov	r6,sp
   26364:	880b883a 	mov	r5,r17
   26368:	a009883a 	mov	r4,r20
   2636c:	103ee83a 	callr	r2
   26370:	1000d81e 	bne	r2,zero,266d4 <___vfprintf_internal_r+0x430>
   26374:	84000044 	addi	r16,r16,1
   26378:	00010406 	br	2678c <___vfprintf_internal_r+0x4e8>
   2637c:	01400c04 	movi	r5,48
   26380:	1140fa26 	beq	r2,r5,2676c <___vfprintf_internal_r+0x4c8>
   26384:	01400944 	movi	r5,37
   26388:	11400a1e 	bne	r2,r5,263b4 <___vfprintf_internal_r+0x110>
   2638c:	d8800005 	stb	r2,0(sp)
   26390:	88800117 	ldw	r2,4(r17)
   26394:	b80f883a 	mov	r7,r23
   26398:	d80d883a 	mov	r6,sp
   2639c:	880b883a 	mov	r5,r17
   263a0:	a009883a 	mov	r4,r20
   263a4:	103ee83a 	callr	r2
   263a8:	1000ca1e 	bne	r2,zero,266d4 <___vfprintf_internal_r+0x430>
   263ac:	84000044 	addi	r16,r16,1
   263b0:	0000f506 	br	26788 <___vfprintf_internal_r+0x4e4>
   263b4:	25fff404 	addi	r23,r4,-48
   263b8:	bdc03fcc 	andi	r23,r23,255
   263bc:	00c00244 	movi	r3,9
   263c0:	1dc00936 	bltu	r3,r23,263e8 <___vfprintf_internal_r+0x144>
   263c4:	00bfffc4 	movi	r2,-1
   263c8:	90800426 	beq	r18,r2,263dc <___vfprintf_internal_r+0x138>
   263cc:	01400284 	movi	r5,10
   263d0:	9009883a 	mov	r4,r18
   263d4:	0022c300 	call	22c30 <__mulsi3>
   263d8:	00000106 	br	263e0 <___vfprintf_internal_r+0x13c>
   263dc:	0005883a 	mov	r2,zero
   263e0:	b8a5883a 	add	r18,r23,r2
   263e4:	0000e206 	br	26770 <___vfprintf_internal_r+0x4cc>
   263e8:	01400b84 	movi	r5,46
   263ec:	1140e426 	beq	r2,r5,26780 <___vfprintf_internal_r+0x4dc>
   263f0:	05c00084 	movi	r23,2
   263f4:	213ff404 	addi	r4,r4,-48
   263f8:	27003fcc 	andi	fp,r4,255
   263fc:	00c00244 	movi	r3,9
   26400:	1f000936 	bltu	r3,fp,26428 <___vfprintf_internal_r+0x184>
   26404:	00bfffc4 	movi	r2,-1
   26408:	98800426 	beq	r19,r2,2641c <___vfprintf_internal_r+0x178>
   2640c:	01400284 	movi	r5,10
   26410:	9809883a 	mov	r4,r19
   26414:	0022c300 	call	22c30 <__mulsi3>
   26418:	00000106 	br	26420 <___vfprintf_internal_r+0x17c>
   2641c:	0005883a 	mov	r2,zero
   26420:	e0a7883a 	add	r19,fp,r2
   26424:	0000d906 	br	2678c <___vfprintf_internal_r+0x4e8>
   26428:	00c01b04 	movi	r3,108
   2642c:	10c0d226 	beq	r2,r3,26778 <___vfprintf_internal_r+0x4d4>
   26430:	013fffc4 	movi	r4,-1
   26434:	99000226 	beq	r19,r4,26440 <___vfprintf_internal_r+0x19c>
   26438:	d8000b15 	stw	zero,44(sp)
   2643c:	00000106 	br	26444 <___vfprintf_internal_r+0x1a0>
   26440:	04c00044 	movi	r19,1
   26444:	01001a44 	movi	r4,105
   26448:	11001626 	beq	r2,r4,264a4 <___vfprintf_internal_r+0x200>
   2644c:	20800916 	blt	r4,r2,26474 <___vfprintf_internal_r+0x1d0>
   26450:	010018c4 	movi	r4,99
   26454:	11008826 	beq	r2,r4,26678 <___vfprintf_internal_r+0x3d4>
   26458:	01001904 	movi	r4,100
   2645c:	11001126 	beq	r2,r4,264a4 <___vfprintf_internal_r+0x200>
   26460:	01001604 	movi	r4,88
   26464:	1100c81e 	bne	r2,r4,26788 <___vfprintf_internal_r+0x4e4>
   26468:	00c00044 	movi	r3,1
   2646c:	d8c00e15 	stw	r3,56(sp)
   26470:	00001506 	br	264c8 <___vfprintf_internal_r+0x224>
   26474:	01001cc4 	movi	r4,115
   26478:	11009826 	beq	r2,r4,266dc <___vfprintf_internal_r+0x438>
   2647c:	20800416 	blt	r4,r2,26490 <___vfprintf_internal_r+0x1ec>
   26480:	01001bc4 	movi	r4,111
   26484:	1100c01e 	bne	r2,r4,26788 <___vfprintf_internal_r+0x4e4>
   26488:	05400204 	movi	r21,8
   2648c:	00000f06 	br	264cc <___vfprintf_internal_r+0x228>
   26490:	01001d44 	movi	r4,117
   26494:	11000d26 	beq	r2,r4,264cc <___vfprintf_internal_r+0x228>
   26498:	01001e04 	movi	r4,120
   2649c:	11000a26 	beq	r2,r4,264c8 <___vfprintf_internal_r+0x224>
   264a0:	0000b906 	br	26788 <___vfprintf_internal_r+0x4e4>
   264a4:	d8c00a17 	ldw	r3,40(sp)
   264a8:	b7000104 	addi	fp,r22,4
   264ac:	18000726 	beq	r3,zero,264cc <___vfprintf_internal_r+0x228>
   264b0:	df000d15 	stw	fp,52(sp)
   264b4:	b5c00017 	ldw	r23,0(r22)
   264b8:	b800080e 	bge	r23,zero,264dc <___vfprintf_internal_r+0x238>
   264bc:	05efc83a 	sub	r23,zero,r23
   264c0:	02400044 	movi	r9,1
   264c4:	00000606 	br	264e0 <___vfprintf_internal_r+0x23c>
   264c8:	05400404 	movi	r21,16
   264cc:	b0c00104 	addi	r3,r22,4
   264d0:	d8c00d15 	stw	r3,52(sp)
   264d4:	b5c00017 	ldw	r23,0(r22)
   264d8:	d8000a15 	stw	zero,40(sp)
   264dc:	0013883a 	mov	r9,zero
   264e0:	d839883a 	mov	fp,sp
   264e4:	b8001726 	beq	r23,zero,26544 <___vfprintf_internal_r+0x2a0>
   264e8:	a80b883a 	mov	r5,r21
   264ec:	b809883a 	mov	r4,r23
   264f0:	da401015 	stw	r9,64(sp)
   264f4:	0022b740 	call	22b74 <__udivsi3>
   264f8:	a80b883a 	mov	r5,r21
   264fc:	1009883a 	mov	r4,r2
   26500:	102d883a 	mov	r22,r2
   26504:	0022c300 	call	22c30 <__mulsi3>
   26508:	b885c83a 	sub	r2,r23,r2
   2650c:	00c00244 	movi	r3,9
   26510:	da401017 	ldw	r9,64(sp)
   26514:	18800216 	blt	r3,r2,26520 <___vfprintf_internal_r+0x27c>
   26518:	10800c04 	addi	r2,r2,48
   2651c:	00000506 	br	26534 <___vfprintf_internal_r+0x290>
   26520:	d8c00e17 	ldw	r3,56(sp)
   26524:	18000226 	beq	r3,zero,26530 <___vfprintf_internal_r+0x28c>
   26528:	10800dc4 	addi	r2,r2,55
   2652c:	00000106 	br	26534 <___vfprintf_internal_r+0x290>
   26530:	108015c4 	addi	r2,r2,87
   26534:	e0800005 	stb	r2,0(fp)
   26538:	b02f883a 	mov	r23,r22
   2653c:	e7000044 	addi	fp,fp,1
   26540:	003fe806 	br	264e4 <__alt_data_end+0xfffe64e4>
   26544:	e6efc83a 	sub	r23,fp,sp
   26548:	9dc5c83a 	sub	r2,r19,r23
   2654c:	0080090e 	bge	zero,r2,26574 <___vfprintf_internal_r+0x2d0>
   26550:	e085883a 	add	r2,fp,r2
   26554:	01400c04 	movi	r5,48
   26558:	d8c00917 	ldw	r3,36(sp)
   2655c:	e009883a 	mov	r4,fp
   26560:	e0c0032e 	bgeu	fp,r3,26570 <___vfprintf_internal_r+0x2cc>
   26564:	e7000044 	addi	fp,fp,1
   26568:	21400005 	stb	r5,0(r4)
   2656c:	e0bffa1e 	bne	fp,r2,26558 <__alt_data_end+0xfffe6558>
   26570:	e6efc83a 	sub	r23,fp,sp
   26574:	d8c00b17 	ldw	r3,44(sp)
   26578:	4dd1883a 	add	r8,r9,r23
   2657c:	922dc83a 	sub	r22,r18,r8
   26580:	18001626 	beq	r3,zero,265dc <___vfprintf_internal_r+0x338>
   26584:	48000a26 	beq	r9,zero,265b0 <___vfprintf_internal_r+0x30c>
   26588:	00800b44 	movi	r2,45
   2658c:	d8800805 	stb	r2,32(sp)
   26590:	88800117 	ldw	r2,4(r17)
   26594:	01c00044 	movi	r7,1
   26598:	d9800804 	addi	r6,sp,32
   2659c:	880b883a 	mov	r5,r17
   265a0:	a009883a 	mov	r4,r20
   265a4:	103ee83a 	callr	r2
   265a8:	10004a1e 	bne	r2,zero,266d4 <___vfprintf_internal_r+0x430>
   265ac:	84000044 	addi	r16,r16,1
   265b0:	0580070e 	bge	zero,r22,265d0 <___vfprintf_internal_r+0x32c>
   265b4:	b00f883a 	mov	r7,r22
   265b8:	01800c04 	movi	r6,48
   265bc:	880b883a 	mov	r5,r17
   265c0:	a009883a 	mov	r4,r20
   265c4:	00262380 	call	26238 <print_repeat>
   265c8:	1000421e 	bne	r2,zero,266d4 <___vfprintf_internal_r+0x430>
   265cc:	85a1883a 	add	r16,r16,r22
   265d0:	e02d883a 	mov	r22,fp
   265d4:	bf2fc83a 	sub	r23,r23,fp
   265d8:	00002006 	br	2665c <___vfprintf_internal_r+0x3b8>
   265dc:	0580090e 	bge	zero,r22,26604 <___vfprintf_internal_r+0x360>
   265e0:	b00f883a 	mov	r7,r22
   265e4:	01800804 	movi	r6,32
   265e8:	880b883a 	mov	r5,r17
   265ec:	a009883a 	mov	r4,r20
   265f0:	da401015 	stw	r9,64(sp)
   265f4:	00262380 	call	26238 <print_repeat>
   265f8:	da401017 	ldw	r9,64(sp)
   265fc:	1000351e 	bne	r2,zero,266d4 <___vfprintf_internal_r+0x430>
   26600:	85a1883a 	add	r16,r16,r22
   26604:	483ff226 	beq	r9,zero,265d0 <__alt_data_end+0xfffe65d0>
   26608:	00800b44 	movi	r2,45
   2660c:	d8800805 	stb	r2,32(sp)
   26610:	88800117 	ldw	r2,4(r17)
   26614:	01c00044 	movi	r7,1
   26618:	d9800804 	addi	r6,sp,32
   2661c:	880b883a 	mov	r5,r17
   26620:	a009883a 	mov	r4,r20
   26624:	103ee83a 	callr	r2
   26628:	10002a1e 	bne	r2,zero,266d4 <___vfprintf_internal_r+0x430>
   2662c:	84000044 	addi	r16,r16,1
   26630:	003fe706 	br	265d0 <__alt_data_end+0xfffe65d0>
   26634:	b5bfffc4 	addi	r22,r22,-1
   26638:	b0800003 	ldbu	r2,0(r22)
   2663c:	01c00044 	movi	r7,1
   26640:	d9800804 	addi	r6,sp,32
   26644:	d8800805 	stb	r2,32(sp)
   26648:	88800117 	ldw	r2,4(r17)
   2664c:	880b883a 	mov	r5,r17
   26650:	a009883a 	mov	r4,r20
   26654:	103ee83a 	callr	r2
   26658:	10001e1e 	bne	r2,zero,266d4 <___vfprintf_internal_r+0x430>
   2665c:	8585c83a 	sub	r2,r16,r22
   26660:	b5c9883a 	add	r4,r22,r23
   26664:	e085883a 	add	r2,fp,r2
   26668:	013ff216 	blt	zero,r4,26634 <__alt_data_end+0xfffe6634>
   2666c:	1021883a 	mov	r16,r2
   26670:	dd800d17 	ldw	r22,52(sp)
   26674:	00004406 	br	26788 <___vfprintf_internal_r+0x4e4>
   26678:	00800044 	movi	r2,1
   2667c:	1480080e 	bge	r2,r18,266a0 <___vfprintf_internal_r+0x3fc>
   26680:	95ffffc4 	addi	r23,r18,-1
   26684:	b80f883a 	mov	r7,r23
   26688:	01800804 	movi	r6,32
   2668c:	880b883a 	mov	r5,r17
   26690:	a009883a 	mov	r4,r20
   26694:	00262380 	call	26238 <print_repeat>
   26698:	10000e1e 	bne	r2,zero,266d4 <___vfprintf_internal_r+0x430>
   2669c:	85e1883a 	add	r16,r16,r23
   266a0:	b0800017 	ldw	r2,0(r22)
   266a4:	01c00044 	movi	r7,1
   266a8:	d80d883a 	mov	r6,sp
   266ac:	d8800005 	stb	r2,0(sp)
   266b0:	88800117 	ldw	r2,4(r17)
   266b4:	880b883a 	mov	r5,r17
   266b8:	a009883a 	mov	r4,r20
   266bc:	b5c00104 	addi	r23,r22,4
   266c0:	103ee83a 	callr	r2
   266c4:	1000031e 	bne	r2,zero,266d4 <___vfprintf_internal_r+0x430>
   266c8:	84000044 	addi	r16,r16,1
   266cc:	b82d883a 	mov	r22,r23
   266d0:	00002d06 	br	26788 <___vfprintf_internal_r+0x4e4>
   266d4:	00bfffc4 	movi	r2,-1
   266d8:	00003106 	br	267a0 <___vfprintf_internal_r+0x4fc>
   266dc:	b5c00017 	ldw	r23,0(r22)
   266e0:	b7000104 	addi	fp,r22,4
   266e4:	b809883a 	mov	r4,r23
   266e8:	0025c680 	call	25c68 <strlen>
   266ec:	9091c83a 	sub	r8,r18,r2
   266f0:	102d883a 	mov	r22,r2
   266f4:	0200090e 	bge	zero,r8,2671c <___vfprintf_internal_r+0x478>
   266f8:	400f883a 	mov	r7,r8
   266fc:	01800804 	movi	r6,32
   26700:	880b883a 	mov	r5,r17
   26704:	a009883a 	mov	r4,r20
   26708:	da001015 	stw	r8,64(sp)
   2670c:	00262380 	call	26238 <print_repeat>
   26710:	da001017 	ldw	r8,64(sp)
   26714:	103fef1e 	bne	r2,zero,266d4 <__alt_data_end+0xfffe66d4>
   26718:	8221883a 	add	r16,r16,r8
   2671c:	88800117 	ldw	r2,4(r17)
   26720:	b00f883a 	mov	r7,r22
   26724:	b80d883a 	mov	r6,r23
   26728:	880b883a 	mov	r5,r17
   2672c:	a009883a 	mov	r4,r20
   26730:	103ee83a 	callr	r2
   26734:	103fe71e 	bne	r2,zero,266d4 <__alt_data_end+0xfffe66d4>
   26738:	85a1883a 	add	r16,r16,r22
   2673c:	e02d883a 	mov	r22,fp
   26740:	00001106 	br	26788 <___vfprintf_internal_r+0x4e4>
   26744:	00c00044 	movi	r3,1
   26748:	04ffffc4 	movi	r19,-1
   2674c:	d8000e15 	stw	zero,56(sp)
   26750:	d8c00a15 	stw	r3,40(sp)
   26754:	05400284 	movi	r21,10
   26758:	9825883a 	mov	r18,r19
   2675c:	d8000c15 	stw	zero,48(sp)
   26760:	d8000b15 	stw	zero,44(sp)
   26764:	182f883a 	mov	r23,r3
   26768:	00000806 	br	2678c <___vfprintf_internal_r+0x4e8>
   2676c:	ddc00b15 	stw	r23,44(sp)
   26770:	05c00084 	movi	r23,2
   26774:	00000506 	br	2678c <___vfprintf_internal_r+0x4e8>
   26778:	00c00044 	movi	r3,1
   2677c:	d8c00c15 	stw	r3,48(sp)
   26780:	05c000c4 	movi	r23,3
   26784:	00000106 	br	2678c <___vfprintf_internal_r+0x4e8>
   26788:	002f883a 	mov	r23,zero
   2678c:	d8c00f17 	ldw	r3,60(sp)
   26790:	18c00044 	addi	r3,r3,1
   26794:	d8c00f15 	stw	r3,60(sp)
   26798:	003edc06 	br	2630c <__alt_data_end+0xfffe630c>
   2679c:	8005883a 	mov	r2,r16
   267a0:	dfc01a17 	ldw	ra,104(sp)
   267a4:	df001917 	ldw	fp,100(sp)
   267a8:	ddc01817 	ldw	r23,96(sp)
   267ac:	dd801717 	ldw	r22,92(sp)
   267b0:	dd401617 	ldw	r21,88(sp)
   267b4:	dd001517 	ldw	r20,84(sp)
   267b8:	dcc01417 	ldw	r19,80(sp)
   267bc:	dc801317 	ldw	r18,76(sp)
   267c0:	dc401217 	ldw	r17,72(sp)
   267c4:	dc001117 	ldw	r16,68(sp)
   267c8:	dec01b04 	addi	sp,sp,108
   267cc:	f800283a 	ret

000267d0 <__vfprintf_internal>:
   267d0:	008000f4 	movhi	r2,3
   267d4:	10bf4704 	addi	r2,r2,-740
   267d8:	300f883a 	mov	r7,r6
   267dc:	280d883a 	mov	r6,r5
   267e0:	200b883a 	mov	r5,r4
   267e4:	11000017 	ldw	r4,0(r2)
   267e8:	00262a41 	jmpi	262a4 <___vfprintf_internal_r>

000267ec <__sfvwrite_small_dev>:
   267ec:	2880000b 	ldhu	r2,0(r5)
   267f0:	1080020c 	andi	r2,r2,8
   267f4:	10002126 	beq	r2,zero,2687c <__sfvwrite_small_dev+0x90>
   267f8:	2880008f 	ldh	r2,2(r5)
   267fc:	defffa04 	addi	sp,sp,-24
   26800:	dc000015 	stw	r16,0(sp)
   26804:	dfc00515 	stw	ra,20(sp)
   26808:	dd000415 	stw	r20,16(sp)
   2680c:	dcc00315 	stw	r19,12(sp)
   26810:	dc800215 	stw	r18,8(sp)
   26814:	dc400115 	stw	r17,4(sp)
   26818:	2821883a 	mov	r16,r5
   2681c:	10001216 	blt	r2,zero,26868 <__sfvwrite_small_dev+0x7c>
   26820:	2027883a 	mov	r19,r4
   26824:	3025883a 	mov	r18,r6
   26828:	3823883a 	mov	r17,r7
   2682c:	05010004 	movi	r20,1024
   26830:	04400b0e 	bge	zero,r17,26860 <__sfvwrite_small_dev+0x74>
   26834:	880f883a 	mov	r7,r17
   26838:	a440010e 	bge	r20,r17,26840 <__sfvwrite_small_dev+0x54>
   2683c:	01c10004 	movi	r7,1024
   26840:	8140008f 	ldh	r5,2(r16)
   26844:	900d883a 	mov	r6,r18
   26848:	9809883a 	mov	r4,r19
   2684c:	00269ac0 	call	269ac <_write_r>
   26850:	0080050e 	bge	zero,r2,26868 <__sfvwrite_small_dev+0x7c>
   26854:	88a3c83a 	sub	r17,r17,r2
   26858:	90a5883a 	add	r18,r18,r2
   2685c:	003ff406 	br	26830 <__alt_data_end+0xfffe6830>
   26860:	0005883a 	mov	r2,zero
   26864:	00000706 	br	26884 <__sfvwrite_small_dev+0x98>
   26868:	8080000b 	ldhu	r2,0(r16)
   2686c:	10801014 	ori	r2,r2,64
   26870:	8080000d 	sth	r2,0(r16)
   26874:	00bfffc4 	movi	r2,-1
   26878:	00000206 	br	26884 <__sfvwrite_small_dev+0x98>
   2687c:	00bfffc4 	movi	r2,-1
   26880:	f800283a 	ret
   26884:	dfc00517 	ldw	ra,20(sp)
   26888:	dd000417 	ldw	r20,16(sp)
   2688c:	dcc00317 	ldw	r19,12(sp)
   26890:	dc800217 	ldw	r18,8(sp)
   26894:	dc400117 	ldw	r17,4(sp)
   26898:	dc000017 	ldw	r16,0(sp)
   2689c:	dec00604 	addi	sp,sp,24
   268a0:	f800283a 	ret

000268a4 <__sfvwrite_small_str>:
   268a4:	2880000b 	ldhu	r2,0(r5)
   268a8:	10c0020c 	andi	r3,r2,8
   268ac:	18002026 	beq	r3,zero,26930 <__sfvwrite_small_str+0x8c>
   268b0:	28c0008f 	ldh	r3,2(r5)
   268b4:	defffd04 	addi	sp,sp,-12
   268b8:	dc000015 	stw	r16,0(sp)
   268bc:	dfc00215 	stw	ra,8(sp)
   268c0:	dc400115 	stw	r17,4(sp)
   268c4:	2821883a 	mov	r16,r5
   268c8:	1800150e 	bge	r3,zero,26920 <__sfvwrite_small_str+0x7c>
   268cc:	10c0800c 	andi	r3,r2,512
   268d0:	18001326 	beq	r3,zero,26920 <__sfvwrite_small_str+0x7c>
   268d4:	2c400517 	ldw	r17,20(r5)
   268d8:	89c0030e 	bge	r17,r7,268e8 <__sfvwrite_small_str+0x44>
   268dc:	10c0200c 	andi	r3,r2,128
   268e0:	18000326 	beq	r3,zero,268f0 <__sfvwrite_small_str+0x4c>
   268e4:	00000e06 	br	26920 <__sfvwrite_small_str+0x7c>
   268e8:	3c40010e 	bge	r7,r17,268f0 <__sfvwrite_small_str+0x4c>
   268ec:	3823883a 	mov	r17,r7
   268f0:	81000417 	ldw	r4,16(r16)
   268f4:	300b883a 	mov	r5,r6
   268f8:	880d883a 	mov	r6,r17
   268fc:	002694c0 	call	2694c <memmove>
   26900:	80800517 	ldw	r2,20(r16)
   26904:	1445c83a 	sub	r2,r2,r17
   26908:	80800515 	stw	r2,20(r16)
   2690c:	80800417 	ldw	r2,16(r16)
   26910:	1463883a 	add	r17,r2,r17
   26914:	84400415 	stw	r17,16(r16)
   26918:	0005883a 	mov	r2,zero
   2691c:	00000606 	br	26938 <__sfvwrite_small_str+0x94>
   26920:	10801014 	ori	r2,r2,64
   26924:	8080000d 	sth	r2,0(r16)
   26928:	00bfffc4 	movi	r2,-1
   2692c:	00000206 	br	26938 <__sfvwrite_small_str+0x94>
   26930:	00bfffc4 	movi	r2,-1
   26934:	f800283a 	ret
   26938:	dfc00217 	ldw	ra,8(sp)
   2693c:	dc400117 	ldw	r17,4(sp)
   26940:	dc000017 	ldw	r16,0(sp)
   26944:	dec00304 	addi	sp,sp,12
   26948:	f800283a 	ret

0002694c <memmove>:
   2694c:	2005883a 	mov	r2,r4
   26950:	218f883a 	add	r7,r4,r6
   26954:	29000236 	bltu	r5,r4,26960 <memmove+0x14>
   26958:	1007883a 	mov	r3,r2
   2695c:	00000c06 	br	26990 <memmove+0x44>
   26960:	2987883a 	add	r3,r5,r6
   26964:	20fffc2e 	bgeu	r4,r3,26958 <__alt_data_end+0xfffe6958>
   26968:	380b883a 	mov	r5,r7
   2696c:	30cdc83a 	sub	r6,r6,r3
   26970:	1989883a 	add	r4,r3,r6
   26974:	20000526 	beq	r4,zero,2698c <memmove+0x40>
   26978:	18ffffc4 	addi	r3,r3,-1
   2697c:	19000003 	ldbu	r4,0(r3)
   26980:	297fffc4 	addi	r5,r5,-1
   26984:	29000005 	stb	r4,0(r5)
   26988:	003ff906 	br	26970 <__alt_data_end+0xfffe6970>
   2698c:	f800283a 	ret
   26990:	19c00526 	beq	r3,r7,269a8 <memmove+0x5c>
   26994:	29000003 	ldbu	r4,0(r5)
   26998:	18c00044 	addi	r3,r3,1
   2699c:	29400044 	addi	r5,r5,1
   269a0:	193fffc5 	stb	r4,-1(r3)
   269a4:	003ffa06 	br	26990 <__alt_data_end+0xfffe6990>
   269a8:	f800283a 	ret

000269ac <_write_r>:
   269ac:	defffd04 	addi	sp,sp,-12
   269b0:	dc000015 	stw	r16,0(sp)
   269b4:	040000f4 	movhi	r16,3
   269b8:	dc400115 	stw	r17,4(sp)
   269bc:	84002204 	addi	r16,r16,136
   269c0:	2023883a 	mov	r17,r4
   269c4:	2809883a 	mov	r4,r5
   269c8:	300b883a 	mov	r5,r6
   269cc:	380d883a 	mov	r6,r7
   269d0:	dfc00215 	stw	ra,8(sp)
   269d4:	80000015 	stw	zero,0(r16)
   269d8:	0026bd80 	call	26bd8 <write>
   269dc:	00ffffc4 	movi	r3,-1
   269e0:	10c0031e 	bne	r2,r3,269f0 <_write_r+0x44>
   269e4:	80c00017 	ldw	r3,0(r16)
   269e8:	18000126 	beq	r3,zero,269f0 <_write_r+0x44>
   269ec:	88c00015 	stw	r3,0(r17)
   269f0:	dfc00217 	ldw	ra,8(sp)
   269f4:	dc400117 	ldw	r17,4(sp)
   269f8:	dc000017 	ldw	r16,0(sp)
   269fc:	dec00304 	addi	sp,sp,12
   26a00:	f800283a 	ret

00026a04 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   26a04:	defffc04 	addi	sp,sp,-16
   26a08:	df000315 	stw	fp,12(sp)
   26a0c:	df000304 	addi	fp,sp,12
   26a10:	e13ffd15 	stw	r4,-12(fp)
   26a14:	e17ffe15 	stw	r5,-8(fp)
   26a18:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   26a1c:	e0fffe17 	ldw	r3,-8(fp)
   26a20:	e0bffd17 	ldw	r2,-12(fp)
   26a24:	18800c26 	beq	r3,r2,26a58 <alt_load_section+0x54>
  {
    while( to != end )
   26a28:	00000806 	br	26a4c <alt_load_section+0x48>
    {
      *to++ = *from++;
   26a2c:	e0bffe17 	ldw	r2,-8(fp)
   26a30:	10c00104 	addi	r3,r2,4
   26a34:	e0fffe15 	stw	r3,-8(fp)
   26a38:	e0fffd17 	ldw	r3,-12(fp)
   26a3c:	19000104 	addi	r4,r3,4
   26a40:	e13ffd15 	stw	r4,-12(fp)
   26a44:	18c00017 	ldw	r3,0(r3)
   26a48:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   26a4c:	e0fffe17 	ldw	r3,-8(fp)
   26a50:	e0bfff17 	ldw	r2,-4(fp)
   26a54:	18bff51e 	bne	r3,r2,26a2c <__alt_data_end+0xfffe6a2c>
    {
      *to++ = *from++;
    }
  }
}
   26a58:	0001883a 	nop
   26a5c:	e037883a 	mov	sp,fp
   26a60:	df000017 	ldw	fp,0(sp)
   26a64:	dec00104 	addi	sp,sp,4
   26a68:	f800283a 	ret

00026a6c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   26a6c:	defffe04 	addi	sp,sp,-8
   26a70:	dfc00115 	stw	ra,4(sp)
   26a74:	df000015 	stw	fp,0(sp)
   26a78:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   26a7c:	018000f4 	movhi	r6,3
   26a80:	31bf5104 	addi	r6,r6,-700
   26a84:	014000f4 	movhi	r5,3
   26a88:	297e8504 	addi	r5,r5,-1516
   26a8c:	010000f4 	movhi	r4,3
   26a90:	213f5104 	addi	r4,r4,-700
   26a94:	0026a040 	call	26a04 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   26a98:	018000b4 	movhi	r6,2
   26a9c:	31808c04 	addi	r6,r6,560
   26aa0:	014000b4 	movhi	r5,2
   26aa4:	29400804 	addi	r5,r5,32
   26aa8:	010000b4 	movhi	r4,2
   26aac:	21000804 	addi	r4,r4,32
   26ab0:	0026a040 	call	26a04 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   26ab4:	018000f4 	movhi	r6,3
   26ab8:	31be8504 	addi	r6,r6,-1516
   26abc:	014000f4 	movhi	r5,3
   26ac0:	2967f604 	addi	r5,r5,-24616
   26ac4:	010000f4 	movhi	r4,3
   26ac8:	2127f604 	addi	r4,r4,-24616
   26acc:	0026a040 	call	26a04 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   26ad0:	0028d140 	call	28d14 <alt_dcache_flush_all>
  alt_icache_flush_all();
   26ad4:	0028f900 	call	28f90 <alt_icache_flush_all>
}
   26ad8:	0001883a 	nop
   26adc:	e037883a 	mov	sp,fp
   26ae0:	dfc00117 	ldw	ra,4(sp)
   26ae4:	df000017 	ldw	fp,0(sp)
   26ae8:	dec00204 	addi	sp,sp,8
   26aec:	f800283a 	ret

00026af0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   26af0:	defffd04 	addi	sp,sp,-12
   26af4:	dfc00215 	stw	ra,8(sp)
   26af8:	df000115 	stw	fp,4(sp)
   26afc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   26b00:	0009883a 	mov	r4,zero
   26b04:	0026d0c0 	call	26d0c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   26b08:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   26b0c:	0026d440 	call	26d44 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   26b10:	018000f4 	movhi	r6,3
   26b14:	31be6d04 	addi	r6,r6,-1612
   26b18:	014000f4 	movhi	r5,3
   26b1c:	297e6d04 	addi	r5,r5,-1612
   26b20:	010000f4 	movhi	r4,3
   26b24:	213e6d04 	addi	r4,r4,-1612
   26b28:	00293340 	call	29334 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   26b2c:	0028e400 	call	28e40 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   26b30:	010000f4 	movhi	r4,3
   26b34:	2123a804 	addi	r4,r4,-29024
   26b38:	0029bac0 	call	29bac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   26b3c:	d0a0e317 	ldw	r2,-31860(gp)
   26b40:	d0e0e417 	ldw	r3,-31856(gp)
   26b44:	d120e517 	ldw	r4,-31852(gp)
   26b48:	200d883a 	mov	r6,r4
   26b4c:	180b883a 	mov	r5,r3
   26b50:	1009883a 	mov	r4,r2
   26b54:	00227ec0 	call	227ec <main>
   26b58:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   26b5c:	01000044 	movi	r4,1
   26b60:	0028c3c0 	call	28c3c <close>
  exit (result);
   26b64:	e13fff17 	ldw	r4,-4(fp)
   26b68:	0029bc00 	call	29bc0 <exit>

00026b6c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   26b6c:	defffd04 	addi	sp,sp,-12
   26b70:	dfc00215 	stw	ra,8(sp)
   26b74:	df000115 	stw	fp,4(sp)
   26b78:	df000104 	addi	fp,sp,4
   26b7c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   26b80:	e13fff17 	ldw	r4,-4(fp)
   26b84:	0028bdc0 	call	28bdc <alt_busy_sleep>
}
   26b88:	e037883a 	mov	sp,fp
   26b8c:	dfc00117 	ldw	ra,4(sp)
   26b90:	df000017 	ldw	fp,0(sp)
   26b94:	dec00204 	addi	sp,sp,8
   26b98:	f800283a 	ret

00026b9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26b9c:	defffe04 	addi	sp,sp,-8
   26ba0:	dfc00115 	stw	ra,4(sp)
   26ba4:	df000015 	stw	fp,0(sp)
   26ba8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26bac:	d0a00f17 	ldw	r2,-32708(gp)
   26bb0:	10000326 	beq	r2,zero,26bc0 <alt_get_errno+0x24>
   26bb4:	d0a00f17 	ldw	r2,-32708(gp)
   26bb8:	103ee83a 	callr	r2
   26bbc:	00000106 	br	26bc4 <alt_get_errno+0x28>
   26bc0:	d0a0e204 	addi	r2,gp,-31864
}
   26bc4:	e037883a 	mov	sp,fp
   26bc8:	dfc00117 	ldw	ra,4(sp)
   26bcc:	df000017 	ldw	fp,0(sp)
   26bd0:	dec00204 	addi	sp,sp,8
   26bd4:	f800283a 	ret

00026bd8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   26bd8:	defff904 	addi	sp,sp,-28
   26bdc:	dfc00615 	stw	ra,24(sp)
   26be0:	df000515 	stw	fp,20(sp)
   26be4:	df000504 	addi	fp,sp,20
   26be8:	e13ffd15 	stw	r4,-12(fp)
   26bec:	e17ffe15 	stw	r5,-8(fp)
   26bf0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   26bf4:	e0bffd17 	ldw	r2,-12(fp)
   26bf8:	10000816 	blt	r2,zero,26c1c <write+0x44>
   26bfc:	01400304 	movi	r5,12
   26c00:	e13ffd17 	ldw	r4,-12(fp)
   26c04:	0022c300 	call	22c30 <__mulsi3>
   26c08:	1007883a 	mov	r3,r2
   26c0c:	008000f4 	movhi	r2,3
   26c10:	10bee004 	addi	r2,r2,-1152
   26c14:	1885883a 	add	r2,r3,r2
   26c18:	00000106 	br	26c20 <write+0x48>
   26c1c:	0005883a 	mov	r2,zero
   26c20:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   26c24:	e0bffb17 	ldw	r2,-20(fp)
   26c28:	10002126 	beq	r2,zero,26cb0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   26c2c:	e0bffb17 	ldw	r2,-20(fp)
   26c30:	10800217 	ldw	r2,8(r2)
   26c34:	108000cc 	andi	r2,r2,3
   26c38:	10001826 	beq	r2,zero,26c9c <write+0xc4>
   26c3c:	e0bffb17 	ldw	r2,-20(fp)
   26c40:	10800017 	ldw	r2,0(r2)
   26c44:	10800617 	ldw	r2,24(r2)
   26c48:	10001426 	beq	r2,zero,26c9c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   26c4c:	e0bffb17 	ldw	r2,-20(fp)
   26c50:	10800017 	ldw	r2,0(r2)
   26c54:	10800617 	ldw	r2,24(r2)
   26c58:	e0ffff17 	ldw	r3,-4(fp)
   26c5c:	180d883a 	mov	r6,r3
   26c60:	e17ffe17 	ldw	r5,-8(fp)
   26c64:	e13ffb17 	ldw	r4,-20(fp)
   26c68:	103ee83a 	callr	r2
   26c6c:	e0bffc15 	stw	r2,-16(fp)
   26c70:	e0bffc17 	ldw	r2,-16(fp)
   26c74:	1000070e 	bge	r2,zero,26c94 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   26c78:	0026b9c0 	call	26b9c <alt_get_errno>
   26c7c:	1007883a 	mov	r3,r2
   26c80:	e0bffc17 	ldw	r2,-16(fp)
   26c84:	0085c83a 	sub	r2,zero,r2
   26c88:	18800015 	stw	r2,0(r3)
        return -1;
   26c8c:	00bfffc4 	movi	r2,-1
   26c90:	00000c06 	br	26cc4 <write+0xec>
      }
      return rval;
   26c94:	e0bffc17 	ldw	r2,-16(fp)
   26c98:	00000a06 	br	26cc4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   26c9c:	0026b9c0 	call	26b9c <alt_get_errno>
   26ca0:	1007883a 	mov	r3,r2
   26ca4:	00800344 	movi	r2,13
   26ca8:	18800015 	stw	r2,0(r3)
   26cac:	00000406 	br	26cc0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   26cb0:	0026b9c0 	call	26b9c <alt_get_errno>
   26cb4:	1007883a 	mov	r3,r2
   26cb8:	00801444 	movi	r2,81
   26cbc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   26cc0:	00bfffc4 	movi	r2,-1
}
   26cc4:	e037883a 	mov	sp,fp
   26cc8:	dfc00117 	ldw	ra,4(sp)
   26ccc:	df000017 	ldw	fp,0(sp)
   26cd0:	dec00204 	addi	sp,sp,8
   26cd4:	f800283a 	ret

00026cd8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   26cd8:	defffd04 	addi	sp,sp,-12
   26cdc:	dfc00215 	stw	ra,8(sp)
   26ce0:	df000115 	stw	fp,4(sp)
   26ce4:	df000104 	addi	fp,sp,4
   26ce8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   26cec:	d1600c04 	addi	r5,gp,-32720
   26cf0:	e13fff17 	ldw	r4,-4(fp)
   26cf4:	0028d9c0 	call	28d9c <alt_dev_llist_insert>
}
   26cf8:	e037883a 	mov	sp,fp
   26cfc:	dfc00117 	ldw	ra,4(sp)
   26d00:	df000017 	ldw	fp,0(sp)
   26d04:	dec00204 	addi	sp,sp,8
   26d08:	f800283a 	ret

00026d0c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   26d0c:	defffd04 	addi	sp,sp,-12
   26d10:	dfc00215 	stw	ra,8(sp)
   26d14:	df000115 	stw	fp,4(sp)
   26d18:	df000104 	addi	fp,sp,4
   26d1c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   26d20:	00299200 	call	29920 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   26d24:	00800044 	movi	r2,1
   26d28:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   26d2c:	0001883a 	nop
   26d30:	e037883a 	mov	sp,fp
   26d34:	dfc00117 	ldw	ra,4(sp)
   26d38:	df000017 	ldw	fp,0(sp)
   26d3c:	dec00204 	addi	sp,sp,8
   26d40:	f800283a 	ret

00026d44 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   26d44:	defffe04 	addi	sp,sp,-8
   26d48:	dfc00115 	stw	ra,4(sp)
   26d4c:	df000015 	stw	fp,0(sp)
   26d50:	d839883a 	mov	fp,sp
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   26d54:	010000f4 	movhi	r4,3
   26d58:	213ebd04 	addi	r4,r4,-1292
   26d5c:	0026fd40 	call	26fd4 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   26d60:	010000f4 	movhi	r4,3
   26d64:	213ecb04 	addi	r4,r4,-1236
   26d68:	0026cd80 	call	26cd8 <alt_dev_reg>
}
   26d6c:	0001883a 	nop
   26d70:	e037883a 	mov	sp,fp
   26d74:	dfc00117 	ldw	ra,4(sp)
   26d78:	df000017 	ldw	fp,0(sp)
   26d7c:	dec00204 	addi	sp,sp,8
   26d80:	f800283a 	ret

00026d84 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   26d84:	defff904 	addi	sp,sp,-28
   26d88:	dfc00615 	stw	ra,24(sp)
   26d8c:	df000515 	stw	fp,20(sp)
   26d90:	df000504 	addi	fp,sp,20
   26d94:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   26d98:	008000b4 	movhi	r2,2
   26d9c:	10a1a804 	addi	r2,r2,-31072
   26da0:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   26da4:	e0bfff17 	ldw	r2,-4(fp)
   26da8:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   26dac:	e0bffc17 	ldw	r2,-16(fp)
   26db0:	10800717 	ldw	r2,28(r2)
   26db4:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   26db8:	e0bffd17 	ldw	r2,-12(fp)
   26dbc:	10800217 	ldw	r2,8(r2)
   26dc0:	10800098 	cmpnei	r2,r2,2
   26dc4:	1000251e 	bne	r2,zero,26e5c <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   26dc8:	e0bffd17 	ldw	r2,-12(fp)
   26dcc:	10c00017 	ldw	r3,0(r2)
   26dd0:	e0bffd17 	ldw	r2,-12(fp)
   26dd4:	10800117 	ldw	r2,4(r2)
   26dd8:	e13ffe04 	addi	r4,fp,-8
   26ddc:	200f883a 	mov	r7,r4
   26de0:	100d883a 	mov	r6,r2
   26de4:	180b883a 	mov	r5,r3
   26de8:	e13ffc17 	ldw	r4,-16(fp)
   26dec:	00275340 	call	27534 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   26df0:	e0bffd17 	ldw	r2,-12(fp)
   26df4:	10c00117 	ldw	r3,4(r2)
   26df8:	e0bffe17 	ldw	r2,-8(fp)
   26dfc:	1887c83a 	sub	r3,r3,r2
   26e00:	e0bffd17 	ldw	r2,-12(fp)
   26e04:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   26e08:	e0bffd17 	ldw	r2,-12(fp)
   26e0c:	10c00017 	ldw	r3,0(r2)
   26e10:	e0bffe17 	ldw	r2,-8(fp)
   26e14:	1887883a 	add	r3,r3,r2
   26e18:	e0bffd17 	ldw	r2,-12(fp)
   26e1c:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   26e20:	e0bffd17 	ldw	r2,-12(fp)
   26e24:	10800117 	ldw	r2,4(r2)
   26e28:	10000c26 	beq	r2,zero,26e5c <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   26e2c:	01400704 	movi	r5,28
   26e30:	e13ffc17 	ldw	r4,-16(fp)
   26e34:	00286ec0 	call	286ec <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   26e38:	01400084 	movi	r5,2
   26e3c:	e13ffc17 	ldw	r4,-16(fp)
   26e40:	00287900 	call	28790 <alt_avalon_i2c_int_enable>
   26e44:	00000e06 	br	26e80 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   26e48:	e0bffb17 	ldw	r2,-20(fp)
   26e4c:	10bfffc4 	addi	r2,r2,-1
   26e50:	e0bffb15 	stw	r2,-20(fp)
   26e54:	e0bffb17 	ldw	r2,-20(fp)
   26e58:	10000426 	beq	r2,zero,26e6c <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   26e5c:	e13ffc17 	ldw	r4,-16(fp)
   26e60:	00274f00 	call	274f0 <alt_avalon_i2c_is_busy>
   26e64:	103ff81e 	bne	r2,zero,26e48 <__alt_data_end+0xfffe6e48>
   26e68:	00000106 	br	26e70 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   26e6c:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   26e70:	e13ffc17 	ldw	r4,-16(fp)
   26e74:	00271980 	call	27198 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   26e78:	e0bffd17 	ldw	r2,-12(fp)
   26e7c:	10000215 	stw	zero,8(r2)
}
   26e80:	e037883a 	mov	sp,fp
   26e84:	dfc00117 	ldw	ra,4(sp)
   26e88:	df000017 	ldw	fp,0(sp)
   26e8c:	dec00204 	addi	sp,sp,8
   26e90:	f800283a 	ret

00026e94 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   26e94:	defffc04 	addi	sp,sp,-16
   26e98:	dfc00315 	stw	ra,12(sp)
   26e9c:	df000215 	stw	fp,8(sp)
   26ea0:	df000204 	addi	fp,sp,8
   26ea4:	e13ffe15 	stw	r4,-8(fp)
   26ea8:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   26eac:	e0bfff17 	ldw	r2,-4(fp)
   26eb0:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   26eb4:	e1ffff17 	ldw	r7,-4(fp)
   26eb8:	000d883a 	mov	r6,zero
   26ebc:	014000b4 	movhi	r5,2
   26ec0:	295b6104 	addi	r5,r5,28036
   26ec4:	e13ffe17 	ldw	r4,-8(fp)
   26ec8:	0026f800 	call	26f80 <alt_avalon_i2c_register_callback>
}
   26ecc:	0001883a 	nop
   26ed0:	e037883a 	mov	sp,fp
   26ed4:	dfc00117 	ldw	ra,4(sp)
   26ed8:	df000017 	ldw	fp,0(sp)
   26edc:	dec00204 	addi	sp,sp,8
   26ee0:	f800283a 	ret

00026ee4 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   26ee4:	defff904 	addi	sp,sp,-28
   26ee8:	dfc00615 	stw	ra,24(sp)
   26eec:	df000515 	stw	fp,20(sp)
   26ef0:	df000504 	addi	fp,sp,20
   26ef4:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   26ef8:	e0bfff17 	ldw	r2,-4(fp)
   26efc:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   26f00:	014007c4 	movi	r5,31
   26f04:	e13ffb17 	ldw	r4,-20(fp)
   26f08:	00287280 	call	28728 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   26f0c:	01400704 	movi	r5,28
   26f10:	e13ffb17 	ldw	r4,-20(fp)
   26f14:	00286ec0 	call	286ec <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   26f18:	e0bffb17 	ldw	r2,-20(fp)
   26f1c:	10800617 	ldw	r2,24(r2)
   26f20:	10001126 	beq	r2,zero,26f68 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26f24:	0005303a 	rdctl	r2,status
   26f28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26f2c:	e0fffd17 	ldw	r3,-12(fp)
   26f30:	00bfff84 	movi	r2,-2
   26f34:	1884703a 	and	r2,r3,r2
   26f38:	1001703a 	wrctl	status,r2
  
  return context;
   26f3c:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   26f40:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   26f44:	e0bffb17 	ldw	r2,-20(fp)
   26f48:	10800617 	ldw	r2,24(r2)
   26f4c:	e13ffb17 	ldw	r4,-20(fp)
   26f50:	103ee83a 	callr	r2
   26f54:	e0bffc17 	ldw	r2,-16(fp)
   26f58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26f5c:	e0bffe17 	ldw	r2,-8(fp)
   26f60:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   26f64:	0001883a 	nop
   26f68:	0001883a 	nop
}
   26f6c:	e037883a 	mov	sp,fp
   26f70:	dfc00117 	ldw	ra,4(sp)
   26f74:	df000017 	ldw	fp,0(sp)
   26f78:	dec00204 	addi	sp,sp,8
   26f7c:	f800283a 	ret

00026f80 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   26f80:	defffb04 	addi	sp,sp,-20
   26f84:	df000415 	stw	fp,16(sp)
   26f88:	df000404 	addi	fp,sp,16
   26f8c:	e13ffc15 	stw	r4,-16(fp)
   26f90:	e17ffd15 	stw	r5,-12(fp)
   26f94:	e1bffe15 	stw	r6,-8(fp)
   26f98:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   26f9c:	e0bffc17 	ldw	r2,-16(fp)
   26fa0:	e0fffd17 	ldw	r3,-12(fp)
   26fa4:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   26fa8:	e0bffc17 	ldw	r2,-16(fp)
   26fac:	e0ffff17 	ldw	r3,-4(fp)
   26fb0:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   26fb4:	e0bffc17 	ldw	r2,-16(fp)
   26fb8:	e0fffe17 	ldw	r3,-8(fp)
   26fbc:	10c00815 	stw	r3,32(r2)

    return ;
   26fc0:	0001883a 	nop
}
   26fc4:	e037883a 	mov	sp,fp
   26fc8:	df000017 	ldw	fp,0(sp)
   26fcc:	dec00104 	addi	sp,sp,4
   26fd0:	f800283a 	ret

00026fd4 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   26fd4:	defff704 	addi	sp,sp,-36
   26fd8:	dfc00815 	stw	ra,32(sp)
   26fdc:	df000715 	stw	fp,28(sp)
   26fe0:	df000704 	addi	fp,sp,28
   26fe4:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   26fe8:	e13fff17 	ldw	r4,-4(fp)
   26fec:	00271980 	call	27198 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   26ff0:	014007c4 	movi	r5,31
   26ff4:	e13fff17 	ldw	r4,-4(fp)
   26ff8:	00287280 	call	28728 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   26ffc:	01400704 	movi	r5,28
   27000:	e13fff17 	ldw	r4,-4(fp)
   27004:	00286ec0 	call	286ec <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   27008:	014000c4 	movi	r5,3
   2700c:	e13fff17 	ldw	r4,-4(fp)
   27010:	00289340 	call	28934 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   27014:	014000c4 	movi	r5,3
   27018:	e13fff17 	ldw	r4,-4(fp)
   2701c:	00288840 	call	28884 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   27020:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   27024:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   27028:	e0bffb04 	addi	r2,fp,-20
   2702c:	018000b4 	movhi	r6,2
   27030:	31a1a804 	addi	r6,r6,-31072
   27034:	100b883a 	mov	r5,r2
   27038:	e13fff17 	ldw	r4,-4(fp)
   2703c:	00273f40 	call	273f4 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   27040:	e0bffb04 	addi	r2,fp,-20
   27044:	100b883a 	mov	r5,r2
   27048:	e13fff17 	ldw	r4,-4(fp)
   2704c:	00272940 	call	27294 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   27050:	d1600804 	addi	r5,gp,-32736
   27054:	e13fff17 	ldw	r4,-4(fp)
   27058:	0028d9c0 	call	28d9c <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   2705c:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   27060:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   27064:	e0bffa17 	ldw	r2,-24(fp)
   27068:	10000c1e 	bne	r2,zero,2709c <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   2706c:	e0bfff17 	ldw	r2,-4(fp)
   27070:	10c00417 	ldw	r3,16(r2)
   27074:	e0bfff17 	ldw	r2,-4(fp)
   27078:	10800517 	ldw	r2,20(r2)
   2707c:	d8000015 	stw	zero,0(sp)
   27080:	e1ffff17 	ldw	r7,-4(fp)
   27084:	018000b4 	movhi	r6,2
   27088:	319bb904 	addi	r6,r6,28388
   2708c:	100b883a 	mov	r5,r2
   27090:	1809883a 	mov	r4,r3
   27094:	0028fb00 	call	28fb0 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   27098:	00000406 	br	270ac <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   2709c:	010000f4 	movhi	r4,3
   270a0:	213e7a04 	addi	r4,r4,-1560
   270a4:	00296340 	call	29634 <alt_printf>
    }

    return;
   270a8:	0001883a 	nop

}
   270ac:	e037883a 	mov	sp,fp
   270b0:	dfc00117 	ldw	ra,4(sp)
   270b4:	df000017 	ldw	fp,0(sp)
   270b8:	dec00204 	addi	sp,sp,8
   270bc:	f800283a 	ret

000270c0 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   270c0:	defffc04 	addi	sp,sp,-16
   270c4:	dfc00315 	stw	ra,12(sp)
   270c8:	df000215 	stw	fp,8(sp)
   270cc:	df000204 	addi	fp,sp,8
   270d0:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   270d4:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   270d8:	d1600804 	addi	r5,gp,-32736
   270dc:	e13fff17 	ldw	r4,-4(fp)
   270e0:	0028f000 	call	28f00 <alt_find_dev>
   270e4:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   270e8:	e0bffe17 	ldw	r2,-8(fp)
}
   270ec:	e037883a 	mov	sp,fp
   270f0:	dfc00117 	ldw	ra,4(sp)
   270f4:	df000017 	ldw	fp,0(sp)
   270f8:	dec00204 	addi	sp,sp,8
   270fc:	f800283a 	ret

00027100 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   27100:	defffc04 	addi	sp,sp,-16
   27104:	df000315 	stw	fp,12(sp)
   27108:	df000304 	addi	fp,sp,12
   2710c:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   27110:	e0bfff17 	ldw	r2,-4(fp)
   27114:	10800717 	ldw	r2,28(r2)
   27118:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   2711c:	e0bfff17 	ldw	r2,-4(fp)
   27120:	10800317 	ldw	r2,12(r2)
   27124:	10800204 	addi	r2,r2,8
   27128:	10800037 	ldwio	r2,0(r2)
   2712c:	1080004c 	andi	r2,r2,1
   27130:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   27134:	e0bffe17 	ldw	r2,-8(fp)
   27138:	10000226 	beq	r2,zero,27144 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   2713c:	00bffe44 	movi	r2,-7
   27140:	00001106 	br	27188 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   27144:	e0bfff17 	ldw	r2,-4(fp)
   27148:	10c00617 	ldw	r3,24(r2)
   2714c:	008000b4 	movhi	r2,2
   27150:	109b6104 	addi	r2,r2,28036
   27154:	1880021e 	bne	r3,r2,27160 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   27158:	e0bffd17 	ldw	r2,-12(fp)
   2715c:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   27160:	e0bfff17 	ldw	r2,-4(fp)
   27164:	10800317 	ldw	r2,12(r2)
   27168:	10800204 	addi	r2,r2,8
   2716c:	e0ffff17 	ldw	r3,-4(fp)
   27170:	18c00317 	ldw	r3,12(r3)
   27174:	18c00204 	addi	r3,r3,8
   27178:	18c00037 	ldwio	r3,0(r3)
   2717c:	18c00054 	ori	r3,r3,1
   27180:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   27184:	0005883a 	mov	r2,zero
}
   27188:	e037883a 	mov	sp,fp
   2718c:	df000017 	ldw	fp,0(sp)
   27190:	dec00104 	addi	sp,sp,4
   27194:	f800283a 	ret

00027198 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   27198:	defffe04 	addi	sp,sp,-8
   2719c:	df000115 	stw	fp,4(sp)
   271a0:	df000104 	addi	fp,sp,4
   271a4:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   271a8:	e0bfff17 	ldw	r2,-4(fp)
   271ac:	10800317 	ldw	r2,12(r2)
   271b0:	10800204 	addi	r2,r2,8
   271b4:	e0ffff17 	ldw	r3,-4(fp)
   271b8:	18c00317 	ldw	r3,12(r3)
   271bc:	18c00204 	addi	r3,r3,8
   271c0:	19000037 	ldwio	r4,0(r3)
   271c4:	00ffff84 	movi	r3,-2
   271c8:	20c6703a 	and	r3,r4,r3
   271cc:	10c00035 	stwio	r3,0(r2)

}
   271d0:	0001883a 	nop
   271d4:	e037883a 	mov	sp,fp
   271d8:	df000017 	ldw	fp,0(sp)
   271dc:	dec00104 	addi	sp,sp,4
   271e0:	f800283a 	ret

000271e4 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   271e4:	defffd04 	addi	sp,sp,-12
   271e8:	df000215 	stw	fp,8(sp)
   271ec:	df000204 	addi	fp,sp,8
   271f0:	e13ffe15 	stw	r4,-8(fp)
   271f4:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   271f8:	e0bffe17 	ldw	r2,-8(fp)
   271fc:	10c00d17 	ldw	r3,52(r2)
   27200:	e0bfff17 	ldw	r2,-4(fp)
   27204:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   27208:	e0bffe17 	ldw	r2,-8(fp)
   2720c:	10800317 	ldw	r2,12(r2)
   27210:	10800204 	addi	r2,r2,8
   27214:	10800037 	ldwio	r2,0(r2)
   27218:	1080008c 	andi	r2,r2,2
   2721c:	1005d07a 	srai	r2,r2,1
   27220:	1007883a 	mov	r3,r2
   27224:	e0bfff17 	ldw	r2,-4(fp)
   27228:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   2722c:	e0bffe17 	ldw	r2,-8(fp)
   27230:	10800317 	ldw	r2,12(r2)
   27234:	10800904 	addi	r2,r2,36
   27238:	10800037 	ldwio	r2,0(r2)
   2723c:	1007883a 	mov	r3,r2
   27240:	e0bfff17 	ldw	r2,-4(fp)
   27244:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   27248:	e0bffe17 	ldw	r2,-8(fp)
   2724c:	10800317 	ldw	r2,12(r2)
   27250:	10800804 	addi	r2,r2,32
   27254:	10800037 	ldwio	r2,0(r2)
   27258:	1007883a 	mov	r3,r2
   2725c:	e0bfff17 	ldw	r2,-4(fp)
   27260:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   27264:	e0bffe17 	ldw	r2,-8(fp)
   27268:	10800317 	ldw	r2,12(r2)
   2726c:	10800a04 	addi	r2,r2,40
   27270:	10800037 	ldwio	r2,0(r2)
   27274:	1007883a 	mov	r3,r2
   27278:	e0bfff17 	ldw	r2,-4(fp)
   2727c:	10c0030d 	sth	r3,12(r2)
}
   27280:	0001883a 	nop
   27284:	e037883a 	mov	sp,fp
   27288:	df000017 	ldw	fp,0(sp)
   2728c:	dec00104 	addi	sp,sp,4
   27290:	f800283a 	ret

00027294 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   27294:	defffd04 	addi	sp,sp,-12
   27298:	df000215 	stw	fp,8(sp)
   2729c:	df000204 	addi	fp,sp,8
   272a0:	e13ffe15 	stw	r4,-8(fp)
   272a4:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   272a8:	e0bfff17 	ldw	r2,-4(fp)
   272ac:	10c00017 	ldw	r3,0(r2)
   272b0:	e0bffe17 	ldw	r2,-8(fp)
   272b4:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   272b8:	e0bffe17 	ldw	r2,-8(fp)
   272bc:	10800317 	ldw	r2,12(r2)
   272c0:	10c00204 	addi	r3,r2,8
   272c4:	e0bffe17 	ldw	r2,-8(fp)
   272c8:	10800317 	ldw	r2,12(r2)
   272cc:	10800204 	addi	r2,r2,8
   272d0:	10800037 	ldwio	r2,0(r2)
   272d4:	1009883a 	mov	r4,r2
   272d8:	00bfff44 	movi	r2,-3
   272dc:	2088703a 	and	r4,r4,r2
   272e0:	e0bfff17 	ldw	r2,-4(fp)
   272e4:	10800117 	ldw	r2,4(r2)
   272e8:	1085883a 	add	r2,r2,r2
   272ec:	1080008c 	andi	r2,r2,2
   272f0:	2084b03a 	or	r2,r4,r2
   272f4:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   272f8:	e0bffe17 	ldw	r2,-8(fp)
   272fc:	10800317 	ldw	r2,12(r2)
   27300:	10800904 	addi	r2,r2,36
   27304:	e0ffff17 	ldw	r3,-4(fp)
   27308:	18c0020b 	ldhu	r3,8(r3)
   2730c:	18ffffcc 	andi	r3,r3,65535
   27310:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   27314:	e0bffe17 	ldw	r2,-8(fp)
   27318:	10800317 	ldw	r2,12(r2)
   2731c:	10800804 	addi	r2,r2,32
   27320:	e0ffff17 	ldw	r3,-4(fp)
   27324:	18c0028b 	ldhu	r3,10(r3)
   27328:	18ffffcc 	andi	r3,r3,65535
   2732c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   27330:	e0bffe17 	ldw	r2,-8(fp)
   27334:	10800317 	ldw	r2,12(r2)
   27338:	10800a04 	addi	r2,r2,40
   2733c:	e0ffff17 	ldw	r3,-4(fp)
   27340:	18c0030b 	ldhu	r3,12(r3)
   27344:	18ffffcc 	andi	r3,r3,65535
   27348:	10c00035 	stwio	r3,0(r2)
}
   2734c:	0001883a 	nop
   27350:	e037883a 	mov	sp,fp
   27354:	df000017 	ldw	fp,0(sp)
   27358:	dec00104 	addi	sp,sp,4
   2735c:	f800283a 	ret

00027360 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   27360:	defffb04 	addi	sp,sp,-20
   27364:	dfc00415 	stw	ra,16(sp)
   27368:	df000315 	stw	fp,12(sp)
   2736c:	df000304 	addi	fp,sp,12
   27370:	e13ffd15 	stw	r4,-12(fp)
   27374:	e17ffe15 	stw	r5,-8(fp)
   27378:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   2737c:	e0bffe17 	ldw	r2,-8(fp)
   27380:	1080028b 	ldhu	r2,10(r2)
   27384:	10bfffcc 	andi	r2,r2,65535
   27388:	10000426 	beq	r2,zero,2739c <alt_avalon_i2c_master_config_speed_get+0x3c>
   2738c:	e0bffe17 	ldw	r2,-8(fp)
   27390:	1080020b 	ldhu	r2,8(r2)
   27394:	10bfffcc 	andi	r2,r2,65535
   27398:	1000021e 	bne	r2,zero,273a4 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   2739c:	00bfff44 	movi	r2,-3
   273a0:	00000f06 	br	273e0 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   273a4:	e0bffd17 	ldw	r2,-12(fp)
   273a8:	11000c17 	ldw	r4,48(r2)
   273ac:	e0bffe17 	ldw	r2,-8(fp)
   273b0:	1080028b 	ldhu	r2,10(r2)
   273b4:	10ffffcc 	andi	r3,r2,65535
   273b8:	e0bffe17 	ldw	r2,-8(fp)
   273bc:	1080020b 	ldhu	r2,8(r2)
   273c0:	10bfffcc 	andi	r2,r2,65535
   273c4:	1885883a 	add	r2,r3,r2
   273c8:	100b883a 	mov	r5,r2
   273cc:	0022b740 	call	22b74 <__udivsi3>
   273d0:	1007883a 	mov	r3,r2
   273d4:	e0bfff17 	ldw	r2,-4(fp)
   273d8:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   273dc:	0005883a 	mov	r2,zero
}
   273e0:	e037883a 	mov	sp,fp
   273e4:	dfc00117 	ldw	ra,4(sp)
   273e8:	df000017 	ldw	fp,0(sp)
   273ec:	dec00204 	addi	sp,sp,8
   273f0:	f800283a 	ret

000273f4 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   273f4:	defff904 	addi	sp,sp,-28
   273f8:	dfc00615 	stw	ra,24(sp)
   273fc:	df000515 	stw	fp,20(sp)
   27400:	df000504 	addi	fp,sp,20
   27404:	e13ffd15 	stw	r4,-12(fp)
   27408:	e17ffe15 	stw	r5,-8(fp)
   2740c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   27410:	e0ffff17 	ldw	r3,-4(fp)
   27414:	008001b4 	movhi	r2,6
   27418:	1086a004 	addi	r2,r2,6784
   2741c:	10c00436 	bltu	r2,r3,27430 <alt_avalon_i2c_master_config_speed_set+0x3c>
   27420:	e0bfff17 	ldw	r2,-4(fp)
   27424:	10000226 	beq	r2,zero,27430 <alt_avalon_i2c_master_config_speed_set+0x3c>
   27428:	e0bfff17 	ldw	r2,-4(fp)
   2742c:	1000021e 	bne	r2,zero,27438 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   27430:	00bfff04 	movi	r2,-4
   27434:	00002906 	br	274dc <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   27438:	e0bffd17 	ldw	r2,-12(fp)
   2743c:	10c00c17 	ldw	r3,48(r2)
   27440:	e0bfff17 	ldw	r2,-4(fp)
   27444:	1085883a 	add	r2,r2,r2
   27448:	100b883a 	mov	r5,r2
   2744c:	1809883a 	mov	r4,r3
   27450:	0022b740 	call	22b74 <__udivsi3>
   27454:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   27458:	e0bffb17 	ldw	r2,-20(fp)
   2745c:	10800f04 	addi	r2,r2,60
   27460:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   27464:	e0bffb17 	ldw	r2,-20(fp)
   27468:	10bff104 	addi	r2,r2,-60
   2746c:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   27470:	e0ffff17 	ldw	r3,-4(fp)
   27474:	008000b4 	movhi	r2,2
   27478:	10a1a804 	addi	r2,r2,-31072
   2747c:	10c0042e 	bgeu	r2,r3,27490 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   27480:	e0bffe17 	ldw	r2,-8(fp)
   27484:	00c00044 	movi	r3,1
   27488:	10c00115 	stw	r3,4(r2)
   2748c:	00000206 	br	27498 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   27490:	e0bffe17 	ldw	r2,-8(fp)
   27494:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   27498:	e0bffb17 	ldw	r2,-20(fp)
   2749c:	1007883a 	mov	r3,r2
   274a0:	e0bffe17 	ldw	r2,-8(fp)
   274a4:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   274a8:	e0bffc17 	ldw	r2,-16(fp)
   274ac:	1007883a 	mov	r3,r2
   274b0:	e0bffe17 	ldw	r2,-8(fp)
   274b4:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   274b8:	e0bffb17 	ldw	r2,-20(fp)
   274bc:	1007883a 	mov	r3,r2
   274c0:	e0bffb17 	ldw	r2,-20(fp)
   274c4:	1004d07a 	srli	r2,r2,1
   274c8:	1885c83a 	sub	r2,r3,r2
   274cc:	1007883a 	mov	r3,r2
   274d0:	e0bffe17 	ldw	r2,-8(fp)
   274d4:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   274d8:	0005883a 	mov	r2,zero

}
   274dc:	e037883a 	mov	sp,fp
   274e0:	dfc00117 	ldw	ra,4(sp)
   274e4:	df000017 	ldw	fp,0(sp)
   274e8:	dec00204 	addi	sp,sp,8
   274ec:	f800283a 	ret

000274f0 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   274f0:	defffe04 	addi	sp,sp,-8
   274f4:	df000115 	stw	fp,4(sp)
   274f8:	df000104 	addi	fp,sp,4
   274fc:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   27500:	e0bfff17 	ldw	r2,-4(fp)
   27504:	10800317 	ldw	r2,12(r2)
   27508:	10800504 	addi	r2,r2,20
   2750c:	10800037 	ldwio	r2,0(r2)
   27510:	1080004c 	andi	r2,r2,1
   27514:	10000226 	beq	r2,zero,27520 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   27518:	00800044 	movi	r2,1
   2751c:	00000106 	br	27524 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   27520:	0005883a 	mov	r2,zero
}
   27524:	e037883a 	mov	sp,fp
   27528:	df000017 	ldw	fp,0(sp)
   2752c:	dec00104 	addi	sp,sp,4
   27530:	f800283a 	ret

00027534 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   27534:	defffb04 	addi	sp,sp,-20
   27538:	df000415 	stw	fp,16(sp)
   2753c:	df000404 	addi	fp,sp,16
   27540:	e13ffc15 	stw	r4,-16(fp)
   27544:	e17ffd15 	stw	r5,-12(fp)
   27548:	e1bffe15 	stw	r6,-8(fp)
   2754c:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   27550:	e0bfff17 	ldw	r2,-4(fp)
   27554:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   27558:	00001406 	br	275ac <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   2755c:	e0bfff17 	ldw	r2,-4(fp)
   27560:	10800017 	ldw	r2,0(r2)
   27564:	e0fffd17 	ldw	r3,-12(fp)
   27568:	1885883a 	add	r2,r3,r2
   2756c:	e0fffc17 	ldw	r3,-16(fp)
   27570:	18c00317 	ldw	r3,12(r3)
   27574:	18c00104 	addi	r3,r3,4
   27578:	18c00037 	ldwio	r3,0(r3)
   2757c:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   27580:	e0bfff17 	ldw	r2,-4(fp)
   27584:	10800017 	ldw	r2,0(r2)
   27588:	10c00044 	addi	r3,r2,1
   2758c:	e0bfff17 	ldw	r2,-4(fp)
   27590:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   27594:	e0bfff17 	ldw	r2,-4(fp)
   27598:	10c00017 	ldw	r3,0(r2)
   2759c:	e0bffe17 	ldw	r2,-8(fp)
   275a0:	1880021e 	bne	r3,r2,275ac <alt_avalon_i2c_rx_read_available+0x78>
   275a4:	e0bffe17 	ldw	r2,-8(fp)
   275a8:	1000061e 	bne	r2,zero,275c4 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   275ac:	e0bffc17 	ldw	r2,-16(fp)
   275b0:	10800317 	ldw	r2,12(r2)
   275b4:	10800704 	addi	r2,r2,28
   275b8:	10800037 	ldwio	r2,0(r2)
   275bc:	103fe71e 	bne	r2,zero,2755c <__alt_data_end+0xfffe755c>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   275c0:	00000106 	br	275c8 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   275c4:	0001883a 	nop
    }
}
   275c8:	0001883a 	nop
   275cc:	e037883a 	mov	sp,fp
   275d0:	df000017 	ldw	fp,0(sp)
   275d4:	dec00104 	addi	sp,sp,4
   275d8:	f800283a 	ret

000275dc <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   275dc:	defffa04 	addi	sp,sp,-24
   275e0:	dfc00515 	stw	ra,20(sp)
   275e4:	df000415 	stw	fp,16(sp)
   275e8:	df000404 	addi	fp,sp,16
   275ec:	e13ffe15 	stw	r4,-8(fp)
   275f0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   275f4:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   275f8:	008000b4 	movhi	r2,2
   275fc:	10a1a804 	addi	r2,r2,-31072
   27600:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   27604:	00000d06 	br	2763c <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   27608:	e0bffd17 	ldw	r2,-12(fp)
   2760c:	108002a8 	cmpgeui	r2,r2,10
   27610:	1000021e 	bne	r2,zero,2761c <alt_avalon_i2c_rx_read+0x40>
   27614:	0109c404 	movi	r4,10000
   27618:	0028bdc0 	call	28bdc <alt_busy_sleep>
      if (--timeout == 0)
   2761c:	e0bffd17 	ldw	r2,-12(fp)
   27620:	10bfffc4 	addi	r2,r2,-1
   27624:	e0bffd15 	stw	r2,-12(fp)
   27628:	e0bffd17 	ldw	r2,-12(fp)
   2762c:	1000031e 	bne	r2,zero,2763c <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   27630:	00bfff84 	movi	r2,-2
   27634:	e0bffc15 	stw	r2,-16(fp)
        break;
   27638:	00000506 	br	27650 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   2763c:	e0bffe17 	ldw	r2,-8(fp)
   27640:	10800317 	ldw	r2,12(r2)
   27644:	10800704 	addi	r2,r2,28
   27648:	10800037 	ldwio	r2,0(r2)
   2764c:	103fee26 	beq	r2,zero,27608 <__alt_data_end+0xfffe7608>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   27650:	e0bffe17 	ldw	r2,-8(fp)
   27654:	10800317 	ldw	r2,12(r2)
   27658:	10800104 	addi	r2,r2,4
   2765c:	10800037 	ldwio	r2,0(r2)
   27660:	1007883a 	mov	r3,r2
   27664:	e0bfff17 	ldw	r2,-4(fp)
   27668:	10c00005 	stb	r3,0(r2)
        
    return status;
   2766c:	e0bffc17 	ldw	r2,-16(fp)
}
   27670:	e037883a 	mov	sp,fp
   27674:	dfc00117 	ldw	ra,4(sp)
   27678:	df000017 	ldw	fp,0(sp)
   2767c:	dec00204 	addi	sp,sp,8
   27680:	f800283a 	ret

00027684 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   27684:	defff804 	addi	sp,sp,-32
   27688:	dfc00715 	stw	ra,28(sp)
   2768c:	df000615 	stw	fp,24(sp)
   27690:	df000604 	addi	fp,sp,24
   27694:	e13ffc15 	stw	r4,-16(fp)
   27698:	2809883a 	mov	r4,r5
   2769c:	3007883a 	mov	r3,r6
   276a0:	3805883a 	mov	r2,r7
   276a4:	e13ffd05 	stb	r4,-12(fp)
   276a8:	e0fffe05 	stb	r3,-8(fp)
   276ac:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   276b0:	0089c404 	movi	r2,10000
   276b4:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   276b8:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   276bc:	00000c06 	br	276f0 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   276c0:	e0bffa17 	ldw	r2,-24(fp)
   276c4:	108002a8 	cmpgeui	r2,r2,10
   276c8:	1000021e 	bne	r2,zero,276d4 <alt_avalon_i2c_cmd_write+0x50>
   276cc:	0109c404 	movi	r4,10000
   276d0:	0028bdc0 	call	28bdc <alt_busy_sleep>
      if (--timeout == 0)
   276d4:	e0bffa17 	ldw	r2,-24(fp)
   276d8:	10bfffc4 	addi	r2,r2,-1
   276dc:	e0bffa15 	stw	r2,-24(fp)
   276e0:	e0bffa17 	ldw	r2,-24(fp)
   276e4:	1000021e 	bne	r2,zero,276f0 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   276e8:	00bfff84 	movi	r2,-2
   276ec:	00001906 	br	27754 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   276f0:	e0bffc17 	ldw	r2,-16(fp)
   276f4:	10800317 	ldw	r2,12(r2)
   276f8:	10800404 	addi	r2,r2,16
   276fc:	10800037 	ldwio	r2,0(r2)
   27700:	1080004c 	andi	r2,r2,1
   27704:	103fee26 	beq	r2,zero,276c0 <__alt_data_end+0xfffe76c0>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   27708:	e0bffc17 	ldw	r2,-16(fp)
   2770c:	10800317 	ldw	r2,12(r2)
   27710:	e13ffd03 	ldbu	r4,-12(fp)
   27714:	e0fffe03 	ldbu	r3,-8(fp)
   27718:	1806927a 	slli	r3,r3,9
   2771c:	20c8b03a 	or	r4,r4,r3
   27720:	e0ffff03 	ldbu	r3,-4(fp)
   27724:	1806923a 	slli	r3,r3,8
   27728:	20c6b03a 	or	r3,r4,r3
   2772c:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   27730:	e0bffb04 	addi	r2,fp,-20
   27734:	100b883a 	mov	r5,r2
   27738:	e13ffc17 	ldw	r4,-16(fp)
   2773c:	00278c40 	call	278c4 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   27740:	e0bffb04 	addi	r2,fp,-20
   27744:	100b883a 	mov	r5,r2
   27748:	e13ffc17 	ldw	r4,-16(fp)
   2774c:	00279100 	call	27910 <alt_avalon_i2c_check_arblost>
    
    return status;
   27750:	e0bffb17 	ldw	r2,-20(fp)
}
   27754:	e037883a 	mov	sp,fp
   27758:	dfc00117 	ldw	ra,4(sp)
   2775c:	df000017 	ldw	fp,0(sp)
   27760:	dec00204 	addi	sp,sp,8
   27764:	f800283a 	ret

00027768 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   27768:	defffa04 	addi	sp,sp,-24
   2776c:	dfc00515 	stw	ra,20(sp)
   27770:	df000415 	stw	fp,16(sp)
   27774:	df000404 	addi	fp,sp,16
   27778:	e13ffd15 	stw	r4,-12(fp)
   2777c:	e17ffe15 	stw	r5,-8(fp)
   27780:	3005883a 	mov	r2,r6
   27784:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   27788:	e0bffd17 	ldw	r2,-12(fp)
   2778c:	10800d17 	ldw	r2,52(r2)
   27790:	10800058 	cmpnei	r2,r2,1
   27794:	10001c1e 	bne	r2,zero,27808 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   27798:	e0bffd17 	ldw	r2,-12(fp)
   2779c:	10800917 	ldw	r2,36(r2)
   277a0:	109e0014 	ori	r2,r2,30720
   277a4:	1004d1fa 	srli	r2,r2,7
   277a8:	1007883a 	mov	r3,r2
   277ac:	00bfff84 	movi	r2,-2
   277b0:	1884703a 	and	r2,r3,r2
   277b4:	1007883a 	mov	r3,r2
   277b8:	e0bffe17 	ldw	r2,-8(fp)
   277bc:	1884b03a 	or	r2,r3,r2
   277c0:	10803fcc 	andi	r2,r2,255
   277c4:	e0ffff03 	ldbu	r3,-4(fp)
   277c8:	000f883a 	mov	r7,zero
   277cc:	180d883a 	mov	r6,r3
   277d0:	100b883a 	mov	r5,r2
   277d4:	e13ffd17 	ldw	r4,-12(fp)
   277d8:	00276840 	call	27684 <alt_avalon_i2c_cmd_write>
   277dc:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   277e0:	e0bffd17 	ldw	r2,-12(fp)
   277e4:	10800917 	ldw	r2,36(r2)
   277e8:	10803fcc 	andi	r2,r2,255
   277ec:	000f883a 	mov	r7,zero
   277f0:	000d883a 	mov	r6,zero
   277f4:	100b883a 	mov	r5,r2
   277f8:	e13ffd17 	ldw	r4,-12(fp)
   277fc:	00276840 	call	27684 <alt_avalon_i2c_cmd_write>
   27800:	e0bffc15 	stw	r2,-16(fp)
   27804:	00000e06 	br	27840 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   27808:	e0bffd17 	ldw	r2,-12(fp)
   2780c:	10800917 	ldw	r2,36(r2)
   27810:	1085883a 	add	r2,r2,r2
   27814:	1007883a 	mov	r3,r2
   27818:	e0bffe17 	ldw	r2,-8(fp)
   2781c:	1884b03a 	or	r2,r3,r2
   27820:	10803fcc 	andi	r2,r2,255
   27824:	e0ffff03 	ldbu	r3,-4(fp)
   27828:	000f883a 	mov	r7,zero
   2782c:	180d883a 	mov	r6,r3
   27830:	100b883a 	mov	r5,r2
   27834:	e13ffd17 	ldw	r4,-12(fp)
   27838:	00276840 	call	27684 <alt_avalon_i2c_cmd_write>
   2783c:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   27840:	e0bffc17 	ldw	r2,-16(fp)
}
   27844:	e037883a 	mov	sp,fp
   27848:	dfc00117 	ldw	ra,4(sp)
   2784c:	df000017 	ldw	fp,0(sp)
   27850:	dec00204 	addi	sp,sp,8
   27854:	f800283a 	ret

00027858 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   27858:	defffd04 	addi	sp,sp,-12
   2785c:	df000215 	stw	fp,8(sp)
   27860:	df000204 	addi	fp,sp,8
   27864:	e13ffe15 	stw	r4,-8(fp)
   27868:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   2786c:	e0bffe17 	ldw	r2,-8(fp)
   27870:	10c00917 	ldw	r3,36(r2)
   27874:	e0bfff17 	ldw	r2,-4(fp)
   27878:	10c00015 	stw	r3,0(r2)
}
   2787c:	0001883a 	nop
   27880:	e037883a 	mov	sp,fp
   27884:	df000017 	ldw	fp,0(sp)
   27888:	dec00104 	addi	sp,sp,4
   2788c:	f800283a 	ret

00027890 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   27890:	defffd04 	addi	sp,sp,-12
   27894:	df000215 	stw	fp,8(sp)
   27898:	df000204 	addi	fp,sp,8
   2789c:	e13ffe15 	stw	r4,-8(fp)
   278a0:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   278a4:	e0bffe17 	ldw	r2,-8(fp)
   278a8:	e0ffff17 	ldw	r3,-4(fp)
   278ac:	10c00915 	stw	r3,36(r2)
}
   278b0:	0001883a 	nop
   278b4:	e037883a 	mov	sp,fp
   278b8:	df000017 	ldw	fp,0(sp)
   278bc:	dec00104 	addi	sp,sp,4
   278c0:	f800283a 	ret

000278c4 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   278c4:	defffd04 	addi	sp,sp,-12
   278c8:	df000215 	stw	fp,8(sp)
   278cc:	df000204 	addi	fp,sp,8
   278d0:	e13ffe15 	stw	r4,-8(fp)
   278d4:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   278d8:	e0bffe17 	ldw	r2,-8(fp)
   278dc:	10800317 	ldw	r2,12(r2)
   278e0:	10800404 	addi	r2,r2,16
   278e4:	10800037 	ldwio	r2,0(r2)
   278e8:	1080010c 	andi	r2,r2,4
   278ec:	10000326 	beq	r2,zero,278fc <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   278f0:	e0bfff17 	ldw	r2,-4(fp)
   278f4:	00fffec4 	movi	r3,-5
   278f8:	10c00015 	stw	r3,0(r2)
    }
}
   278fc:	0001883a 	nop
   27900:	e037883a 	mov	sp,fp
   27904:	df000017 	ldw	fp,0(sp)
   27908:	dec00104 	addi	sp,sp,4
   2790c:	f800283a 	ret

00027910 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   27910:	defffd04 	addi	sp,sp,-12
   27914:	df000215 	stw	fp,8(sp)
   27918:	df000204 	addi	fp,sp,8
   2791c:	e13ffe15 	stw	r4,-8(fp)
   27920:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   27924:	e0bffe17 	ldw	r2,-8(fp)
   27928:	10800317 	ldw	r2,12(r2)
   2792c:	10800404 	addi	r2,r2,16
   27930:	10800037 	ldwio	r2,0(r2)
   27934:	1080020c 	andi	r2,r2,8
   27938:	10000326 	beq	r2,zero,27948 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   2793c:	e0bfff17 	ldw	r2,-4(fp)
   27940:	00fffe84 	movi	r3,-6
   27944:	10c00015 	stw	r3,0(r2)
    }
}
   27948:	0001883a 	nop
   2794c:	e037883a 	mov	sp,fp
   27950:	df000017 	ldw	fp,0(sp)
   27954:	dec00104 	addi	sp,sp,4
   27958:	f800283a 	ret

0002795c <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2795c:	defff804 	addi	sp,sp,-32
   27960:	dfc00715 	stw	ra,28(sp)
   27964:	df000615 	stw	fp,24(sp)
   27968:	df000604 	addi	fp,sp,24
   2796c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   27970:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   27974:	e0bfff17 	ldw	r2,-4(fp)
   27978:	10800717 	ldw	r2,28(r2)
   2797c:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   27980:	e0bffb17 	ldw	r2,-20(fp)
   27984:	10800117 	ldw	r2,4(r2)
   27988:	10800044 	addi	r2,r2,1
   2798c:	0149c404 	movi	r5,10000
   27990:	1009883a 	mov	r4,r2
   27994:	0022c300 	call	22c30 <__mulsi3>
   27998:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   2799c:	e0bffd04 	addi	r2,fp,-12
   279a0:	100b883a 	mov	r5,r2
   279a4:	e13fff17 	ldw	r4,-4(fp)
   279a8:	00287f40 	call	287f4 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   279ac:	e0bffd17 	ldw	r2,-12(fp)
   279b0:	100b883a 	mov	r5,r2
   279b4:	e13fff17 	ldw	r4,-4(fp)
   279b8:	00287280 	call	28728 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   279bc:	e0bffc04 	addi	r2,fp,-16
   279c0:	100b883a 	mov	r5,r2
   279c4:	e13fff17 	ldw	r4,-4(fp)
   279c8:	00278c40 	call	278c4 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   279cc:	e0bffc17 	ldw	r2,-16(fp)
   279d0:	10002226 	beq	r2,zero,27a5c <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   279d4:	e0bffb17 	ldw	r2,-20(fp)
   279d8:	10800217 	ldw	r2,8(r2)
   279dc:	10001d26 	beq	r2,zero,27a54 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   279e0:	00000d06 	br	27a18 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   279e4:	e0bffa17 	ldw	r2,-24(fp)
   279e8:	108002a8 	cmpgeui	r2,r2,10
   279ec:	1000021e 	bne	r2,zero,279f8 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   279f0:	0109c404 	movi	r4,10000
   279f4:	0028bdc0 	call	28bdc <alt_busy_sleep>
              if (--timeout == 0)
   279f8:	e0bffa17 	ldw	r2,-24(fp)
   279fc:	10bfffc4 	addi	r2,r2,-1
   27a00:	e0bffa15 	stw	r2,-24(fp)
   27a04:	e0bffa17 	ldw	r2,-24(fp)
   27a08:	1000031e 	bne	r2,zero,27a18 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   27a0c:	00bfff84 	movi	r2,-2
   27a10:	e0bffc15 	stw	r2,-16(fp)
                 break;
   27a14:	00000306 	br	27a24 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   27a18:	e13fff17 	ldw	r4,-4(fp)
   27a1c:	00274f00 	call	274f0 <alt_avalon_i2c_is_busy>
   27a20:	103ff01e 	bne	r2,zero,279e4 <__alt_data_end+0xfffe79e4>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   27a24:	e0bffb17 	ldw	r2,-20(fp)
   27a28:	10800017 	ldw	r2,0(r2)
   27a2c:	e0fffe04 	addi	r3,fp,-8
   27a30:	180f883a 	mov	r7,r3
   27a34:	000d883a 	mov	r6,zero
   27a38:	100b883a 	mov	r5,r2
   27a3c:	e13fff17 	ldw	r4,-4(fp)
   27a40:	00275340 	call	27534 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   27a44:	e13fff17 	ldw	r4,-4(fp)
   27a48:	00271980 	call	27198 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   27a4c:	e0bffb17 	ldw	r2,-20(fp)
   27a50:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   27a54:	e0bffc17 	ldw	r2,-16(fp)
   27a58:	00000a06 	br	27a84 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   27a5c:	e0bffb17 	ldw	r2,-20(fp)
   27a60:	10800217 	ldw	r2,8(r2)
   27a64:	10000626 	beq	r2,zero,27a80 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   27a68:	e0bffd17 	ldw	r2,-12(fp)
   27a6c:	100b883a 	mov	r5,r2
   27a70:	e13fff17 	ldw	r4,-4(fp)
   27a74:	00287900 	call	28790 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   27a78:	00bffe44 	movi	r2,-7
   27a7c:	00000106 	br	27a84 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   27a80:	0005883a 	mov	r2,zero
}
   27a84:	e037883a 	mov	sp,fp
   27a88:	dfc00117 	ldw	ra,4(sp)
   27a8c:	df000017 	ldw	fp,0(sp)
   27a90:	dec00204 	addi	sp,sp,8
   27a94:	f800283a 	ret

00027a98 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   27a98:	defff704 	addi	sp,sp,-36
   27a9c:	dfc00815 	stw	ra,32(sp)
   27aa0:	df000715 	stw	fp,28(sp)
   27aa4:	df000704 	addi	fp,sp,28
   27aa8:	e13ffc15 	stw	r4,-16(fp)
   27aac:	e17ffd15 	stw	r5,-12(fp)
   27ab0:	e1bffe15 	stw	r6,-8(fp)
   27ab4:	3805883a 	mov	r2,r7
   27ab8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   27abc:	0089c404 	movi	r2,10000
   27ac0:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   27ac4:	00002206 	br	27b50 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   27ac8:	e0bffb17 	ldw	r2,-20(fp)
   27acc:	108002a8 	cmpgeui	r2,r2,10
   27ad0:	1000021e 	bne	r2,zero,27adc <alt_avalon_i2c_master_tx+0x44>
   27ad4:	0109c404 	movi	r4,10000
   27ad8:	0028bdc0 	call	28bdc <alt_busy_sleep>
      if (use_interrupts)
   27adc:	e0bfff03 	ldbu	r2,-4(fp)
   27ae0:	10000926 	beq	r2,zero,27b08 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   27ae4:	00800044 	movi	r2,1
   27ae8:	d8800015 	stw	r2,0(sp)
   27aec:	000f883a 	mov	r7,zero
   27af0:	e1bffe17 	ldw	r6,-8(fp)
   27af4:	e17ffd17 	ldw	r5,-12(fp)
   27af8:	e13ffc17 	ldw	r4,-16(fp)
   27afc:	00280440 	call	28044 <alt_avalon_i2c_master_transmit_using_interrupts>
   27b00:	e0bffa15 	stw	r2,-24(fp)
   27b04:	00000806 	br	27b28 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   27b08:	00800044 	movi	r2,1
   27b0c:	d8800015 	stw	r2,0(sp)
   27b10:	000f883a 	mov	r7,zero
   27b14:	e1bffe17 	ldw	r6,-8(fp)
   27b18:	e17ffd17 	ldw	r5,-12(fp)
   27b1c:	e13ffc17 	ldw	r4,-16(fp)
   27b20:	0027e840 	call	27e84 <alt_avalon_i2c_master_transmit>
   27b24:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   27b28:	e0bffa17 	ldw	r2,-24(fp)
   27b2c:	10bffea0 	cmpeqi	r2,r2,-6
   27b30:	1000061e 	bne	r2,zero,27b4c <alt_avalon_i2c_master_tx+0xb4>
   27b34:	e0bffa17 	ldw	r2,-24(fp)
   27b38:	10bffee0 	cmpeqi	r2,r2,-5
   27b3c:	1000031e 	bne	r2,zero,27b4c <alt_avalon_i2c_master_tx+0xb4>
   27b40:	e0bffa17 	ldw	r2,-24(fp)
   27b44:	10bffe58 	cmpnei	r2,r2,-7
   27b48:	1000061e 	bne	r2,zero,27b64 <alt_avalon_i2c_master_tx+0xcc>
   27b4c:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   27b50:	e0bffb17 	ldw	r2,-20(fp)
   27b54:	10ffffc4 	addi	r3,r2,-1
   27b58:	e0fffb15 	stw	r3,-20(fp)
   27b5c:	103fda1e 	bne	r2,zero,27ac8 <__alt_data_end+0xfffe7ac8>
   27b60:	00000106 	br	27b68 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   27b64:	0001883a 	nop
    }

    return status;
   27b68:	e0bffa17 	ldw	r2,-24(fp)
}        
   27b6c:	e037883a 	mov	sp,fp
   27b70:	dfc00117 	ldw	ra,4(sp)
   27b74:	df000017 	ldw	fp,0(sp)
   27b78:	dec00204 	addi	sp,sp,8
   27b7c:	f800283a 	ret

00027b80 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   27b80:	defff704 	addi	sp,sp,-36
   27b84:	dfc00815 	stw	ra,32(sp)
   27b88:	df000715 	stw	fp,28(sp)
   27b8c:	df000704 	addi	fp,sp,28
   27b90:	e13ffc15 	stw	r4,-16(fp)
   27b94:	e17ffd15 	stw	r5,-12(fp)
   27b98:	e1bffe15 	stw	r6,-8(fp)
   27b9c:	3805883a 	mov	r2,r7
   27ba0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   27ba4:	0089c404 	movi	r2,10000
   27ba8:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   27bac:	e0bfff03 	ldbu	r2,-4(fp)
   27bb0:	10003426 	beq	r2,zero,27c84 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   27bb4:	00001706 	br	27c14 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   27bb8:	e0bffb17 	ldw	r2,-20(fp)
   27bbc:	108002a8 	cmpgeui	r2,r2,10
   27bc0:	1000021e 	bne	r2,zero,27bcc <alt_avalon_i2c_master_rx+0x4c>
   27bc4:	0109c404 	movi	r4,10000
   27bc8:	0028bdc0 	call	28bdc <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   27bcc:	00800044 	movi	r2,1
   27bd0:	d8800015 	stw	r2,0(sp)
   27bd4:	000f883a 	mov	r7,zero
   27bd8:	e1bffe17 	ldw	r6,-8(fp)
   27bdc:	e17ffd17 	ldw	r5,-12(fp)
   27be0:	e13ffc17 	ldw	r4,-16(fp)
   27be4:	00284600 	call	28460 <alt_avalon_i2c_master_receive_using_interrupts>
   27be8:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   27bec:	e0bffa17 	ldw	r2,-24(fp)
   27bf0:	10bffea0 	cmpeqi	r2,r2,-6
   27bf4:	1000061e 	bne	r2,zero,27c10 <alt_avalon_i2c_master_rx+0x90>
   27bf8:	e0bffa17 	ldw	r2,-24(fp)
   27bfc:	10bffee0 	cmpeqi	r2,r2,-5
   27c00:	1000031e 	bne	r2,zero,27c10 <alt_avalon_i2c_master_rx+0x90>
   27c04:	e0bffa17 	ldw	r2,-24(fp)
   27c08:	10bffe58 	cmpnei	r2,r2,-7
   27c0c:	1000221e 	bne	r2,zero,27c98 <alt_avalon_i2c_master_rx+0x118>
   27c10:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   27c14:	e0bffb17 	ldw	r2,-20(fp)
   27c18:	10ffffc4 	addi	r3,r2,-1
   27c1c:	e0fffb15 	stw	r3,-20(fp)
   27c20:	103fe51e 	bne	r2,zero,27bb8 <__alt_data_end+0xfffe7bb8>
   27c24:	00001f06 	br	27ca4 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   27c28:	e0bffb17 	ldw	r2,-20(fp)
   27c2c:	108002a8 	cmpgeui	r2,r2,10
   27c30:	1000021e 	bne	r2,zero,27c3c <alt_avalon_i2c_master_rx+0xbc>
   27c34:	0109c404 	movi	r4,10000
   27c38:	0028bdc0 	call	28bdc <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   27c3c:	00800044 	movi	r2,1
   27c40:	d8800015 	stw	r2,0(sp)
   27c44:	000f883a 	mov	r7,zero
   27c48:	e1bffe17 	ldw	r6,-8(fp)
   27c4c:	e17ffd17 	ldw	r5,-12(fp)
   27c50:	e13ffc17 	ldw	r4,-16(fp)
   27c54:	00282500 	call	28250 <alt_avalon_i2c_master_receive>
   27c58:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   27c5c:	e0bffa17 	ldw	r2,-24(fp)
   27c60:	10bffea0 	cmpeqi	r2,r2,-6
   27c64:	1000061e 	bne	r2,zero,27c80 <alt_avalon_i2c_master_rx+0x100>
   27c68:	e0bffa17 	ldw	r2,-24(fp)
   27c6c:	10bffee0 	cmpeqi	r2,r2,-5
   27c70:	1000031e 	bne	r2,zero,27c80 <alt_avalon_i2c_master_rx+0x100>
   27c74:	e0bffa17 	ldw	r2,-24(fp)
   27c78:	10bffe58 	cmpnei	r2,r2,-7
   27c7c:	1000081e 	bne	r2,zero,27ca0 <alt_avalon_i2c_master_rx+0x120>
   27c80:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   27c84:	e0bffb17 	ldw	r2,-20(fp)
   27c88:	10ffffc4 	addi	r3,r2,-1
   27c8c:	e0fffb15 	stw	r3,-20(fp)
   27c90:	103fe51e 	bne	r2,zero,27c28 <__alt_data_end+0xfffe7c28>
   27c94:	00000306 	br	27ca4 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   27c98:	0001883a 	nop
   27c9c:	00000106 	br	27ca4 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   27ca0:	0001883a 	nop
      }
    }
    
    return status;
   27ca4:	e0bffa17 	ldw	r2,-24(fp)
}        
   27ca8:	e037883a 	mov	sp,fp
   27cac:	dfc00117 	ldw	ra,4(sp)
   27cb0:	df000017 	ldw	fp,0(sp)
   27cb4:	dec00204 	addi	sp,sp,8
   27cb8:	f800283a 	ret

00027cbc <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   27cbc:	defff604 	addi	sp,sp,-40
   27cc0:	dfc00915 	stw	ra,36(sp)
   27cc4:	df000815 	stw	fp,32(sp)
   27cc8:	df000804 	addi	fp,sp,32
   27ccc:	e13ffb15 	stw	r4,-20(fp)
   27cd0:	e17ffc15 	stw	r5,-16(fp)
   27cd4:	e1bffd15 	stw	r6,-12(fp)
   27cd8:	e1fffe15 	stw	r7,-8(fp)
   27cdc:	e0800317 	ldw	r2,12(fp)
   27ce0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   27ce4:	0089c404 	movi	r2,10000
   27ce8:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   27cec:	e0bfff03 	ldbu	r2,-4(fp)
   27cf0:	10005626 	beq	r2,zero,27e4c <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   27cf4:	00002806 	br	27d98 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   27cf8:	e0bffa17 	ldw	r2,-24(fp)
   27cfc:	108002a8 	cmpgeui	r2,r2,10
   27d00:	1000021e 	bne	r2,zero,27d0c <alt_avalon_i2c_master_tx_rx+0x50>
   27d04:	0109c404 	movi	r4,10000
   27d08:	0028bdc0 	call	28bdc <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   27d0c:	d8000015 	stw	zero,0(sp)
   27d10:	000f883a 	mov	r7,zero
   27d14:	e1bffd17 	ldw	r6,-12(fp)
   27d18:	e17ffc17 	ldw	r5,-16(fp)
   27d1c:	e13ffb17 	ldw	r4,-20(fp)
   27d20:	00280440 	call	28044 <alt_avalon_i2c_master_transmit_using_interrupts>
   27d24:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   27d28:	e0bff917 	ldw	r2,-28(fp)
   27d2c:	10bffea0 	cmpeqi	r2,r2,-6
   27d30:	1000191e 	bne	r2,zero,27d98 <alt_avalon_i2c_master_tx_rx+0xdc>
   27d34:	e0bff917 	ldw	r2,-28(fp)
   27d38:	10bffee0 	cmpeqi	r2,r2,-5
   27d3c:	1000161e 	bne	r2,zero,27d98 <alt_avalon_i2c_master_tx_rx+0xdc>
   27d40:	e0bff917 	ldw	r2,-28(fp)
   27d44:	10bffe58 	cmpnei	r2,r2,-7
   27d48:	1000011e 	bne	r2,zero,27d50 <alt_avalon_i2c_master_tx_rx+0x94>
   27d4c:	00001206 	br	27d98 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   27d50:	00800044 	movi	r2,1
   27d54:	d8800015 	stw	r2,0(sp)
   27d58:	01c00044 	movi	r7,1
   27d5c:	e1800217 	ldw	r6,8(fp)
   27d60:	e17ffe17 	ldw	r5,-8(fp)
   27d64:	e13ffb17 	ldw	r4,-20(fp)
   27d68:	00284600 	call	28460 <alt_avalon_i2c_master_receive_using_interrupts>
   27d6c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   27d70:	e0bff917 	ldw	r2,-28(fp)
   27d74:	10bffea0 	cmpeqi	r2,r2,-6
   27d78:	1000061e 	bne	r2,zero,27d94 <alt_avalon_i2c_master_tx_rx+0xd8>
   27d7c:	e0bff917 	ldw	r2,-28(fp)
   27d80:	10bffee0 	cmpeqi	r2,r2,-5
   27d84:	1000031e 	bne	r2,zero,27d94 <alt_avalon_i2c_master_tx_rx+0xd8>
   27d88:	e0bff917 	ldw	r2,-28(fp)
   27d8c:	10bffe58 	cmpnei	r2,r2,-7
   27d90:	1000331e 	bne	r2,zero,27e60 <alt_avalon_i2c_master_tx_rx+0x1a4>
   27d94:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   27d98:	e0bffa17 	ldw	r2,-24(fp)
   27d9c:	10ffffc4 	addi	r3,r2,-1
   27da0:	e0fffa15 	stw	r3,-24(fp)
   27da4:	103fd41e 	bne	r2,zero,27cf8 <__alt_data_end+0xfffe7cf8>
   27da8:	00003006 	br	27e6c <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   27dac:	e0bffa17 	ldw	r2,-24(fp)
   27db0:	108002a8 	cmpgeui	r2,r2,10
   27db4:	1000021e 	bne	r2,zero,27dc0 <alt_avalon_i2c_master_tx_rx+0x104>
   27db8:	0109c404 	movi	r4,10000
   27dbc:	0028bdc0 	call	28bdc <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   27dc0:	d8000015 	stw	zero,0(sp)
   27dc4:	000f883a 	mov	r7,zero
   27dc8:	e1bffd17 	ldw	r6,-12(fp)
   27dcc:	e17ffc17 	ldw	r5,-16(fp)
   27dd0:	e13ffb17 	ldw	r4,-20(fp)
   27dd4:	0027e840 	call	27e84 <alt_avalon_i2c_master_transmit>
   27dd8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   27ddc:	e0bff917 	ldw	r2,-28(fp)
   27de0:	10bffea0 	cmpeqi	r2,r2,-6
   27de4:	1000191e 	bne	r2,zero,27e4c <alt_avalon_i2c_master_tx_rx+0x190>
   27de8:	e0bff917 	ldw	r2,-28(fp)
   27dec:	10bffee0 	cmpeqi	r2,r2,-5
   27df0:	1000161e 	bne	r2,zero,27e4c <alt_avalon_i2c_master_tx_rx+0x190>
   27df4:	e0bff917 	ldw	r2,-28(fp)
   27df8:	10bffe58 	cmpnei	r2,r2,-7
   27dfc:	1000011e 	bne	r2,zero,27e04 <alt_avalon_i2c_master_tx_rx+0x148>
   27e00:	00001206 	br	27e4c <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   27e04:	00800044 	movi	r2,1
   27e08:	d8800015 	stw	r2,0(sp)
   27e0c:	01c00044 	movi	r7,1
   27e10:	e1800217 	ldw	r6,8(fp)
   27e14:	e17ffe17 	ldw	r5,-8(fp)
   27e18:	e13ffb17 	ldw	r4,-20(fp)
   27e1c:	00282500 	call	28250 <alt_avalon_i2c_master_receive>
   27e20:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   27e24:	e0bff917 	ldw	r2,-28(fp)
   27e28:	10bffea0 	cmpeqi	r2,r2,-6
   27e2c:	1000061e 	bne	r2,zero,27e48 <alt_avalon_i2c_master_tx_rx+0x18c>
   27e30:	e0bff917 	ldw	r2,-28(fp)
   27e34:	10bffee0 	cmpeqi	r2,r2,-5
   27e38:	1000031e 	bne	r2,zero,27e48 <alt_avalon_i2c_master_tx_rx+0x18c>
   27e3c:	e0bff917 	ldw	r2,-28(fp)
   27e40:	10bffe58 	cmpnei	r2,r2,-7
   27e44:	1000081e 	bne	r2,zero,27e68 <alt_avalon_i2c_master_tx_rx+0x1ac>
   27e48:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   27e4c:	e0bffa17 	ldw	r2,-24(fp)
   27e50:	10ffffc4 	addi	r3,r2,-1
   27e54:	e0fffa15 	stw	r3,-24(fp)
   27e58:	103fd41e 	bne	r2,zero,27dac <__alt_data_end+0xfffe7dac>
   27e5c:	00000306 	br	27e6c <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   27e60:	0001883a 	nop
   27e64:	00000106 	br	27e6c <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   27e68:	0001883a 	nop
      }
    }
    
    return status;
   27e6c:	e0bff917 	ldw	r2,-28(fp)
}                                       
   27e70:	e037883a 	mov	sp,fp
   27e74:	dfc00117 	ldw	ra,4(sp)
   27e78:	df000017 	ldw	fp,0(sp)
   27e7c:	dec00204 	addi	sp,sp,8
   27e80:	f800283a 	ret

00027e84 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   27e84:	defff704 	addi	sp,sp,-36
   27e88:	dfc00815 	stw	ra,32(sp)
   27e8c:	df000715 	stw	fp,28(sp)
   27e90:	df000704 	addi	fp,sp,28
   27e94:	e13ffb15 	stw	r4,-20(fp)
   27e98:	e17ffc15 	stw	r5,-16(fp)
   27e9c:	e1bffd15 	stw	r6,-12(fp)
   27ea0:	3807883a 	mov	r3,r7
   27ea4:	e0800217 	ldw	r2,8(fp)
   27ea8:	e0fffe05 	stb	r3,-8(fp)
   27eac:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   27eb0:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   27eb4:	0149c404 	movi	r5,10000
   27eb8:	e13ffd17 	ldw	r4,-12(fp)
   27ebc:	0022c300 	call	22c30 <__mulsi3>
   27ec0:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   27ec4:	e0bffd17 	ldw	r2,-12(fp)
   27ec8:	1000021e 	bne	r2,zero,27ed4 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   27ecc:	0005883a 	mov	r2,zero
   27ed0:	00005706 	br	28030 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   27ed4:	e0bffe03 	ldbu	r2,-8(fp)
   27ed8:	10000a1e 	bne	r2,zero,27f04 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   27edc:	e13ffb17 	ldw	r4,-20(fp)
   27ee0:	00271000 	call	27100 <alt_avalon_i2c_enable>
   27ee4:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   27ee8:	e0bffa17 	ldw	r2,-24(fp)
   27eec:	10000226 	beq	r2,zero,27ef8 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   27ef0:	e0bffa17 	ldw	r2,-24(fp)
   27ef4:	00004e06 	br	28030 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   27ef8:	01400704 	movi	r5,28
   27efc:	e13ffb17 	ldw	r4,-20(fp)
   27f00:	00286ec0 	call	286ec <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   27f04:	e0bffe03 	ldbu	r2,-8(fp)
   27f08:	100d883a 	mov	r6,r2
   27f0c:	000b883a 	mov	r5,zero
   27f10:	e13ffb17 	ldw	r4,-20(fp)
   27f14:	00277680 	call	27768 <alt_avalon_i2c_send_address>
   27f18:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   27f1c:	e0bffa17 	ldw	r2,-24(fp)
   27f20:	1000271e 	bne	r2,zero,27fc0 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   27f24:	00000f06 	br	27f64 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   27f28:	e0bffc17 	ldw	r2,-16(fp)
   27f2c:	10800003 	ldbu	r2,0(r2)
   27f30:	10803fcc 	andi	r2,r2,255
   27f34:	000f883a 	mov	r7,zero
   27f38:	000d883a 	mov	r6,zero
   27f3c:	100b883a 	mov	r5,r2
   27f40:	e13ffb17 	ldw	r4,-20(fp)
   27f44:	00276840 	call	27684 <alt_avalon_i2c_cmd_write>
   27f48:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   27f4c:	e0bffc17 	ldw	r2,-16(fp)
   27f50:	10800044 	addi	r2,r2,1
   27f54:	e0bffc15 	stw	r2,-16(fp)
            --size;
   27f58:	e0bffd17 	ldw	r2,-12(fp)
   27f5c:	10bfffc4 	addi	r2,r2,-1
   27f60:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   27f64:	e0bffd17 	ldw	r2,-12(fp)
   27f68:	108000b0 	cmpltui	r2,r2,2
   27f6c:	1000021e 	bne	r2,zero,27f78 <alt_avalon_i2c_master_transmit+0xf4>
   27f70:	e0bffa17 	ldw	r2,-24(fp)
   27f74:	103fec26 	beq	r2,zero,27f28 <__alt_data_end+0xfffe7f28>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   27f78:	e0bffa17 	ldw	r2,-24(fp)
   27f7c:	1000101e 	bne	r2,zero,27fc0 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   27f80:	e0bffc17 	ldw	r2,-16(fp)
   27f84:	10800003 	ldbu	r2,0(r2)
   27f88:	10803fcc 	andi	r2,r2,255
   27f8c:	e0ffff03 	ldbu	r3,-4(fp)
   27f90:	180f883a 	mov	r7,r3
   27f94:	000d883a 	mov	r6,zero
   27f98:	100b883a 	mov	r5,r2
   27f9c:	e13ffb17 	ldw	r4,-20(fp)
   27fa0:	00276840 	call	27684 <alt_avalon_i2c_cmd_write>
   27fa4:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   27fa8:	e0bffc17 	ldw	r2,-16(fp)
   27fac:	10800044 	addi	r2,r2,1
   27fb0:	e0bffc15 	stw	r2,-16(fp)
            --size;
   27fb4:	e0bffd17 	ldw	r2,-12(fp)
   27fb8:	10bfffc4 	addi	r2,r2,-1
   27fbc:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   27fc0:	e0bfff03 	ldbu	r2,-4(fp)
   27fc4:	1000101e 	bne	r2,zero,28008 <alt_avalon_i2c_master_transmit+0x184>
   27fc8:	e0bffa17 	ldw	r2,-24(fp)
   27fcc:	10001726 	beq	r2,zero,2802c <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   27fd0:	00000d06 	br	28008 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   27fd4:	e0bff917 	ldw	r2,-28(fp)
   27fd8:	108002a8 	cmpgeui	r2,r2,10
   27fdc:	1000021e 	bne	r2,zero,27fe8 <alt_avalon_i2c_master_transmit+0x164>
   27fe0:	0109c404 	movi	r4,10000
   27fe4:	0028bdc0 	call	28bdc <alt_busy_sleep>
            if (--timeout == 0)
   27fe8:	e0bff917 	ldw	r2,-28(fp)
   27fec:	10bfffc4 	addi	r2,r2,-1
   27ff0:	e0bff915 	stw	r2,-28(fp)
   27ff4:	e0bff917 	ldw	r2,-28(fp)
   27ff8:	1000031e 	bne	r2,zero,28008 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   27ffc:	00bfff84 	movi	r2,-2
   28000:	e0bffa15 	stw	r2,-24(fp)
               break;
   28004:	00000306 	br	28014 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   28008:	e13ffb17 	ldw	r4,-20(fp)
   2800c:	00274f00 	call	274f0 <alt_avalon_i2c_is_busy>
   28010:	103ff01e 	bne	r2,zero,27fd4 <__alt_data_end+0xfffe7fd4>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   28014:	e0bffa04 	addi	r2,fp,-24
   28018:	100b883a 	mov	r5,r2
   2801c:	e13ffb17 	ldw	r4,-20(fp)
   28020:	00278c40 	call	278c4 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   28024:	e13ffb17 	ldw	r4,-20(fp)
   28028:	00271980 	call	27198 <alt_avalon_i2c_disable>
    }


    return status;
   2802c:	e0bffa17 	ldw	r2,-24(fp)
}
   28030:	e037883a 	mov	sp,fp
   28034:	dfc00117 	ldw	ra,4(sp)
   28038:	df000017 	ldw	fp,0(sp)
   2803c:	dec00204 	addi	sp,sp,8
   28040:	f800283a 	ret

00028044 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   28044:	defff604 	addi	sp,sp,-40
   28048:	dfc00915 	stw	ra,36(sp)
   2804c:	df000815 	stw	fp,32(sp)
   28050:	df000804 	addi	fp,sp,32
   28054:	e13ffb15 	stw	r4,-20(fp)
   28058:	e17ffc15 	stw	r5,-16(fp)
   2805c:	e1bffd15 	stw	r6,-12(fp)
   28060:	3807883a 	mov	r3,r7
   28064:	e0800217 	ldw	r2,8(fp)
   28068:	e0fffe05 	stb	r3,-8(fp)
   2806c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   28070:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   28074:	0149c404 	movi	r5,10000
   28078:	e13ffd17 	ldw	r4,-12(fp)
   2807c:	0022c300 	call	22c30 <__mulsi3>
   28080:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   28084:	e0bffb17 	ldw	r2,-20(fp)
   28088:	10800717 	ldw	r2,28(r2)
   2808c:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   28090:	e0bffd17 	ldw	r2,-12(fp)
   28094:	1000021e 	bne	r2,zero,280a0 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   28098:	0005883a 	mov	r2,zero
   2809c:	00006706 	br	2823c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   280a0:	e0bffb17 	ldw	r2,-20(fp)
   280a4:	10c00617 	ldw	r3,24(r2)
   280a8:	008000b4 	movhi	r2,2
   280ac:	109b6104 	addi	r2,r2,28036
   280b0:	18800226 	beq	r3,r2,280bc <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   280b4:	00bfff44 	movi	r2,-3
   280b8:	00006006 	br	2823c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   280bc:	e0bffe03 	ldbu	r2,-8(fp)
   280c0:	10000a1e 	bne	r2,zero,280ec <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   280c4:	e13ffb17 	ldw	r4,-20(fp)
   280c8:	00271000 	call	27100 <alt_avalon_i2c_enable>
   280cc:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   280d0:	e0bff817 	ldw	r2,-32(fp)
   280d4:	10000226 	beq	r2,zero,280e0 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   280d8:	e0bff817 	ldw	r2,-32(fp)
   280dc:	00005706 	br	2823c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   280e0:	01400704 	movi	r5,28
   280e4:	e13ffb17 	ldw	r4,-20(fp)
   280e8:	00286ec0 	call	286ec <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   280ec:	e0bffe03 	ldbu	r2,-8(fp)
   280f0:	100d883a 	mov	r6,r2
   280f4:	000b883a 	mov	r5,zero
   280f8:	e13ffb17 	ldw	r4,-20(fp)
   280fc:	00277680 	call	27768 <alt_avalon_i2c_send_address>
   28100:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   28104:	e0bff817 	ldw	r2,-32(fp)
   28108:	1000271e 	bne	r2,zero,281a8 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2810c:	00000f06 	br	2814c <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   28110:	e0bffc17 	ldw	r2,-16(fp)
   28114:	10800003 	ldbu	r2,0(r2)
   28118:	10803fcc 	andi	r2,r2,255
   2811c:	000f883a 	mov	r7,zero
   28120:	000d883a 	mov	r6,zero
   28124:	100b883a 	mov	r5,r2
   28128:	e13ffb17 	ldw	r4,-20(fp)
   2812c:	00276840 	call	27684 <alt_avalon_i2c_cmd_write>
   28130:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   28134:	e0bffc17 	ldw	r2,-16(fp)
   28138:	10800044 	addi	r2,r2,1
   2813c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   28140:	e0bffd17 	ldw	r2,-12(fp)
   28144:	10bfffc4 	addi	r2,r2,-1
   28148:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2814c:	e0bffd17 	ldw	r2,-12(fp)
   28150:	108000b0 	cmpltui	r2,r2,2
   28154:	1000021e 	bne	r2,zero,28160 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   28158:	e0bff817 	ldw	r2,-32(fp)
   2815c:	103fec26 	beq	r2,zero,28110 <__alt_data_end+0xfffe8110>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   28160:	e0bff817 	ldw	r2,-32(fp)
   28164:	1000101e 	bne	r2,zero,281a8 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   28168:	e0bffc17 	ldw	r2,-16(fp)
   2816c:	10800003 	ldbu	r2,0(r2)
   28170:	10803fcc 	andi	r2,r2,255
   28174:	e0ffff03 	ldbu	r3,-4(fp)
   28178:	180f883a 	mov	r7,r3
   2817c:	000d883a 	mov	r6,zero
   28180:	100b883a 	mov	r5,r2
   28184:	e13ffb17 	ldw	r4,-20(fp)
   28188:	00276840 	call	27684 <alt_avalon_i2c_cmd_write>
   2818c:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   28190:	e0bffc17 	ldw	r2,-16(fp)
   28194:	10800044 	addi	r2,r2,1
   28198:	e0bffc15 	stw	r2,-16(fp)
            --size;
   2819c:	e0bffd17 	ldw	r2,-12(fp)
   281a0:	10bfffc4 	addi	r2,r2,-1
   281a4:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   281a8:	e0bff817 	ldw	r2,-32(fp)
   281ac:	10001426 	beq	r2,zero,28200 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   281b0:	00000d06 	br	281e8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   281b4:	e0bff917 	ldw	r2,-28(fp)
   281b8:	108002a8 	cmpgeui	r2,r2,10
   281bc:	1000021e 	bne	r2,zero,281c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   281c0:	0109c404 	movi	r4,10000
   281c4:	0028bdc0 	call	28bdc <alt_busy_sleep>
            if (--timeout == 0)
   281c8:	e0bff917 	ldw	r2,-28(fp)
   281cc:	10bfffc4 	addi	r2,r2,-1
   281d0:	e0bff915 	stw	r2,-28(fp)
   281d4:	e0bff917 	ldw	r2,-28(fp)
   281d8:	1000031e 	bne	r2,zero,281e8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   281dc:	00bfff84 	movi	r2,-2
   281e0:	e0bff815 	stw	r2,-32(fp)
               break;
   281e4:	00000306 	br	281f4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   281e8:	e13ffb17 	ldw	r4,-20(fp)
   281ec:	00274f00 	call	274f0 <alt_avalon_i2c_is_busy>
   281f0:	103ff01e 	bne	r2,zero,281b4 <__alt_data_end+0xfffe81b4>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   281f4:	e13ffb17 	ldw	r4,-20(fp)
   281f8:	00271980 	call	27198 <alt_avalon_i2c_disable>
   281fc:	00000e06 	br	28238 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   28200:	e0bfff03 	ldbu	r2,-4(fp)
   28204:	10000c26 	beq	r2,zero,28238 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   28208:	01400704 	movi	r5,28
   2820c:	e13ffb17 	ldw	r4,-20(fp)
   28210:	00286ec0 	call	286ec <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   28214:	000b883a 	mov	r5,zero
   28218:	e13ffb17 	ldw	r4,-20(fp)
   2821c:	00289340 	call	28934 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   28220:	e0bffa17 	ldw	r2,-24(fp)
   28224:	00c00044 	movi	r3,1
   28228:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   2822c:	01400044 	movi	r5,1
   28230:	e13ffb17 	ldw	r4,-20(fp)
   28234:	00287900 	call	28790 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   28238:	e0bff817 	ldw	r2,-32(fp)
}
   2823c:	e037883a 	mov	sp,fp
   28240:	dfc00117 	ldw	ra,4(sp)
   28244:	df000017 	ldw	fp,0(sp)
   28248:	dec00204 	addi	sp,sp,8
   2824c:	f800283a 	ret

00028250 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   28250:	defff404 	addi	sp,sp,-48
   28254:	dfc00b15 	stw	ra,44(sp)
   28258:	df000a15 	stw	fp,40(sp)
   2825c:	df000a04 	addi	fp,sp,40
   28260:	e13ffb15 	stw	r4,-20(fp)
   28264:	e17ffc15 	stw	r5,-16(fp)
   28268:	e1bffd15 	stw	r6,-12(fp)
   2826c:	3807883a 	mov	r3,r7
   28270:	e0800217 	ldw	r2,8(fp)
   28274:	e0fffe05 	stb	r3,-8(fp)
   28278:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2827c:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   28280:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   28284:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   28288:	e0bffd17 	ldw	r2,-12(fp)
   2828c:	1000021e 	bne	r2,zero,28298 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   28290:	0005883a 	mov	r2,zero
   28294:	00006d06 	br	2844c <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   28298:	e0bffe03 	ldbu	r2,-8(fp)
   2829c:	10000a1e 	bne	r2,zero,282c8 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   282a0:	e13ffb17 	ldw	r4,-20(fp)
   282a4:	00271000 	call	27100 <alt_avalon_i2c_enable>
   282a8:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   282ac:	e0bff917 	ldw	r2,-28(fp)
   282b0:	10000226 	beq	r2,zero,282bc <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   282b4:	e0bff917 	ldw	r2,-28(fp)
   282b8:	00006406 	br	2844c <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   282bc:	01400704 	movi	r5,28
   282c0:	e13ffb17 	ldw	r4,-20(fp)
   282c4:	00286ec0 	call	286ec <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   282c8:	e0bffe03 	ldbu	r2,-8(fp)
   282cc:	100d883a 	mov	r6,r2
   282d0:	01400044 	movi	r5,1
   282d4:	e13ffb17 	ldw	r4,-20(fp)
   282d8:	00277680 	call	27768 <alt_avalon_i2c_send_address>
   282dc:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   282e0:	e0bff917 	ldw	r2,-28(fp)
   282e4:	1000341e 	bne	r2,zero,283b8 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   282e8:	00001906 	br	28350 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   282ec:	000f883a 	mov	r7,zero
   282f0:	000d883a 	mov	r6,zero
   282f4:	000b883a 	mov	r5,zero
   282f8:	e13ffb17 	ldw	r4,-20(fp)
   282fc:	00276840 	call	27684 <alt_avalon_i2c_cmd_write>
   28300:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   28304:	e0bff817 	ldw	r2,-32(fp)
   28308:	10800044 	addi	r2,r2,1
   2830c:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   28310:	e0bff917 	ldw	r2,-28(fp)
   28314:	10000e1e 	bne	r2,zero,28350 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   28318:	e0bffa04 	addi	r2,fp,-24
   2831c:	100f883a 	mov	r7,r2
   28320:	000d883a 	mov	r6,zero
   28324:	e17ffc17 	ldw	r5,-16(fp)
   28328:	e13ffb17 	ldw	r4,-20(fp)
   2832c:	00275340 	call	27534 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   28330:	e0bffa17 	ldw	r2,-24(fp)
   28334:	e0fffc17 	ldw	r3,-16(fp)
   28338:	1885883a 	add	r2,r3,r2
   2833c:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   28340:	e0bffa17 	ldw	r2,-24(fp)
   28344:	e0fff717 	ldw	r3,-36(fp)
   28348:	1885883a 	add	r2,r3,r2
   2834c:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   28350:	e0bffd17 	ldw	r2,-12(fp)
   28354:	10bfffc4 	addi	r2,r2,-1
   28358:	e0fff817 	ldw	r3,-32(fp)
   2835c:	1880022e 	bgeu	r3,r2,28368 <alt_avalon_i2c_master_receive+0x118>
   28360:	e0bff917 	ldw	r2,-28(fp)
   28364:	103fe126 	beq	r2,zero,282ec <__alt_data_end+0xfffe82ec>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   28368:	e0bff917 	ldw	r2,-28(fp)
   2836c:	1000121e 	bne	r2,zero,283b8 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   28370:	e0bfff03 	ldbu	r2,-4(fp)
   28374:	100f883a 	mov	r7,r2
   28378:	000d883a 	mov	r6,zero
   2837c:	000b883a 	mov	r5,zero
   28380:	e13ffb17 	ldw	r4,-20(fp)
   28384:	00276840 	call	27684 <alt_avalon_i2c_cmd_write>
   28388:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   2838c:	00000a06 	br	283b8 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   28390:	e17ffc17 	ldw	r5,-16(fp)
   28394:	e13ffb17 	ldw	r4,-20(fp)
   28398:	00275dc0 	call	275dc <alt_avalon_i2c_rx_read>
   2839c:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   283a0:	e0bffc17 	ldw	r2,-16(fp)
   283a4:	10800044 	addi	r2,r2,1
   283a8:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   283ac:	e0bff717 	ldw	r2,-36(fp)
   283b0:	10800044 	addi	r2,r2,1
   283b4:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   283b8:	e0fff717 	ldw	r3,-36(fp)
   283bc:	e0bffd17 	ldw	r2,-12(fp)
   283c0:	1880022e 	bgeu	r3,r2,283cc <alt_avalon_i2c_master_receive+0x17c>
   283c4:	e0bff917 	ldw	r2,-28(fp)
   283c8:	103ff126 	beq	r2,zero,28390 <__alt_data_end+0xfffe8390>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   283cc:	e0bfff03 	ldbu	r2,-4(fp)
   283d0:	1000021e 	bne	r2,zero,283dc <alt_avalon_i2c_master_receive+0x18c>
   283d4:	e0bff917 	ldw	r2,-28(fp)
   283d8:	10001b26 	beq	r2,zero,28448 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   283dc:	0149c404 	movi	r5,10000
   283e0:	e13ffd17 	ldw	r4,-12(fp)
   283e4:	0022c300 	call	22c30 <__mulsi3>
   283e8:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   283ec:	00000d06 	br	28424 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   283f0:	e0bff617 	ldw	r2,-40(fp)
   283f4:	108002a8 	cmpgeui	r2,r2,10
   283f8:	1000021e 	bne	r2,zero,28404 <alt_avalon_i2c_master_receive+0x1b4>
   283fc:	0109c404 	movi	r4,10000
   28400:	0028bdc0 	call	28bdc <alt_busy_sleep>
            if (--timeout == 0)
   28404:	e0bff617 	ldw	r2,-40(fp)
   28408:	10bfffc4 	addi	r2,r2,-1
   2840c:	e0bff615 	stw	r2,-40(fp)
   28410:	e0bff617 	ldw	r2,-40(fp)
   28414:	1000031e 	bne	r2,zero,28424 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   28418:	00bfff84 	movi	r2,-2
   2841c:	e0bff915 	stw	r2,-28(fp)
               break;
   28420:	00000306 	br	28430 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   28424:	e13ffb17 	ldw	r4,-20(fp)
   28428:	00274f00 	call	274f0 <alt_avalon_i2c_is_busy>
   2842c:	103ff01e 	bne	r2,zero,283f0 <__alt_data_end+0xfffe83f0>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   28430:	e0bff904 	addi	r2,fp,-28
   28434:	100b883a 	mov	r5,r2
   28438:	e13ffb17 	ldw	r4,-20(fp)
   2843c:	00278c40 	call	278c4 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   28440:	e13ffb17 	ldw	r4,-20(fp)
   28444:	00271980 	call	27198 <alt_avalon_i2c_disable>
    }

    return status;
   28448:	e0bff917 	ldw	r2,-28(fp)
}
   2844c:	e037883a 	mov	sp,fp
   28450:	dfc00117 	ldw	ra,4(sp)
   28454:	df000017 	ldw	fp,0(sp)
   28458:	dec00204 	addi	sp,sp,8
   2845c:	f800283a 	ret

00028460 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   28460:	defff504 	addi	sp,sp,-44
   28464:	dfc00a15 	stw	ra,40(sp)
   28468:	df000915 	stw	fp,36(sp)
   2846c:	df000904 	addi	fp,sp,36
   28470:	e13ffb15 	stw	r4,-20(fp)
   28474:	e17ffc15 	stw	r5,-16(fp)
   28478:	e1bffd15 	stw	r6,-12(fp)
   2847c:	3807883a 	mov	r3,r7
   28480:	e0800217 	ldw	r2,8(fp)
   28484:	e0fffe05 	stb	r3,-8(fp)
   28488:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2848c:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   28490:	e0bffb17 	ldw	r2,-20(fp)
   28494:	10800717 	ldw	r2,28(r2)
   28498:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   2849c:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   284a0:	e0bffd17 	ldw	r2,-12(fp)
   284a4:	1000021e 	bne	r2,zero,284b0 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   284a8:	0005883a 	mov	r2,zero
   284ac:	00006306 	br	2863c <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   284b0:	e0bffb17 	ldw	r2,-20(fp)
   284b4:	10c00617 	ldw	r3,24(r2)
   284b8:	008000b4 	movhi	r2,2
   284bc:	109b6104 	addi	r2,r2,28036
   284c0:	18800226 	beq	r3,r2,284cc <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   284c4:	00bfff44 	movi	r2,-3
   284c8:	00005c06 	br	2863c <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   284cc:	e0bffe03 	ldbu	r2,-8(fp)
   284d0:	10000a1e 	bne	r2,zero,284fc <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   284d4:	e13ffb17 	ldw	r4,-20(fp)
   284d8:	00271000 	call	27100 <alt_avalon_i2c_enable>
   284dc:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   284e0:	e0bff717 	ldw	r2,-36(fp)
   284e4:	10000226 	beq	r2,zero,284f0 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   284e8:	e0bff717 	ldw	r2,-36(fp)
   284ec:	00005306 	br	2863c <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   284f0:	01400704 	movi	r5,28
   284f4:	e13ffb17 	ldw	r4,-20(fp)
   284f8:	00286ec0 	call	286ec <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   284fc:	e0bffe03 	ldbu	r2,-8(fp)
   28500:	100d883a 	mov	r6,r2
   28504:	01400044 	movi	r5,1
   28508:	e13ffb17 	ldw	r4,-20(fp)
   2850c:	00277680 	call	27768 <alt_avalon_i2c_send_address>
   28510:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   28514:	e0bff717 	ldw	r2,-36(fp)
   28518:	1000191e 	bne	r2,zero,28580 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2851c:	00000906 	br	28544 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   28520:	000f883a 	mov	r7,zero
   28524:	000d883a 	mov	r6,zero
   28528:	000b883a 	mov	r5,zero
   2852c:	e13ffb17 	ldw	r4,-20(fp)
   28530:	00276840 	call	27684 <alt_avalon_i2c_cmd_write>
   28534:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   28538:	e0bff917 	ldw	r2,-28(fp)
   2853c:	10800044 	addi	r2,r2,1
   28540:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   28544:	e0bffd17 	ldw	r2,-12(fp)
   28548:	10bfffc4 	addi	r2,r2,-1
   2854c:	e0fff917 	ldw	r3,-28(fp)
   28550:	1880022e 	bgeu	r3,r2,2855c <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   28554:	e0bff717 	ldw	r2,-36(fp)
   28558:	103ff126 	beq	r2,zero,28520 <__alt_data_end+0xfffe8520>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2855c:	e0bff717 	ldw	r2,-36(fp)
   28560:	1000071e 	bne	r2,zero,28580 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   28564:	e0bfff03 	ldbu	r2,-4(fp)
   28568:	100f883a 	mov	r7,r2
   2856c:	000d883a 	mov	r6,zero
   28570:	000b883a 	mov	r5,zero
   28574:	e13ffb17 	ldw	r4,-20(fp)
   28578:	00276840 	call	27684 <alt_avalon_i2c_cmd_write>
   2857c:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   28580:	e0bff717 	ldw	r2,-36(fp)
   28584:	10001826 	beq	r2,zero,285e8 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   28588:	0149c404 	movi	r5,10000
   2858c:	e13ffd17 	ldw	r4,-12(fp)
   28590:	0022c300 	call	22c30 <__mulsi3>
   28594:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   28598:	00000d06 	br	285d0 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   2859c:	e0bff817 	ldw	r2,-32(fp)
   285a0:	108002a8 	cmpgeui	r2,r2,10
   285a4:	1000021e 	bne	r2,zero,285b0 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   285a8:	0109c404 	movi	r4,10000
   285ac:	0028bdc0 	call	28bdc <alt_busy_sleep>
            if (--timeout == 0)
   285b0:	e0bff817 	ldw	r2,-32(fp)
   285b4:	10bfffc4 	addi	r2,r2,-1
   285b8:	e0bff815 	stw	r2,-32(fp)
   285bc:	e0bff817 	ldw	r2,-32(fp)
   285c0:	1000031e 	bne	r2,zero,285d0 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   285c4:	00bfff84 	movi	r2,-2
   285c8:	e0bff715 	stw	r2,-36(fp)
               break;
   285cc:	00000306 	br	285dc <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   285d0:	e13ffb17 	ldw	r4,-20(fp)
   285d4:	00274f00 	call	274f0 <alt_avalon_i2c_is_busy>
   285d8:	103ff01e 	bne	r2,zero,2859c <__alt_data_end+0xfffe859c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   285dc:	e13ffb17 	ldw	r4,-20(fp)
   285e0:	00271980 	call	27198 <alt_avalon_i2c_disable>
   285e4:	00001406 	br	28638 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   285e8:	e0bfff03 	ldbu	r2,-4(fp)
   285ec:	10001226 	beq	r2,zero,28638 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   285f0:	01400704 	movi	r5,28
   285f4:	e13ffb17 	ldw	r4,-20(fp)
   285f8:	00286ec0 	call	286ec <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   285fc:	000b883a 	mov	r5,zero
   28600:	e13ffb17 	ldw	r4,-20(fp)
   28604:	00288840 	call	28884 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   28608:	e0bffa17 	ldw	r2,-24(fp)
   2860c:	00c00084 	movi	r3,2
   28610:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   28614:	e0bffa17 	ldw	r2,-24(fp)
   28618:	e0fffc17 	ldw	r3,-16(fp)
   2861c:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   28620:	e0bffa17 	ldw	r2,-24(fp)
   28624:	e0fffd17 	ldw	r3,-12(fp)
   28628:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   2862c:	01400084 	movi	r5,2
   28630:	e13ffb17 	ldw	r4,-20(fp)
   28634:	00287900 	call	28790 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   28638:	e0bff717 	ldw	r2,-36(fp)
}
   2863c:	e037883a 	mov	sp,fp
   28640:	dfc00117 	ldw	ra,4(sp)
   28644:	df000017 	ldw	fp,0(sp)
   28648:	dec00204 	addi	sp,sp,8
   2864c:	f800283a 	ret

00028650 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   28650:	defffd04 	addi	sp,sp,-12
   28654:	df000215 	stw	fp,8(sp)
   28658:	df000204 	addi	fp,sp,8
   2865c:	e13ffe15 	stw	r4,-8(fp)
   28660:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   28664:	e0bffe17 	ldw	r2,-8(fp)
   28668:	10800317 	ldw	r2,12(r2)
   2866c:	10800404 	addi	r2,r2,16
   28670:	10c00037 	ldwio	r3,0(r2)
   28674:	e0bffe17 	ldw	r2,-8(fp)
   28678:	10800317 	ldw	r2,12(r2)
   2867c:	10800304 	addi	r2,r2,12
   28680:	10800037 	ldwio	r2,0(r2)
   28684:	1884703a 	and	r2,r3,r2
   28688:	1007883a 	mov	r3,r2
   2868c:	e0bfff17 	ldw	r2,-4(fp)
   28690:	10c00015 	stw	r3,0(r2)
}
   28694:	0001883a 	nop
   28698:	e037883a 	mov	sp,fp
   2869c:	df000017 	ldw	fp,0(sp)
   286a0:	dec00104 	addi	sp,sp,4
   286a4:	f800283a 	ret

000286a8 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   286a8:	defffd04 	addi	sp,sp,-12
   286ac:	df000215 	stw	fp,8(sp)
   286b0:	df000204 	addi	fp,sp,8
   286b4:	e13ffe15 	stw	r4,-8(fp)
   286b8:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   286bc:	e0bffe17 	ldw	r2,-8(fp)
   286c0:	10800317 	ldw	r2,12(r2)
   286c4:	10800404 	addi	r2,r2,16
   286c8:	10800037 	ldwio	r2,0(r2)
   286cc:	1007883a 	mov	r3,r2
   286d0:	e0bfff17 	ldw	r2,-4(fp)
   286d4:	10c00015 	stw	r3,0(r2)
}
   286d8:	0001883a 	nop
   286dc:	e037883a 	mov	sp,fp
   286e0:	df000017 	ldw	fp,0(sp)
   286e4:	dec00104 	addi	sp,sp,4
   286e8:	f800283a 	ret

000286ec <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   286ec:	defffd04 	addi	sp,sp,-12
   286f0:	df000215 	stw	fp,8(sp)
   286f4:	df000204 	addi	fp,sp,8
   286f8:	e13ffe15 	stw	r4,-8(fp)
   286fc:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   28700:	e0bffe17 	ldw	r2,-8(fp)
   28704:	10800317 	ldw	r2,12(r2)
   28708:	10800404 	addi	r2,r2,16
   2870c:	e0ffff17 	ldw	r3,-4(fp)
   28710:	10c00035 	stwio	r3,0(r2)
}
   28714:	0001883a 	nop
   28718:	e037883a 	mov	sp,fp
   2871c:	df000017 	ldw	fp,0(sp)
   28720:	dec00104 	addi	sp,sp,4
   28724:	f800283a 	ret

00028728 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   28728:	defffb04 	addi	sp,sp,-20
   2872c:	dfc00415 	stw	ra,16(sp)
   28730:	df000315 	stw	fp,12(sp)
   28734:	df000304 	addi	fp,sp,12
   28738:	e13ffe15 	stw	r4,-8(fp)
   2873c:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   28740:	e17ffd04 	addi	r5,fp,-12
   28744:	e13ffe17 	ldw	r4,-8(fp)
   28748:	00287f40 	call	287f4 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   2874c:	e0bfff17 	ldw	r2,-4(fp)
   28750:	0086303a 	nor	r3,zero,r2
   28754:	e0bffd17 	ldw	r2,-12(fp)
   28758:	1884703a 	and	r2,r3,r2
   2875c:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   28760:	e0bffe17 	ldw	r2,-8(fp)
   28764:	10800317 	ldw	r2,12(r2)
   28768:	10800304 	addi	r2,r2,12
   2876c:	e0fffd17 	ldw	r3,-12(fp)
   28770:	18c007cc 	andi	r3,r3,31
   28774:	10c00035 	stwio	r3,0(r2)
}
   28778:	0001883a 	nop
   2877c:	e037883a 	mov	sp,fp
   28780:	dfc00117 	ldw	ra,4(sp)
   28784:	df000017 	ldw	fp,0(sp)
   28788:	dec00204 	addi	sp,sp,8
   2878c:	f800283a 	ret

00028790 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   28790:	defffb04 	addi	sp,sp,-20
   28794:	dfc00415 	stw	ra,16(sp)
   28798:	df000315 	stw	fp,12(sp)
   2879c:	df000304 	addi	fp,sp,12
   287a0:	e13ffe15 	stw	r4,-8(fp)
   287a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   287a8:	e17ffd04 	addi	r5,fp,-12
   287ac:	e13ffe17 	ldw	r4,-8(fp)
   287b0:	00287f40 	call	287f4 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   287b4:	e0fffd17 	ldw	r3,-12(fp)
   287b8:	e0bfff17 	ldw	r2,-4(fp)
   287bc:	1884b03a 	or	r2,r3,r2
   287c0:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   287c4:	e0bffe17 	ldw	r2,-8(fp)
   287c8:	10800317 	ldw	r2,12(r2)
   287cc:	10800304 	addi	r2,r2,12
   287d0:	e0fffd17 	ldw	r3,-12(fp)
   287d4:	18c007cc 	andi	r3,r3,31
   287d8:	10c00035 	stwio	r3,0(r2)
}
   287dc:	0001883a 	nop
   287e0:	e037883a 	mov	sp,fp
   287e4:	dfc00117 	ldw	ra,4(sp)
   287e8:	df000017 	ldw	fp,0(sp)
   287ec:	dec00204 	addi	sp,sp,8
   287f0:	f800283a 	ret

000287f4 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   287f4:	defffd04 	addi	sp,sp,-12
   287f8:	df000215 	stw	fp,8(sp)
   287fc:	df000204 	addi	fp,sp,8
   28800:	e13ffe15 	stw	r4,-8(fp)
   28804:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   28808:	e0bffe17 	ldw	r2,-8(fp)
   2880c:	10800317 	ldw	r2,12(r2)
   28810:	10800304 	addi	r2,r2,12
   28814:	10800037 	ldwio	r2,0(r2)
   28818:	10c007cc 	andi	r3,r2,31
   2881c:	e0bfff17 	ldw	r2,-4(fp)
   28820:	10c00015 	stw	r3,0(r2)
}
   28824:	0001883a 	nop
   28828:	e037883a 	mov	sp,fp
   2882c:	df000017 	ldw	fp,0(sp)
   28830:	dec00104 	addi	sp,sp,4
   28834:	f800283a 	ret

00028838 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   28838:	defffd04 	addi	sp,sp,-12
   2883c:	df000215 	stw	fp,8(sp)
   28840:	df000204 	addi	fp,sp,8
   28844:	e13ffe15 	stw	r4,-8(fp)
   28848:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   2884c:	e0bffe17 	ldw	r2,-8(fp)
   28850:	10800317 	ldw	r2,12(r2)
   28854:	10800204 	addi	r2,r2,8
   28858:	10800037 	ldwio	r2,0(r2)
   2885c:	10800c0c 	andi	r2,r2,48
   28860:	1005d13a 	srai	r2,r2,4
   28864:	1007883a 	mov	r3,r2
   28868:	e0bfff17 	ldw	r2,-4(fp)
   2886c:	10c00015 	stw	r3,0(r2)
}
   28870:	0001883a 	nop
   28874:	e037883a 	mov	sp,fp
   28878:	df000017 	ldw	fp,0(sp)
   2887c:	dec00104 	addi	sp,sp,4
   28880:	f800283a 	ret

00028884 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   28884:	defffd04 	addi	sp,sp,-12
   28888:	df000215 	stw	fp,8(sp)
   2888c:	df000204 	addi	fp,sp,8
   28890:	e13ffe15 	stw	r4,-8(fp)
   28894:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   28898:	e0bffe17 	ldw	r2,-8(fp)
   2889c:	10800317 	ldw	r2,12(r2)
   288a0:	10800204 	addi	r2,r2,8
   288a4:	e0fffe17 	ldw	r3,-8(fp)
   288a8:	18c00317 	ldw	r3,12(r3)
   288ac:	18c00204 	addi	r3,r3,8
   288b0:	18c00037 	ldwio	r3,0(r3)
   288b4:	1809883a 	mov	r4,r3
   288b8:	00fff3c4 	movi	r3,-49
   288bc:	20c8703a 	and	r4,r4,r3
   288c0:	e0ffff17 	ldw	r3,-4(fp)
   288c4:	1806913a 	slli	r3,r3,4
   288c8:	18c00c0c 	andi	r3,r3,48
   288cc:	20c6b03a 	or	r3,r4,r3
   288d0:	10c00035 	stwio	r3,0(r2)
}
   288d4:	0001883a 	nop
   288d8:	e037883a 	mov	sp,fp
   288dc:	df000017 	ldw	fp,0(sp)
   288e0:	dec00104 	addi	sp,sp,4
   288e4:	f800283a 	ret

000288e8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   288e8:	defffd04 	addi	sp,sp,-12
   288ec:	df000215 	stw	fp,8(sp)
   288f0:	df000204 	addi	fp,sp,8
   288f4:	e13ffe15 	stw	r4,-8(fp)
   288f8:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   288fc:	e0bffe17 	ldw	r2,-8(fp)
   28900:	10800317 	ldw	r2,12(r2)
   28904:	10800204 	addi	r2,r2,8
   28908:	10800037 	ldwio	r2,0(r2)
   2890c:	1080030c 	andi	r2,r2,12
   28910:	1005d0ba 	srai	r2,r2,2
   28914:	1007883a 	mov	r3,r2
   28918:	e0bfff17 	ldw	r2,-4(fp)
   2891c:	10c00015 	stw	r3,0(r2)
}
   28920:	0001883a 	nop
   28924:	e037883a 	mov	sp,fp
   28928:	df000017 	ldw	fp,0(sp)
   2892c:	dec00104 	addi	sp,sp,4
   28930:	f800283a 	ret

00028934 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   28934:	defffd04 	addi	sp,sp,-12
   28938:	df000215 	stw	fp,8(sp)
   2893c:	df000204 	addi	fp,sp,8
   28940:	e13ffe15 	stw	r4,-8(fp)
   28944:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   28948:	e0bffe17 	ldw	r2,-8(fp)
   2894c:	10800317 	ldw	r2,12(r2)
   28950:	10c00204 	addi	r3,r2,8
   28954:	e0bffe17 	ldw	r2,-8(fp)
   28958:	10800317 	ldw	r2,12(r2)
   2895c:	10800204 	addi	r2,r2,8
   28960:	10800037 	ldwio	r2,0(r2)
   28964:	1009883a 	mov	r4,r2
   28968:	00bffcc4 	movi	r2,-13
   2896c:	2088703a 	and	r4,r4,r2
   28970:	e0bfff17 	ldw	r2,-4(fp)
   28974:	1085883a 	add	r2,r2,r2
   28978:	1085883a 	add	r2,r2,r2
   2897c:	1080030c 	andi	r2,r2,12
   28980:	2084b03a 	or	r2,r4,r2
   28984:	18800035 	stwio	r2,0(r3)
}
   28988:	0001883a 	nop
   2898c:	e037883a 	mov	sp,fp
   28990:	df000017 	ldw	fp,0(sp)
   28994:	dec00104 	addi	sp,sp,4
   28998:	f800283a 	ret

0002899c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2899c:	defffa04 	addi	sp,sp,-24
   289a0:	dfc00515 	stw	ra,20(sp)
   289a4:	df000415 	stw	fp,16(sp)
   289a8:	df000404 	addi	fp,sp,16
   289ac:	e13ffd15 	stw	r4,-12(fp)
   289b0:	e17ffe15 	stw	r5,-8(fp)
   289b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   289b8:	e0bffd17 	ldw	r2,-12(fp)
   289bc:	10800017 	ldw	r2,0(r2)
   289c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   289c4:	e0bffc17 	ldw	r2,-16(fp)
   289c8:	10c00a04 	addi	r3,r2,40
   289cc:	e0bffd17 	ldw	r2,-12(fp)
   289d0:	10800217 	ldw	r2,8(r2)
   289d4:	100f883a 	mov	r7,r2
   289d8:	e1bfff17 	ldw	r6,-4(fp)
   289dc:	e17ffe17 	ldw	r5,-8(fp)
   289e0:	1809883a 	mov	r4,r3
   289e4:	0028a5c0 	call	28a5c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   289e8:	e037883a 	mov	sp,fp
   289ec:	dfc00117 	ldw	ra,4(sp)
   289f0:	df000017 	ldw	fp,0(sp)
   289f4:	dec00204 	addi	sp,sp,8
   289f8:	f800283a 	ret

000289fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   289fc:	defffa04 	addi	sp,sp,-24
   28a00:	dfc00515 	stw	ra,20(sp)
   28a04:	df000415 	stw	fp,16(sp)
   28a08:	df000404 	addi	fp,sp,16
   28a0c:	e13ffd15 	stw	r4,-12(fp)
   28a10:	e17ffe15 	stw	r5,-8(fp)
   28a14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   28a18:	e0bffd17 	ldw	r2,-12(fp)
   28a1c:	10800017 	ldw	r2,0(r2)
   28a20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   28a24:	e0bffc17 	ldw	r2,-16(fp)
   28a28:	10c00a04 	addi	r3,r2,40
   28a2c:	e0bffd17 	ldw	r2,-12(fp)
   28a30:	10800217 	ldw	r2,8(r2)
   28a34:	100f883a 	mov	r7,r2
   28a38:	e1bfff17 	ldw	r6,-4(fp)
   28a3c:	e17ffe17 	ldw	r5,-8(fp)
   28a40:	1809883a 	mov	r4,r3
   28a44:	0028b480 	call	28b48 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   28a48:	e037883a 	mov	sp,fp
   28a4c:	dfc00117 	ldw	ra,4(sp)
   28a50:	df000017 	ldw	fp,0(sp)
   28a54:	dec00204 	addi	sp,sp,8
   28a58:	f800283a 	ret

00028a5c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   28a5c:	defff704 	addi	sp,sp,-36
   28a60:	df000815 	stw	fp,32(sp)
   28a64:	df000804 	addi	fp,sp,32
   28a68:	e13ffc15 	stw	r4,-16(fp)
   28a6c:	e17ffd15 	stw	r5,-12(fp)
   28a70:	e1bffe15 	stw	r6,-8(fp)
   28a74:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   28a78:	e0bffc17 	ldw	r2,-16(fp)
   28a7c:	10800017 	ldw	r2,0(r2)
   28a80:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   28a84:	e0bffd17 	ldw	r2,-12(fp)
   28a88:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   28a8c:	e0bffe17 	ldw	r2,-8(fp)
   28a90:	e0fffd17 	ldw	r3,-12(fp)
   28a94:	1885883a 	add	r2,r3,r2
   28a98:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   28a9c:	00001206 	br	28ae8 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   28aa0:	e0bff917 	ldw	r2,-28(fp)
   28aa4:	10800037 	ldwio	r2,0(r2)
   28aa8:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   28aac:	e0bffb17 	ldw	r2,-20(fp)
   28ab0:	10a0000c 	andi	r2,r2,32768
   28ab4:	10000626 	beq	r2,zero,28ad0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   28ab8:	e0bff817 	ldw	r2,-32(fp)
   28abc:	10c00044 	addi	r3,r2,1
   28ac0:	e0fff815 	stw	r3,-32(fp)
   28ac4:	e0fffb17 	ldw	r3,-20(fp)
   28ac8:	10c00005 	stb	r3,0(r2)
   28acc:	00000606 	br	28ae8 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   28ad0:	e0fff817 	ldw	r3,-32(fp)
   28ad4:	e0bffd17 	ldw	r2,-12(fp)
   28ad8:	1880071e 	bne	r3,r2,28af8 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   28adc:	e0bfff17 	ldw	r2,-4(fp)
   28ae0:	1090000c 	andi	r2,r2,16384
   28ae4:	1000061e 	bne	r2,zero,28b00 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   28ae8:	e0fff817 	ldw	r3,-32(fp)
   28aec:	e0bffa17 	ldw	r2,-24(fp)
   28af0:	18bfeb36 	bltu	r3,r2,28aa0 <__alt_data_end+0xfffe8aa0>
   28af4:	00000306 	br	28b04 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   28af8:	0001883a 	nop
   28afc:	00000106 	br	28b04 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   28b00:	0001883a 	nop
    
  }

  if (ptr != buffer)
   28b04:	e0fff817 	ldw	r3,-32(fp)
   28b08:	e0bffd17 	ldw	r2,-12(fp)
   28b0c:	18800426 	beq	r3,r2,28b20 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   28b10:	e0fff817 	ldw	r3,-32(fp)
   28b14:	e0bffd17 	ldw	r2,-12(fp)
   28b18:	1885c83a 	sub	r2,r3,r2
   28b1c:	00000606 	br	28b38 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   28b20:	e0bfff17 	ldw	r2,-4(fp)
   28b24:	1090000c 	andi	r2,r2,16384
   28b28:	10000226 	beq	r2,zero,28b34 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   28b2c:	00bffd44 	movi	r2,-11
   28b30:	00000106 	br	28b38 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   28b34:	00bffec4 	movi	r2,-5
}
   28b38:	e037883a 	mov	sp,fp
   28b3c:	df000017 	ldw	fp,0(sp)
   28b40:	dec00104 	addi	sp,sp,4
   28b44:	f800283a 	ret

00028b48 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   28b48:	defff904 	addi	sp,sp,-28
   28b4c:	df000615 	stw	fp,24(sp)
   28b50:	df000604 	addi	fp,sp,24
   28b54:	e13ffc15 	stw	r4,-16(fp)
   28b58:	e17ffd15 	stw	r5,-12(fp)
   28b5c:	e1bffe15 	stw	r6,-8(fp)
   28b60:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   28b64:	e0bffc17 	ldw	r2,-16(fp)
   28b68:	10800017 	ldw	r2,0(r2)
   28b6c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   28b70:	e0bffe17 	ldw	r2,-8(fp)
   28b74:	e0fffd17 	ldw	r3,-12(fp)
   28b78:	1885883a 	add	r2,r3,r2
   28b7c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   28b80:	00000e06 	br	28bbc <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   28b84:	e0bffa17 	ldw	r2,-24(fp)
   28b88:	10800104 	addi	r2,r2,4
   28b8c:	10800037 	ldwio	r2,0(r2)
   28b90:	10bfffec 	andhi	r2,r2,65535
   28b94:	10000926 	beq	r2,zero,28bbc <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   28b98:	e0fffa17 	ldw	r3,-24(fp)
   28b9c:	e0bffd17 	ldw	r2,-12(fp)
   28ba0:	11000044 	addi	r4,r2,1
   28ba4:	e13ffd15 	stw	r4,-12(fp)
   28ba8:	10800003 	ldbu	r2,0(r2)
   28bac:	10803fcc 	andi	r2,r2,255
   28bb0:	1080201c 	xori	r2,r2,128
   28bb4:	10bfe004 	addi	r2,r2,-128
   28bb8:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   28bbc:	e0fffd17 	ldw	r3,-12(fp)
   28bc0:	e0bffb17 	ldw	r2,-20(fp)
   28bc4:	18bfef36 	bltu	r3,r2,28b84 <__alt_data_end+0xfffe8b84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   28bc8:	e0bffe17 	ldw	r2,-8(fp)
}
   28bcc:	e037883a 	mov	sp,fp
   28bd0:	df000017 	ldw	fp,0(sp)
   28bd4:	dec00104 	addi	sp,sp,4
   28bd8:	f800283a 	ret

00028bdc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   28bdc:	defffe04 	addi	sp,sp,-8
   28be0:	df000115 	stw	fp,4(sp)
   28be4:	df000104 	addi	fp,sp,4
   28be8:	e13fff15 	stw	r4,-4(fp)
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   28bec:	0005883a 	mov	r2,zero
}
   28bf0:	e037883a 	mov	sp,fp
   28bf4:	df000017 	ldw	fp,0(sp)
   28bf8:	dec00104 	addi	sp,sp,4
   28bfc:	f800283a 	ret

00028c00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   28c00:	defffe04 	addi	sp,sp,-8
   28c04:	dfc00115 	stw	ra,4(sp)
   28c08:	df000015 	stw	fp,0(sp)
   28c0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   28c10:	d0a00f17 	ldw	r2,-32708(gp)
   28c14:	10000326 	beq	r2,zero,28c24 <alt_get_errno+0x24>
   28c18:	d0a00f17 	ldw	r2,-32708(gp)
   28c1c:	103ee83a 	callr	r2
   28c20:	00000106 	br	28c28 <alt_get_errno+0x28>
   28c24:	d0a0e204 	addi	r2,gp,-31864
}
   28c28:	e037883a 	mov	sp,fp
   28c2c:	dfc00117 	ldw	ra,4(sp)
   28c30:	df000017 	ldw	fp,0(sp)
   28c34:	dec00204 	addi	sp,sp,8
   28c38:	f800283a 	ret

00028c3c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   28c3c:	defffb04 	addi	sp,sp,-20
   28c40:	dfc00415 	stw	ra,16(sp)
   28c44:	df000315 	stw	fp,12(sp)
   28c48:	df000304 	addi	fp,sp,12
   28c4c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   28c50:	e0bfff17 	ldw	r2,-4(fp)
   28c54:	10000816 	blt	r2,zero,28c78 <close+0x3c>
   28c58:	01400304 	movi	r5,12
   28c5c:	e13fff17 	ldw	r4,-4(fp)
   28c60:	0022c300 	call	22c30 <__mulsi3>
   28c64:	1007883a 	mov	r3,r2
   28c68:	008000f4 	movhi	r2,3
   28c6c:	10bee004 	addi	r2,r2,-1152
   28c70:	1885883a 	add	r2,r3,r2
   28c74:	00000106 	br	28c7c <close+0x40>
   28c78:	0005883a 	mov	r2,zero
   28c7c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   28c80:	e0bffd17 	ldw	r2,-12(fp)
   28c84:	10001926 	beq	r2,zero,28cec <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   28c88:	e0bffd17 	ldw	r2,-12(fp)
   28c8c:	10800017 	ldw	r2,0(r2)
   28c90:	10800417 	ldw	r2,16(r2)
   28c94:	10000626 	beq	r2,zero,28cb0 <close+0x74>
   28c98:	e0bffd17 	ldw	r2,-12(fp)
   28c9c:	10800017 	ldw	r2,0(r2)
   28ca0:	10800417 	ldw	r2,16(r2)
   28ca4:	e13ffd17 	ldw	r4,-12(fp)
   28ca8:	103ee83a 	callr	r2
   28cac:	00000106 	br	28cb4 <close+0x78>
   28cb0:	0005883a 	mov	r2,zero
   28cb4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   28cb8:	e13fff17 	ldw	r4,-4(fp)
   28cbc:	002989c0 	call	2989c <alt_release_fd>
    if (rval < 0)
   28cc0:	e0bffe17 	ldw	r2,-8(fp)
   28cc4:	1000070e 	bge	r2,zero,28ce4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   28cc8:	0028c000 	call	28c00 <alt_get_errno>
   28ccc:	1007883a 	mov	r3,r2
   28cd0:	e0bffe17 	ldw	r2,-8(fp)
   28cd4:	0085c83a 	sub	r2,zero,r2
   28cd8:	18800015 	stw	r2,0(r3)
      return -1;
   28cdc:	00bfffc4 	movi	r2,-1
   28ce0:	00000706 	br	28d00 <close+0xc4>
    }
    return 0;
   28ce4:	0005883a 	mov	r2,zero
   28ce8:	00000506 	br	28d00 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   28cec:	0028c000 	call	28c00 <alt_get_errno>
   28cf0:	1007883a 	mov	r3,r2
   28cf4:	00801444 	movi	r2,81
   28cf8:	18800015 	stw	r2,0(r3)
    return -1;
   28cfc:	00bfffc4 	movi	r2,-1
  }
}
   28d00:	e037883a 	mov	sp,fp
   28d04:	dfc00117 	ldw	ra,4(sp)
   28d08:	df000017 	ldw	fp,0(sp)
   28d0c:	dec00204 	addi	sp,sp,8
   28d10:	f800283a 	ret

00028d14 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   28d14:	deffff04 	addi	sp,sp,-4
   28d18:	df000015 	stw	fp,0(sp)
   28d1c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   28d20:	0001883a 	nop
   28d24:	e037883a 	mov	sp,fp
   28d28:	df000017 	ldw	fp,0(sp)
   28d2c:	dec00104 	addi	sp,sp,4
   28d30:	f800283a 	ret

00028d34 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   28d34:	defffc04 	addi	sp,sp,-16
   28d38:	df000315 	stw	fp,12(sp)
   28d3c:	df000304 	addi	fp,sp,12
   28d40:	e13ffd15 	stw	r4,-12(fp)
   28d44:	e17ffe15 	stw	r5,-8(fp)
   28d48:	e1bfff15 	stw	r6,-4(fp)
  return len;
   28d4c:	e0bfff17 	ldw	r2,-4(fp)
}
   28d50:	e037883a 	mov	sp,fp
   28d54:	df000017 	ldw	fp,0(sp)
   28d58:	dec00104 	addi	sp,sp,4
   28d5c:	f800283a 	ret

00028d60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   28d60:	defffe04 	addi	sp,sp,-8
   28d64:	dfc00115 	stw	ra,4(sp)
   28d68:	df000015 	stw	fp,0(sp)
   28d6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   28d70:	d0a00f17 	ldw	r2,-32708(gp)
   28d74:	10000326 	beq	r2,zero,28d84 <alt_get_errno+0x24>
   28d78:	d0a00f17 	ldw	r2,-32708(gp)
   28d7c:	103ee83a 	callr	r2
   28d80:	00000106 	br	28d88 <alt_get_errno+0x28>
   28d84:	d0a0e204 	addi	r2,gp,-31864
}
   28d88:	e037883a 	mov	sp,fp
   28d8c:	dfc00117 	ldw	ra,4(sp)
   28d90:	df000017 	ldw	fp,0(sp)
   28d94:	dec00204 	addi	sp,sp,8
   28d98:	f800283a 	ret

00028d9c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   28d9c:	defffa04 	addi	sp,sp,-24
   28da0:	dfc00515 	stw	ra,20(sp)
   28da4:	df000415 	stw	fp,16(sp)
   28da8:	df000404 	addi	fp,sp,16
   28dac:	e13ffe15 	stw	r4,-8(fp)
   28db0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   28db4:	e0bffe17 	ldw	r2,-8(fp)
   28db8:	10000326 	beq	r2,zero,28dc8 <alt_dev_llist_insert+0x2c>
   28dbc:	e0bffe17 	ldw	r2,-8(fp)
   28dc0:	10800217 	ldw	r2,8(r2)
   28dc4:	1000061e 	bne	r2,zero,28de0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   28dc8:	0028d600 	call	28d60 <alt_get_errno>
   28dcc:	1007883a 	mov	r3,r2
   28dd0:	00800584 	movi	r2,22
   28dd4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   28dd8:	00bffa84 	movi	r2,-22
   28ddc:	00001306 	br	28e2c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   28de0:	e0bffe17 	ldw	r2,-8(fp)
   28de4:	e0ffff17 	ldw	r3,-4(fp)
   28de8:	e0fffc15 	stw	r3,-16(fp)
   28dec:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   28df0:	e0bffd17 	ldw	r2,-12(fp)
   28df4:	e0fffc17 	ldw	r3,-16(fp)
   28df8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   28dfc:	e0bffc17 	ldw	r2,-16(fp)
   28e00:	10c00017 	ldw	r3,0(r2)
   28e04:	e0bffd17 	ldw	r2,-12(fp)
   28e08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   28e0c:	e0bffc17 	ldw	r2,-16(fp)
   28e10:	10800017 	ldw	r2,0(r2)
   28e14:	e0fffd17 	ldw	r3,-12(fp)
   28e18:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   28e1c:	e0bffc17 	ldw	r2,-16(fp)
   28e20:	e0fffd17 	ldw	r3,-12(fp)
   28e24:	10c00015 	stw	r3,0(r2)

  return 0;  
   28e28:	0005883a 	mov	r2,zero
}
   28e2c:	e037883a 	mov	sp,fp
   28e30:	dfc00117 	ldw	ra,4(sp)
   28e34:	df000017 	ldw	fp,0(sp)
   28e38:	dec00204 	addi	sp,sp,8
   28e3c:	f800283a 	ret

00028e40 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   28e40:	defffd04 	addi	sp,sp,-12
   28e44:	dfc00215 	stw	ra,8(sp)
   28e48:	df000115 	stw	fp,4(sp)
   28e4c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   28e50:	008000f4 	movhi	r2,3
   28e54:	10a7f504 	addi	r2,r2,-24620
   28e58:	e0bfff15 	stw	r2,-4(fp)
   28e5c:	00000606 	br	28e78 <_do_ctors+0x38>
        (*ctor) (); 
   28e60:	e0bfff17 	ldw	r2,-4(fp)
   28e64:	10800017 	ldw	r2,0(r2)
   28e68:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   28e6c:	e0bfff17 	ldw	r2,-4(fp)
   28e70:	10bfff04 	addi	r2,r2,-4
   28e74:	e0bfff15 	stw	r2,-4(fp)
   28e78:	e0ffff17 	ldw	r3,-4(fp)
   28e7c:	008000f4 	movhi	r2,3
   28e80:	10a7f604 	addi	r2,r2,-24616
   28e84:	18bff62e 	bgeu	r3,r2,28e60 <__alt_data_end+0xfffe8e60>
        (*ctor) (); 
}
   28e88:	0001883a 	nop
   28e8c:	e037883a 	mov	sp,fp
   28e90:	dfc00117 	ldw	ra,4(sp)
   28e94:	df000017 	ldw	fp,0(sp)
   28e98:	dec00204 	addi	sp,sp,8
   28e9c:	f800283a 	ret

00028ea0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   28ea0:	defffd04 	addi	sp,sp,-12
   28ea4:	dfc00215 	stw	ra,8(sp)
   28ea8:	df000115 	stw	fp,4(sp)
   28eac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   28eb0:	008000f4 	movhi	r2,3
   28eb4:	10a7f504 	addi	r2,r2,-24620
   28eb8:	e0bfff15 	stw	r2,-4(fp)
   28ebc:	00000606 	br	28ed8 <_do_dtors+0x38>
        (*dtor) (); 
   28ec0:	e0bfff17 	ldw	r2,-4(fp)
   28ec4:	10800017 	ldw	r2,0(r2)
   28ec8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   28ecc:	e0bfff17 	ldw	r2,-4(fp)
   28ed0:	10bfff04 	addi	r2,r2,-4
   28ed4:	e0bfff15 	stw	r2,-4(fp)
   28ed8:	e0ffff17 	ldw	r3,-4(fp)
   28edc:	008000f4 	movhi	r2,3
   28ee0:	10a7f604 	addi	r2,r2,-24616
   28ee4:	18bff62e 	bgeu	r3,r2,28ec0 <__alt_data_end+0xfffe8ec0>
        (*dtor) (); 
}
   28ee8:	0001883a 	nop
   28eec:	e037883a 	mov	sp,fp
   28ef0:	dfc00117 	ldw	ra,4(sp)
   28ef4:	df000017 	ldw	fp,0(sp)
   28ef8:	dec00204 	addi	sp,sp,8
   28efc:	f800283a 	ret

00028f00 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   28f00:	defffa04 	addi	sp,sp,-24
   28f04:	dfc00515 	stw	ra,20(sp)
   28f08:	df000415 	stw	fp,16(sp)
   28f0c:	df000404 	addi	fp,sp,16
   28f10:	e13ffe15 	stw	r4,-8(fp)
   28f14:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   28f18:	e0bfff17 	ldw	r2,-4(fp)
   28f1c:	10800017 	ldw	r2,0(r2)
   28f20:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   28f24:	e13ffe17 	ldw	r4,-8(fp)
   28f28:	0025c680 	call	25c68 <strlen>
   28f2c:	10800044 	addi	r2,r2,1
   28f30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   28f34:	00000d06 	br	28f6c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   28f38:	e0bffc17 	ldw	r2,-16(fp)
   28f3c:	10800217 	ldw	r2,8(r2)
   28f40:	e0fffd17 	ldw	r3,-12(fp)
   28f44:	180d883a 	mov	r6,r3
   28f48:	e17ffe17 	ldw	r5,-8(fp)
   28f4c:	1009883a 	mov	r4,r2
   28f50:	0029be00 	call	29be0 <memcmp>
   28f54:	1000021e 	bne	r2,zero,28f60 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   28f58:	e0bffc17 	ldw	r2,-16(fp)
   28f5c:	00000706 	br	28f7c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   28f60:	e0bffc17 	ldw	r2,-16(fp)
   28f64:	10800017 	ldw	r2,0(r2)
   28f68:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   28f6c:	e0fffc17 	ldw	r3,-16(fp)
   28f70:	e0bfff17 	ldw	r2,-4(fp)
   28f74:	18bff01e 	bne	r3,r2,28f38 <__alt_data_end+0xfffe8f38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   28f78:	0005883a 	mov	r2,zero
}
   28f7c:	e037883a 	mov	sp,fp
   28f80:	dfc00117 	ldw	ra,4(sp)
   28f84:	df000017 	ldw	fp,0(sp)
   28f88:	dec00204 	addi	sp,sp,8
   28f8c:	f800283a 	ret

00028f90 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   28f90:	deffff04 	addi	sp,sp,-4
   28f94:	df000015 	stw	fp,0(sp)
   28f98:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   28f9c:	0001883a 	nop
   28fa0:	e037883a 	mov	sp,fp
   28fa4:	df000017 	ldw	fp,0(sp)
   28fa8:	dec00104 	addi	sp,sp,4
   28fac:	f800283a 	ret

00028fb0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   28fb0:	defff904 	addi	sp,sp,-28
   28fb4:	dfc00615 	stw	ra,24(sp)
   28fb8:	df000515 	stw	fp,20(sp)
   28fbc:	df000504 	addi	fp,sp,20
   28fc0:	e13ffc15 	stw	r4,-16(fp)
   28fc4:	e17ffd15 	stw	r5,-12(fp)
   28fc8:	e1bffe15 	stw	r6,-8(fp)
   28fcc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   28fd0:	e0800217 	ldw	r2,8(fp)
   28fd4:	d8800015 	stw	r2,0(sp)
   28fd8:	e1ffff17 	ldw	r7,-4(fp)
   28fdc:	e1bffe17 	ldw	r6,-8(fp)
   28fe0:	e17ffd17 	ldw	r5,-12(fp)
   28fe4:	e13ffc17 	ldw	r4,-16(fp)
   28fe8:	00291600 	call	29160 <alt_iic_isr_register>
}  
   28fec:	e037883a 	mov	sp,fp
   28ff0:	dfc00117 	ldw	ra,4(sp)
   28ff4:	df000017 	ldw	fp,0(sp)
   28ff8:	dec00204 	addi	sp,sp,8
   28ffc:	f800283a 	ret

00029000 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   29000:	defff904 	addi	sp,sp,-28
   29004:	df000615 	stw	fp,24(sp)
   29008:	df000604 	addi	fp,sp,24
   2900c:	e13ffe15 	stw	r4,-8(fp)
   29010:	e17fff15 	stw	r5,-4(fp)
   29014:	e0bfff17 	ldw	r2,-4(fp)
   29018:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2901c:	0005303a 	rdctl	r2,status
   29020:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   29024:	e0fffb17 	ldw	r3,-20(fp)
   29028:	00bfff84 	movi	r2,-2
   2902c:	1884703a 	and	r2,r3,r2
   29030:	1001703a 	wrctl	status,r2
  
  return context;
   29034:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   29038:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2903c:	00c00044 	movi	r3,1
   29040:	e0bffa17 	ldw	r2,-24(fp)
   29044:	1884983a 	sll	r2,r3,r2
   29048:	1007883a 	mov	r3,r2
   2904c:	d0a0e617 	ldw	r2,-31848(gp)
   29050:	1884b03a 	or	r2,r3,r2
   29054:	d0a0e615 	stw	r2,-31848(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   29058:	d0a0e617 	ldw	r2,-31848(gp)
   2905c:	100170fa 	wrctl	ienable,r2
   29060:	e0bffc17 	ldw	r2,-16(fp)
   29064:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   29068:	e0bffd17 	ldw	r2,-12(fp)
   2906c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   29070:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   29074:	0001883a 	nop
}
   29078:	e037883a 	mov	sp,fp
   2907c:	df000017 	ldw	fp,0(sp)
   29080:	dec00104 	addi	sp,sp,4
   29084:	f800283a 	ret

00029088 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   29088:	defff904 	addi	sp,sp,-28
   2908c:	df000615 	stw	fp,24(sp)
   29090:	df000604 	addi	fp,sp,24
   29094:	e13ffe15 	stw	r4,-8(fp)
   29098:	e17fff15 	stw	r5,-4(fp)
   2909c:	e0bfff17 	ldw	r2,-4(fp)
   290a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   290a4:	0005303a 	rdctl	r2,status
   290a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   290ac:	e0fffb17 	ldw	r3,-20(fp)
   290b0:	00bfff84 	movi	r2,-2
   290b4:	1884703a 	and	r2,r3,r2
   290b8:	1001703a 	wrctl	status,r2
  
  return context;
   290bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   290c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   290c4:	00c00044 	movi	r3,1
   290c8:	e0bffa17 	ldw	r2,-24(fp)
   290cc:	1884983a 	sll	r2,r3,r2
   290d0:	0084303a 	nor	r2,zero,r2
   290d4:	1007883a 	mov	r3,r2
   290d8:	d0a0e617 	ldw	r2,-31848(gp)
   290dc:	1884703a 	and	r2,r3,r2
   290e0:	d0a0e615 	stw	r2,-31848(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   290e4:	d0a0e617 	ldw	r2,-31848(gp)
   290e8:	100170fa 	wrctl	ienable,r2
   290ec:	e0bffc17 	ldw	r2,-16(fp)
   290f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   290f4:	e0bffd17 	ldw	r2,-12(fp)
   290f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   290fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   29100:	0001883a 	nop
}
   29104:	e037883a 	mov	sp,fp
   29108:	df000017 	ldw	fp,0(sp)
   2910c:	dec00104 	addi	sp,sp,4
   29110:	f800283a 	ret

00029114 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   29114:	defffc04 	addi	sp,sp,-16
   29118:	df000315 	stw	fp,12(sp)
   2911c:	df000304 	addi	fp,sp,12
   29120:	e13ffe15 	stw	r4,-8(fp)
   29124:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   29128:	000530fa 	rdctl	r2,ienable
   2912c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   29130:	00c00044 	movi	r3,1
   29134:	e0bfff17 	ldw	r2,-4(fp)
   29138:	1884983a 	sll	r2,r3,r2
   2913c:	1007883a 	mov	r3,r2
   29140:	e0bffd17 	ldw	r2,-12(fp)
   29144:	1884703a 	and	r2,r3,r2
   29148:	1004c03a 	cmpne	r2,r2,zero
   2914c:	10803fcc 	andi	r2,r2,255
}
   29150:	e037883a 	mov	sp,fp
   29154:	df000017 	ldw	fp,0(sp)
   29158:	dec00104 	addi	sp,sp,4
   2915c:	f800283a 	ret

00029160 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   29160:	defff504 	addi	sp,sp,-44
   29164:	dfc00a15 	stw	ra,40(sp)
   29168:	df000915 	stw	fp,36(sp)
   2916c:	df000904 	addi	fp,sp,36
   29170:	e13ffc15 	stw	r4,-16(fp)
   29174:	e17ffd15 	stw	r5,-12(fp)
   29178:	e1bffe15 	stw	r6,-8(fp)
   2917c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   29180:	00bffa84 	movi	r2,-22
   29184:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   29188:	e0bffd17 	ldw	r2,-12(fp)
   2918c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   29190:	e0bff817 	ldw	r2,-32(fp)
   29194:	10800808 	cmpgei	r2,r2,32
   29198:	1000271e 	bne	r2,zero,29238 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2919c:	0005303a 	rdctl	r2,status
   291a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   291a4:	e0fffb17 	ldw	r3,-20(fp)
   291a8:	00bfff84 	movi	r2,-2
   291ac:	1884703a 	and	r2,r3,r2
   291b0:	1001703a 	wrctl	status,r2
  
  return context;
   291b4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   291b8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   291bc:	008000f4 	movhi	r2,3
   291c0:	10812804 	addi	r2,r2,1184
   291c4:	e0fff817 	ldw	r3,-32(fp)
   291c8:	180690fa 	slli	r3,r3,3
   291cc:	10c5883a 	add	r2,r2,r3
   291d0:	e0fffe17 	ldw	r3,-8(fp)
   291d4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   291d8:	008000f4 	movhi	r2,3
   291dc:	10812804 	addi	r2,r2,1184
   291e0:	e0fff817 	ldw	r3,-32(fp)
   291e4:	180690fa 	slli	r3,r3,3
   291e8:	10c5883a 	add	r2,r2,r3
   291ec:	10800104 	addi	r2,r2,4
   291f0:	e0ffff17 	ldw	r3,-4(fp)
   291f4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   291f8:	e0bffe17 	ldw	r2,-8(fp)
   291fc:	10000526 	beq	r2,zero,29214 <alt_iic_isr_register+0xb4>
   29200:	e0bff817 	ldw	r2,-32(fp)
   29204:	100b883a 	mov	r5,r2
   29208:	e13ffc17 	ldw	r4,-16(fp)
   2920c:	00290000 	call	29000 <alt_ic_irq_enable>
   29210:	00000406 	br	29224 <alt_iic_isr_register+0xc4>
   29214:	e0bff817 	ldw	r2,-32(fp)
   29218:	100b883a 	mov	r5,r2
   2921c:	e13ffc17 	ldw	r4,-16(fp)
   29220:	00290880 	call	29088 <alt_ic_irq_disable>
   29224:	e0bff715 	stw	r2,-36(fp)
   29228:	e0bffa17 	ldw	r2,-24(fp)
   2922c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   29230:	e0bff917 	ldw	r2,-28(fp)
   29234:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   29238:	e0bff717 	ldw	r2,-36(fp)
}
   2923c:	e037883a 	mov	sp,fp
   29240:	dfc00117 	ldw	ra,4(sp)
   29244:	df000017 	ldw	fp,0(sp)
   29248:	dec00204 	addi	sp,sp,8
   2924c:	f800283a 	ret

00029250 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   29250:	defff804 	addi	sp,sp,-32
   29254:	dfc00715 	stw	ra,28(sp)
   29258:	df000615 	stw	fp,24(sp)
   2925c:	dc000515 	stw	r16,20(sp)
   29260:	df000604 	addi	fp,sp,24
   29264:	e13ffb15 	stw	r4,-20(fp)
   29268:	e17ffc15 	stw	r5,-16(fp)
   2926c:	e1bffd15 	stw	r6,-12(fp)
   29270:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   29274:	e1bffe17 	ldw	r6,-8(fp)
   29278:	e17ffd17 	ldw	r5,-12(fp)
   2927c:	e13ffc17 	ldw	r4,-16(fp)
   29280:	00294d80 	call	294d8 <open>
   29284:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   29288:	e0bffa17 	ldw	r2,-24(fp)
   2928c:	10002216 	blt	r2,zero,29318 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   29290:	040000f4 	movhi	r16,3
   29294:	843ee004 	addi	r16,r16,-1152
   29298:	e0bffa17 	ldw	r2,-24(fp)
   2929c:	01400304 	movi	r5,12
   292a0:	1009883a 	mov	r4,r2
   292a4:	0022c300 	call	22c30 <__mulsi3>
   292a8:	8085883a 	add	r2,r16,r2
   292ac:	10c00017 	ldw	r3,0(r2)
   292b0:	e0bffb17 	ldw	r2,-20(fp)
   292b4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   292b8:	040000f4 	movhi	r16,3
   292bc:	843ee004 	addi	r16,r16,-1152
   292c0:	e0bffa17 	ldw	r2,-24(fp)
   292c4:	01400304 	movi	r5,12
   292c8:	1009883a 	mov	r4,r2
   292cc:	0022c300 	call	22c30 <__mulsi3>
   292d0:	8085883a 	add	r2,r16,r2
   292d4:	10800104 	addi	r2,r2,4
   292d8:	10c00017 	ldw	r3,0(r2)
   292dc:	e0bffb17 	ldw	r2,-20(fp)
   292e0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   292e4:	040000f4 	movhi	r16,3
   292e8:	843ee004 	addi	r16,r16,-1152
   292ec:	e0bffa17 	ldw	r2,-24(fp)
   292f0:	01400304 	movi	r5,12
   292f4:	1009883a 	mov	r4,r2
   292f8:	0022c300 	call	22c30 <__mulsi3>
   292fc:	8085883a 	add	r2,r16,r2
   29300:	10800204 	addi	r2,r2,8
   29304:	10c00017 	ldw	r3,0(r2)
   29308:	e0bffb17 	ldw	r2,-20(fp)
   2930c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   29310:	e13ffa17 	ldw	r4,-24(fp)
   29314:	002989c0 	call	2989c <alt_release_fd>
  }
} 
   29318:	0001883a 	nop
   2931c:	e6ffff04 	addi	sp,fp,-4
   29320:	dfc00217 	ldw	ra,8(sp)
   29324:	df000117 	ldw	fp,4(sp)
   29328:	dc000017 	ldw	r16,0(sp)
   2932c:	dec00304 	addi	sp,sp,12
   29330:	f800283a 	ret

00029334 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   29334:	defffb04 	addi	sp,sp,-20
   29338:	dfc00415 	stw	ra,16(sp)
   2933c:	df000315 	stw	fp,12(sp)
   29340:	df000304 	addi	fp,sp,12
   29344:	e13ffd15 	stw	r4,-12(fp)
   29348:	e17ffe15 	stw	r5,-8(fp)
   2934c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   29350:	01c07fc4 	movi	r7,511
   29354:	01800044 	movi	r6,1
   29358:	e17ffd17 	ldw	r5,-12(fp)
   2935c:	010000f4 	movhi	r4,3
   29360:	213ee304 	addi	r4,r4,-1140
   29364:	00292500 	call	29250 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   29368:	01c07fc4 	movi	r7,511
   2936c:	000d883a 	mov	r6,zero
   29370:	e17ffe17 	ldw	r5,-8(fp)
   29374:	010000f4 	movhi	r4,3
   29378:	213ee004 	addi	r4,r4,-1152
   2937c:	00292500 	call	29250 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   29380:	01c07fc4 	movi	r7,511
   29384:	01800044 	movi	r6,1
   29388:	e17fff17 	ldw	r5,-4(fp)
   2938c:	010000f4 	movhi	r4,3
   29390:	213ee604 	addi	r4,r4,-1128
   29394:	00292500 	call	29250 <alt_open_fd>
}  
   29398:	0001883a 	nop
   2939c:	e037883a 	mov	sp,fp
   293a0:	dfc00117 	ldw	ra,4(sp)
   293a4:	df000017 	ldw	fp,0(sp)
   293a8:	dec00204 	addi	sp,sp,8
   293ac:	f800283a 	ret

000293b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   293b0:	defffe04 	addi	sp,sp,-8
   293b4:	dfc00115 	stw	ra,4(sp)
   293b8:	df000015 	stw	fp,0(sp)
   293bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   293c0:	d0a00f17 	ldw	r2,-32708(gp)
   293c4:	10000326 	beq	r2,zero,293d4 <alt_get_errno+0x24>
   293c8:	d0a00f17 	ldw	r2,-32708(gp)
   293cc:	103ee83a 	callr	r2
   293d0:	00000106 	br	293d8 <alt_get_errno+0x28>
   293d4:	d0a0e204 	addi	r2,gp,-31864
}
   293d8:	e037883a 	mov	sp,fp
   293dc:	dfc00117 	ldw	ra,4(sp)
   293e0:	df000017 	ldw	fp,0(sp)
   293e4:	dec00204 	addi	sp,sp,8
   293e8:	f800283a 	ret

000293ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   293ec:	defffb04 	addi	sp,sp,-20
   293f0:	dfc00415 	stw	ra,16(sp)
   293f4:	df000315 	stw	fp,12(sp)
   293f8:	dc000215 	stw	r16,8(sp)
   293fc:	df000304 	addi	fp,sp,12
   29400:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   29404:	e0bffe17 	ldw	r2,-8(fp)
   29408:	10800217 	ldw	r2,8(r2)
   2940c:	10d00034 	orhi	r3,r2,16384
   29410:	e0bffe17 	ldw	r2,-8(fp)
   29414:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   29418:	e03ffd15 	stw	zero,-12(fp)
   2941c:	00002306 	br	294ac <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   29420:	040000f4 	movhi	r16,3
   29424:	843ee004 	addi	r16,r16,-1152
   29428:	e0bffd17 	ldw	r2,-12(fp)
   2942c:	01400304 	movi	r5,12
   29430:	1009883a 	mov	r4,r2
   29434:	0022c300 	call	22c30 <__mulsi3>
   29438:	8085883a 	add	r2,r16,r2
   2943c:	10c00017 	ldw	r3,0(r2)
   29440:	e0bffe17 	ldw	r2,-8(fp)
   29444:	10800017 	ldw	r2,0(r2)
   29448:	1880151e 	bne	r3,r2,294a0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2944c:	040000f4 	movhi	r16,3
   29450:	843ee004 	addi	r16,r16,-1152
   29454:	e0bffd17 	ldw	r2,-12(fp)
   29458:	01400304 	movi	r5,12
   2945c:	1009883a 	mov	r4,r2
   29460:	0022c300 	call	22c30 <__mulsi3>
   29464:	8085883a 	add	r2,r16,r2
   29468:	10800204 	addi	r2,r2,8
   2946c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   29470:	10000b0e 	bge	r2,zero,294a0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   29474:	01400304 	movi	r5,12
   29478:	e13ffd17 	ldw	r4,-12(fp)
   2947c:	0022c300 	call	22c30 <__mulsi3>
   29480:	1007883a 	mov	r3,r2
   29484:	008000f4 	movhi	r2,3
   29488:	10bee004 	addi	r2,r2,-1152
   2948c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   29490:	e0bffe17 	ldw	r2,-8(fp)
   29494:	18800226 	beq	r3,r2,294a0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   29498:	00bffcc4 	movi	r2,-13
   2949c:	00000806 	br	294c0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   294a0:	e0bffd17 	ldw	r2,-12(fp)
   294a4:	10800044 	addi	r2,r2,1
   294a8:	e0bffd15 	stw	r2,-12(fp)
   294ac:	d0a00e17 	ldw	r2,-32712(gp)
   294b0:	1007883a 	mov	r3,r2
   294b4:	e0bffd17 	ldw	r2,-12(fp)
   294b8:	18bfd92e 	bgeu	r3,r2,29420 <__alt_data_end+0xfffe9420>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   294bc:	0005883a 	mov	r2,zero
}
   294c0:	e6ffff04 	addi	sp,fp,-4
   294c4:	dfc00217 	ldw	ra,8(sp)
   294c8:	df000117 	ldw	fp,4(sp)
   294cc:	dc000017 	ldw	r16,0(sp)
   294d0:	dec00304 	addi	sp,sp,12
   294d4:	f800283a 	ret

000294d8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   294d8:	defff604 	addi	sp,sp,-40
   294dc:	dfc00915 	stw	ra,36(sp)
   294e0:	df000815 	stw	fp,32(sp)
   294e4:	df000804 	addi	fp,sp,32
   294e8:	e13ffd15 	stw	r4,-12(fp)
   294ec:	e17ffe15 	stw	r5,-8(fp)
   294f0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   294f4:	00bfffc4 	movi	r2,-1
   294f8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   294fc:	00bffb44 	movi	r2,-19
   29500:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   29504:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   29508:	d1600c04 	addi	r5,gp,-32720
   2950c:	e13ffd17 	ldw	r4,-12(fp)
   29510:	0028f000 	call	28f00 <alt_find_dev>
   29514:	e0bff815 	stw	r2,-32(fp)
   29518:	e0bff817 	ldw	r2,-32(fp)
   2951c:	1000051e 	bne	r2,zero,29534 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   29520:	e13ffd17 	ldw	r4,-12(fp)
   29524:	00299440 	call	29944 <alt_find_file>
   29528:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2952c:	00800044 	movi	r2,1
   29530:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   29534:	e0bff817 	ldw	r2,-32(fp)
   29538:	10002b26 	beq	r2,zero,295e8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2953c:	e13ff817 	ldw	r4,-32(fp)
   29540:	0029a4c0 	call	29a4c <alt_get_fd>
   29544:	e0bff915 	stw	r2,-28(fp)
   29548:	e0bff917 	ldw	r2,-28(fp)
   2954c:	1000030e 	bge	r2,zero,2955c <open+0x84>
    {
      status = index;
   29550:	e0bff917 	ldw	r2,-28(fp)
   29554:	e0bffa15 	stw	r2,-24(fp)
   29558:	00002506 	br	295f0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   2955c:	01400304 	movi	r5,12
   29560:	e13ff917 	ldw	r4,-28(fp)
   29564:	0022c300 	call	22c30 <__mulsi3>
   29568:	1007883a 	mov	r3,r2
   2956c:	008000f4 	movhi	r2,3
   29570:	10bee004 	addi	r2,r2,-1152
   29574:	1885883a 	add	r2,r3,r2
   29578:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2957c:	e0fffe17 	ldw	r3,-8(fp)
   29580:	00900034 	movhi	r2,16384
   29584:	10bfffc4 	addi	r2,r2,-1
   29588:	1886703a 	and	r3,r3,r2
   2958c:	e0bffc17 	ldw	r2,-16(fp)
   29590:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   29594:	e0bffb17 	ldw	r2,-20(fp)
   29598:	1000051e 	bne	r2,zero,295b0 <open+0xd8>
   2959c:	e13ffc17 	ldw	r4,-16(fp)
   295a0:	00293ec0 	call	293ec <alt_file_locked>
   295a4:	e0bffa15 	stw	r2,-24(fp)
   295a8:	e0bffa17 	ldw	r2,-24(fp)
   295ac:	10001016 	blt	r2,zero,295f0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   295b0:	e0bff817 	ldw	r2,-32(fp)
   295b4:	10800317 	ldw	r2,12(r2)
   295b8:	10000826 	beq	r2,zero,295dc <open+0x104>
   295bc:	e0bff817 	ldw	r2,-32(fp)
   295c0:	10800317 	ldw	r2,12(r2)
   295c4:	e1ffff17 	ldw	r7,-4(fp)
   295c8:	e1bffe17 	ldw	r6,-8(fp)
   295cc:	e17ffd17 	ldw	r5,-12(fp)
   295d0:	e13ffc17 	ldw	r4,-16(fp)
   295d4:	103ee83a 	callr	r2
   295d8:	00000106 	br	295e0 <open+0x108>
   295dc:	0005883a 	mov	r2,zero
   295e0:	e0bffa15 	stw	r2,-24(fp)
   295e4:	00000206 	br	295f0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   295e8:	00bffb44 	movi	r2,-19
   295ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   295f0:	e0bffa17 	ldw	r2,-24(fp)
   295f4:	1000090e 	bge	r2,zero,2961c <open+0x144>
  {
    alt_release_fd (index);  
   295f8:	e13ff917 	ldw	r4,-28(fp)
   295fc:	002989c0 	call	2989c <alt_release_fd>
    ALT_ERRNO = -status;
   29600:	00293b00 	call	293b0 <alt_get_errno>
   29604:	1007883a 	mov	r3,r2
   29608:	e0bffa17 	ldw	r2,-24(fp)
   2960c:	0085c83a 	sub	r2,zero,r2
   29610:	18800015 	stw	r2,0(r3)
    return -1;
   29614:	00bfffc4 	movi	r2,-1
   29618:	00000106 	br	29620 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   2961c:	e0bff917 	ldw	r2,-28(fp)
}
   29620:	e037883a 	mov	sp,fp
   29624:	dfc00117 	ldw	ra,4(sp)
   29628:	df000017 	ldw	fp,0(sp)
   2962c:	dec00204 	addi	sp,sp,8
   29630:	f800283a 	ret

00029634 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   29634:	defff204 	addi	sp,sp,-56
   29638:	dfc00a15 	stw	ra,40(sp)
   2963c:	df000915 	stw	fp,36(sp)
   29640:	df000904 	addi	fp,sp,36
   29644:	e13fff15 	stw	r4,-4(fp)
   29648:	e1400215 	stw	r5,8(fp)
   2964c:	e1800315 	stw	r6,12(fp)
   29650:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   29654:	e0800204 	addi	r2,fp,8
   29658:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   2965c:	e0bfff17 	ldw	r2,-4(fp)
   29660:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   29664:	00006f06 	br	29824 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   29668:	e0bff807 	ldb	r2,-32(fp)
   2966c:	10800960 	cmpeqi	r2,r2,37
   29670:	1000041e 	bne	r2,zero,29684 <alt_printf+0x50>
        {
            alt_putchar(c);
   29674:	e0bff807 	ldb	r2,-32(fp)
   29678:	1009883a 	mov	r4,r2
   2967c:	00298600 	call	29860 <alt_putchar>
   29680:	00006806 	br	29824 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   29684:	e0bff717 	ldw	r2,-36(fp)
   29688:	10c00044 	addi	r3,r2,1
   2968c:	e0fff715 	stw	r3,-36(fp)
   29690:	10800003 	ldbu	r2,0(r2)
   29694:	e0bff805 	stb	r2,-32(fp)
   29698:	e0bff807 	ldb	r2,-32(fp)
   2969c:	10006926 	beq	r2,zero,29844 <alt_printf+0x210>
            {
                if (c == '%')
   296a0:	e0bff807 	ldb	r2,-32(fp)
   296a4:	10800958 	cmpnei	r2,r2,37
   296a8:	1000041e 	bne	r2,zero,296bc <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   296ac:	e0bff807 	ldb	r2,-32(fp)
   296b0:	1009883a 	mov	r4,r2
   296b4:	00298600 	call	29860 <alt_putchar>
   296b8:	00005a06 	br	29824 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   296bc:	e0bff807 	ldb	r2,-32(fp)
   296c0:	108018d8 	cmpnei	r2,r2,99
   296c4:	1000081e 	bne	r2,zero,296e8 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   296c8:	e0bffe17 	ldw	r2,-8(fp)
   296cc:	10c00104 	addi	r3,r2,4
   296d0:	e0fffe15 	stw	r3,-8(fp)
   296d4:	10800017 	ldw	r2,0(r2)
   296d8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   296dc:	e13ffd17 	ldw	r4,-12(fp)
   296e0:	00298600 	call	29860 <alt_putchar>
   296e4:	00004f06 	br	29824 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   296e8:	e0bff807 	ldb	r2,-32(fp)
   296ec:	10801e18 	cmpnei	r2,r2,120
   296f0:	1000341e 	bne	r2,zero,297c4 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   296f4:	e0bffe17 	ldw	r2,-8(fp)
   296f8:	10c00104 	addi	r3,r2,4
   296fc:	e0fffe15 	stw	r3,-8(fp)
   29700:	10800017 	ldw	r2,0(r2)
   29704:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   29708:	e0bffb17 	ldw	r2,-20(fp)
   2970c:	1000031e 	bne	r2,zero,2971c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   29710:	01000c04 	movi	r4,48
   29714:	00298600 	call	29860 <alt_putchar>
                        continue;
   29718:	00004206 	br	29824 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   2971c:	00800704 	movi	r2,28
   29720:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   29724:	00000306 	br	29734 <alt_printf+0x100>
                        digit_shift -= 4;
   29728:	e0bff917 	ldw	r2,-28(fp)
   2972c:	10bfff04 	addi	r2,r2,-4
   29730:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   29734:	00c003c4 	movi	r3,15
   29738:	e0bff917 	ldw	r2,-28(fp)
   2973c:	1884983a 	sll	r2,r3,r2
   29740:	1007883a 	mov	r3,r2
   29744:	e0bffb17 	ldw	r2,-20(fp)
   29748:	1884703a 	and	r2,r3,r2
   2974c:	103ff626 	beq	r2,zero,29728 <__alt_data_end+0xfffe9728>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   29750:	00001906 	br	297b8 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   29754:	00c003c4 	movi	r3,15
   29758:	e0bff917 	ldw	r2,-28(fp)
   2975c:	1884983a 	sll	r2,r3,r2
   29760:	1007883a 	mov	r3,r2
   29764:	e0bffb17 	ldw	r2,-20(fp)
   29768:	1886703a 	and	r3,r3,r2
   2976c:	e0bff917 	ldw	r2,-28(fp)
   29770:	1884d83a 	srl	r2,r3,r2
   29774:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   29778:	e0bffc17 	ldw	r2,-16(fp)
   2977c:	108002a8 	cmpgeui	r2,r2,10
   29780:	1000041e 	bne	r2,zero,29794 <alt_printf+0x160>
                            c = '0' + digit;
   29784:	e0bffc17 	ldw	r2,-16(fp)
   29788:	10800c04 	addi	r2,r2,48
   2978c:	e0bff805 	stb	r2,-32(fp)
   29790:	00000306 	br	297a0 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   29794:	e0bffc17 	ldw	r2,-16(fp)
   29798:	108015c4 	addi	r2,r2,87
   2979c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   297a0:	e0bff807 	ldb	r2,-32(fp)
   297a4:	1009883a 	mov	r4,r2
   297a8:	00298600 	call	29860 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   297ac:	e0bff917 	ldw	r2,-28(fp)
   297b0:	10bfff04 	addi	r2,r2,-4
   297b4:	e0bff915 	stw	r2,-28(fp)
   297b8:	e0bff917 	ldw	r2,-28(fp)
   297bc:	103fe50e 	bge	r2,zero,29754 <__alt_data_end+0xfffe9754>
   297c0:	00001806 	br	29824 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   297c4:	e0bff807 	ldb	r2,-32(fp)
   297c8:	10801cd8 	cmpnei	r2,r2,115
   297cc:	1000151e 	bne	r2,zero,29824 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   297d0:	e0bffe17 	ldw	r2,-8(fp)
   297d4:	10c00104 	addi	r3,r2,4
   297d8:	e0fffe15 	stw	r3,-8(fp)
   297dc:	10800017 	ldw	r2,0(r2)
   297e0:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   297e4:	00000906 	br	2980c <alt_printf+0x1d8>
                      alt_putchar(*s++);
   297e8:	e0bffa17 	ldw	r2,-24(fp)
   297ec:	10c00044 	addi	r3,r2,1
   297f0:	e0fffa15 	stw	r3,-24(fp)
   297f4:	10800003 	ldbu	r2,0(r2)
   297f8:	10803fcc 	andi	r2,r2,255
   297fc:	1080201c 	xori	r2,r2,128
   29800:	10bfe004 	addi	r2,r2,-128
   29804:	1009883a 	mov	r4,r2
   29808:	00298600 	call	29860 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   2980c:	e0bffa17 	ldw	r2,-24(fp)
   29810:	10800003 	ldbu	r2,0(r2)
   29814:	10803fcc 	andi	r2,r2,255
   29818:	1080201c 	xori	r2,r2,128
   2981c:	10bfe004 	addi	r2,r2,-128
   29820:	103ff11e 	bne	r2,zero,297e8 <__alt_data_end+0xfffe97e8>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   29824:	e0bff717 	ldw	r2,-36(fp)
   29828:	10c00044 	addi	r3,r2,1
   2982c:	e0fff715 	stw	r3,-36(fp)
   29830:	10800003 	ldbu	r2,0(r2)
   29834:	e0bff805 	stb	r2,-32(fp)
   29838:	e0bff807 	ldb	r2,-32(fp)
   2983c:	103f8a1e 	bne	r2,zero,29668 <__alt_data_end+0xfffe9668>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   29840:	00000106 	br	29848 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   29844:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   29848:	0001883a 	nop
   2984c:	e037883a 	mov	sp,fp
   29850:	dfc00117 	ldw	ra,4(sp)
   29854:	df000017 	ldw	fp,0(sp)
   29858:	dec00504 	addi	sp,sp,20
   2985c:	f800283a 	ret

00029860 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   29860:	defffd04 	addi	sp,sp,-12
   29864:	dfc00215 	stw	ra,8(sp)
   29868:	df000115 	stw	fp,4(sp)
   2986c:	df000104 	addi	fp,sp,4
   29870:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   29874:	d0a00717 	ldw	r2,-32740(gp)
   29878:	10800217 	ldw	r2,8(r2)
   2987c:	100b883a 	mov	r5,r2
   29880:	e13fff17 	ldw	r4,-4(fp)
   29884:	0029c100 	call	29c10 <putc>
#endif
#endif
}
   29888:	e037883a 	mov	sp,fp
   2988c:	dfc00117 	ldw	ra,4(sp)
   29890:	df000017 	ldw	fp,0(sp)
   29894:	dec00204 	addi	sp,sp,8
   29898:	f800283a 	ret

0002989c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2989c:	defffc04 	addi	sp,sp,-16
   298a0:	dfc00315 	stw	ra,12(sp)
   298a4:	df000215 	stw	fp,8(sp)
   298a8:	dc000115 	stw	r16,4(sp)
   298ac:	df000204 	addi	fp,sp,8
   298b0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   298b4:	e0bffe17 	ldw	r2,-8(fp)
   298b8:	108000d0 	cmplti	r2,r2,3
   298bc:	1000111e 	bne	r2,zero,29904 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   298c0:	040000f4 	movhi	r16,3
   298c4:	843ee004 	addi	r16,r16,-1152
   298c8:	e0bffe17 	ldw	r2,-8(fp)
   298cc:	01400304 	movi	r5,12
   298d0:	1009883a 	mov	r4,r2
   298d4:	0022c300 	call	22c30 <__mulsi3>
   298d8:	8085883a 	add	r2,r16,r2
   298dc:	10800204 	addi	r2,r2,8
   298e0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   298e4:	040000f4 	movhi	r16,3
   298e8:	843ee004 	addi	r16,r16,-1152
   298ec:	e0bffe17 	ldw	r2,-8(fp)
   298f0:	01400304 	movi	r5,12
   298f4:	1009883a 	mov	r4,r2
   298f8:	0022c300 	call	22c30 <__mulsi3>
   298fc:	8085883a 	add	r2,r16,r2
   29900:	10000015 	stw	zero,0(r2)
  }
}
   29904:	0001883a 	nop
   29908:	e6ffff04 	addi	sp,fp,-4
   2990c:	dfc00217 	ldw	ra,8(sp)
   29910:	df000117 	ldw	fp,4(sp)
   29914:	dc000017 	ldw	r16,0(sp)
   29918:	dec00304 	addi	sp,sp,12
   2991c:	f800283a 	ret

00029920 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   29920:	deffff04 	addi	sp,sp,-4
   29924:	df000015 	stw	fp,0(sp)
   29928:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2992c:	000170fa 	wrctl	ienable,zero
}
   29930:	0001883a 	nop
   29934:	e037883a 	mov	sp,fp
   29938:	df000017 	ldw	fp,0(sp)
   2993c:	dec00104 	addi	sp,sp,4
   29940:	f800283a 	ret

00029944 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   29944:	defffb04 	addi	sp,sp,-20
   29948:	dfc00415 	stw	ra,16(sp)
   2994c:	df000315 	stw	fp,12(sp)
   29950:	df000304 	addi	fp,sp,12
   29954:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   29958:	d0a00a17 	ldw	r2,-32728(gp)
   2995c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   29960:	00003106 	br	29a28 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   29964:	e0bffd17 	ldw	r2,-12(fp)
   29968:	10800217 	ldw	r2,8(r2)
   2996c:	1009883a 	mov	r4,r2
   29970:	0025c680 	call	25c68 <strlen>
   29974:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   29978:	e0bffd17 	ldw	r2,-12(fp)
   2997c:	10c00217 	ldw	r3,8(r2)
   29980:	e0bffe17 	ldw	r2,-8(fp)
   29984:	10bfffc4 	addi	r2,r2,-1
   29988:	1885883a 	add	r2,r3,r2
   2998c:	10800003 	ldbu	r2,0(r2)
   29990:	10803fcc 	andi	r2,r2,255
   29994:	1080201c 	xori	r2,r2,128
   29998:	10bfe004 	addi	r2,r2,-128
   2999c:	10800bd8 	cmpnei	r2,r2,47
   299a0:	1000031e 	bne	r2,zero,299b0 <alt_find_file+0x6c>
    {
      len -= 1;
   299a4:	e0bffe17 	ldw	r2,-8(fp)
   299a8:	10bfffc4 	addi	r2,r2,-1
   299ac:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   299b0:	e0bffe17 	ldw	r2,-8(fp)
   299b4:	e0ffff17 	ldw	r3,-4(fp)
   299b8:	1885883a 	add	r2,r3,r2
   299bc:	10800003 	ldbu	r2,0(r2)
   299c0:	10803fcc 	andi	r2,r2,255
   299c4:	1080201c 	xori	r2,r2,128
   299c8:	10bfe004 	addi	r2,r2,-128
   299cc:	10800be0 	cmpeqi	r2,r2,47
   299d0:	1000081e 	bne	r2,zero,299f4 <alt_find_file+0xb0>
   299d4:	e0bffe17 	ldw	r2,-8(fp)
   299d8:	e0ffff17 	ldw	r3,-4(fp)
   299dc:	1885883a 	add	r2,r3,r2
   299e0:	10800003 	ldbu	r2,0(r2)
   299e4:	10803fcc 	andi	r2,r2,255
   299e8:	1080201c 	xori	r2,r2,128
   299ec:	10bfe004 	addi	r2,r2,-128
   299f0:	10000a1e 	bne	r2,zero,29a1c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   299f4:	e0bffd17 	ldw	r2,-12(fp)
   299f8:	10800217 	ldw	r2,8(r2)
   299fc:	e0fffe17 	ldw	r3,-8(fp)
   29a00:	180d883a 	mov	r6,r3
   29a04:	e17fff17 	ldw	r5,-4(fp)
   29a08:	1009883a 	mov	r4,r2
   29a0c:	0029be00 	call	29be0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   29a10:	1000021e 	bne	r2,zero,29a1c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   29a14:	e0bffd17 	ldw	r2,-12(fp)
   29a18:	00000706 	br	29a38 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   29a1c:	e0bffd17 	ldw	r2,-12(fp)
   29a20:	10800017 	ldw	r2,0(r2)
   29a24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   29a28:	e0fffd17 	ldw	r3,-12(fp)
   29a2c:	d0a00a04 	addi	r2,gp,-32728
   29a30:	18bfcc1e 	bne	r3,r2,29964 <__alt_data_end+0xfffe9964>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   29a34:	0005883a 	mov	r2,zero
}
   29a38:	e037883a 	mov	sp,fp
   29a3c:	dfc00117 	ldw	ra,4(sp)
   29a40:	df000017 	ldw	fp,0(sp)
   29a44:	dec00204 	addi	sp,sp,8
   29a48:	f800283a 	ret

00029a4c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   29a4c:	defffa04 	addi	sp,sp,-24
   29a50:	dfc00515 	stw	ra,20(sp)
   29a54:	df000415 	stw	fp,16(sp)
   29a58:	dc000315 	stw	r16,12(sp)
   29a5c:	df000404 	addi	fp,sp,16
   29a60:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   29a64:	00bffa04 	movi	r2,-24
   29a68:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   29a6c:	e03ffc15 	stw	zero,-16(fp)
   29a70:	00001d06 	br	29ae8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   29a74:	040000f4 	movhi	r16,3
   29a78:	843ee004 	addi	r16,r16,-1152
   29a7c:	e0bffc17 	ldw	r2,-16(fp)
   29a80:	01400304 	movi	r5,12
   29a84:	1009883a 	mov	r4,r2
   29a88:	0022c300 	call	22c30 <__mulsi3>
   29a8c:	8085883a 	add	r2,r16,r2
   29a90:	10800017 	ldw	r2,0(r2)
   29a94:	1000111e 	bne	r2,zero,29adc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   29a98:	040000f4 	movhi	r16,3
   29a9c:	843ee004 	addi	r16,r16,-1152
   29aa0:	e0bffc17 	ldw	r2,-16(fp)
   29aa4:	01400304 	movi	r5,12
   29aa8:	1009883a 	mov	r4,r2
   29aac:	0022c300 	call	22c30 <__mulsi3>
   29ab0:	8085883a 	add	r2,r16,r2
   29ab4:	e0fffe17 	ldw	r3,-8(fp)
   29ab8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   29abc:	d0e00e17 	ldw	r3,-32712(gp)
   29ac0:	e0bffc17 	ldw	r2,-16(fp)
   29ac4:	1880020e 	bge	r3,r2,29ad0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   29ac8:	e0bffc17 	ldw	r2,-16(fp)
   29acc:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
   29ad0:	e0bffc17 	ldw	r2,-16(fp)
   29ad4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   29ad8:	00000606 	br	29af4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   29adc:	e0bffc17 	ldw	r2,-16(fp)
   29ae0:	10800044 	addi	r2,r2,1
   29ae4:	e0bffc15 	stw	r2,-16(fp)
   29ae8:	e0bffc17 	ldw	r2,-16(fp)
   29aec:	10800810 	cmplti	r2,r2,32
   29af0:	103fe01e 	bne	r2,zero,29a74 <__alt_data_end+0xfffe9a74>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   29af4:	e0bffd17 	ldw	r2,-12(fp)
}
   29af8:	e6ffff04 	addi	sp,fp,-4
   29afc:	dfc00217 	ldw	ra,8(sp)
   29b00:	df000117 	ldw	fp,4(sp)
   29b04:	dc000017 	ldw	r16,0(sp)
   29b08:	dec00304 	addi	sp,sp,12
   29b0c:	f800283a 	ret

00029b10 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   29b10:	defffe04 	addi	sp,sp,-8
   29b14:	df000115 	stw	fp,4(sp)
   29b18:	df000104 	addi	fp,sp,4
   29b1c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   29b20:	e0bfff17 	ldw	r2,-4(fp)
   29b24:	10bffe84 	addi	r2,r2,-6
   29b28:	10c00428 	cmpgeui	r3,r2,16
   29b2c:	18001a1e 	bne	r3,zero,29b98 <alt_exception_cause_generated_bad_addr+0x88>
   29b30:	100690ba 	slli	r3,r2,2
   29b34:	008000f4 	movhi	r2,3
   29b38:	10a6d204 	addi	r2,r2,-25784
   29b3c:	1885883a 	add	r2,r3,r2
   29b40:	10800017 	ldw	r2,0(r2)
   29b44:	1000683a 	jmp	r2
   29b48:	00029b88 	cmpgei	zero,zero,2670
   29b4c:	00029b88 	cmpgei	zero,zero,2670
   29b50:	00029b98 	cmpnei	zero,zero,2670
   29b54:	00029b98 	cmpnei	zero,zero,2670
   29b58:	00029b98 	cmpnei	zero,zero,2670
   29b5c:	00029b88 	cmpgei	zero,zero,2670
   29b60:	00029b90 	cmplti	zero,zero,2670
   29b64:	00029b98 	cmpnei	zero,zero,2670
   29b68:	00029b88 	cmpgei	zero,zero,2670
   29b6c:	00029b88 	cmpgei	zero,zero,2670
   29b70:	00029b98 	cmpnei	zero,zero,2670
   29b74:	00029b88 	cmpgei	zero,zero,2670
   29b78:	00029b90 	cmplti	zero,zero,2670
   29b7c:	00029b98 	cmpnei	zero,zero,2670
   29b80:	00029b98 	cmpnei	zero,zero,2670
   29b84:	00029b88 	cmpgei	zero,zero,2670
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   29b88:	00800044 	movi	r2,1
   29b8c:	00000306 	br	29b9c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   29b90:	0005883a 	mov	r2,zero
   29b94:	00000106 	br	29b9c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   29b98:	0005883a 	mov	r2,zero
  }
}
   29b9c:	e037883a 	mov	sp,fp
   29ba0:	df000017 	ldw	fp,0(sp)
   29ba4:	dec00104 	addi	sp,sp,4
   29ba8:	f800283a 	ret

00029bac <atexit>:
   29bac:	200b883a 	mov	r5,r4
   29bb0:	000f883a 	mov	r7,zero
   29bb4:	000d883a 	mov	r6,zero
   29bb8:	0009883a 	mov	r4,zero
   29bbc:	0029cbc1 	jmpi	29cbc <__register_exitproc>

00029bc0 <exit>:
   29bc0:	defffe04 	addi	sp,sp,-8
   29bc4:	000b883a 	mov	r5,zero
   29bc8:	dc000015 	stw	r16,0(sp)
   29bcc:	dfc00115 	stw	ra,4(sp)
   29bd0:	2021883a 	mov	r16,r4
   29bd4:	0029e140 	call	29e14 <__call_exitprocs>
   29bd8:	8009883a 	mov	r4,r16
   29bdc:	0029fa40 	call	29fa4 <_exit>

00029be0 <memcmp>:
   29be0:	218d883a 	add	r6,r4,r6
   29be4:	21800826 	beq	r4,r6,29c08 <memcmp+0x28>
   29be8:	20800003 	ldbu	r2,0(r4)
   29bec:	28c00003 	ldbu	r3,0(r5)
   29bf0:	10c00226 	beq	r2,r3,29bfc <memcmp+0x1c>
   29bf4:	10c5c83a 	sub	r2,r2,r3
   29bf8:	f800283a 	ret
   29bfc:	21000044 	addi	r4,r4,1
   29c00:	29400044 	addi	r5,r5,1
   29c04:	003ff706 	br	29be4 <__alt_data_end+0xfffe9be4>
   29c08:	0005883a 	mov	r2,zero
   29c0c:	f800283a 	ret

00029c10 <putc>:
   29c10:	defffd04 	addi	sp,sp,-12
   29c14:	008000b4 	movhi	r2,2
   29c18:	dc000115 	stw	r16,4(sp)
   29c1c:	dfc00215 	stw	ra,8(sp)
   29c20:	1099fb04 	addi	r2,r2,26604
   29c24:	28800115 	stw	r2,4(r5)
   29c28:	008000f4 	movhi	r2,3
   29c2c:	10bf4704 	addi	r2,r2,-740
   29c30:	d9000005 	stb	r4,0(sp)
   29c34:	2021883a 	mov	r16,r4
   29c38:	11000017 	ldw	r4,0(r2)
   29c3c:	01c00044 	movi	r7,1
   29c40:	d80d883a 	mov	r6,sp
   29c44:	00267ec0 	call	267ec <__sfvwrite_small_dev>
   29c48:	00ffffc4 	movi	r3,-1
   29c4c:	10c00126 	beq	r2,r3,29c54 <putc+0x44>
   29c50:	8005883a 	mov	r2,r16
   29c54:	dfc00217 	ldw	ra,8(sp)
   29c58:	dc000117 	ldw	r16,4(sp)
   29c5c:	dec00304 	addi	sp,sp,12
   29c60:	f800283a 	ret

00029c64 <_putc_r>:
   29c64:	defffd04 	addi	sp,sp,-12
   29c68:	008000b4 	movhi	r2,2
   29c6c:	dc000115 	stw	r16,4(sp)
   29c70:	dfc00215 	stw	ra,8(sp)
   29c74:	1099fb04 	addi	r2,r2,26604
   29c78:	30800115 	stw	r2,4(r6)
   29c7c:	008000f4 	movhi	r2,3
   29c80:	10bf4704 	addi	r2,r2,-740
   29c84:	11000017 	ldw	r4,0(r2)
   29c88:	2821883a 	mov	r16,r5
   29c8c:	01c00044 	movi	r7,1
   29c90:	300b883a 	mov	r5,r6
   29c94:	d80d883a 	mov	r6,sp
   29c98:	dc000005 	stb	r16,0(sp)
   29c9c:	00267ec0 	call	267ec <__sfvwrite_small_dev>
   29ca0:	00ffffc4 	movi	r3,-1
   29ca4:	10c00126 	beq	r2,r3,29cac <_putc_r+0x48>
   29ca8:	8005883a 	mov	r2,r16
   29cac:	dfc00217 	ldw	ra,8(sp)
   29cb0:	dc000117 	ldw	r16,4(sp)
   29cb4:	dec00304 	addi	sp,sp,12
   29cb8:	f800283a 	ret

00029cbc <__register_exitproc>:
   29cbc:	008000f4 	movhi	r2,3
   29cc0:	10bf4604 	addi	r2,r2,-744
   29cc4:	10c00017 	ldw	r3,0(r2)
   29cc8:	defff904 	addi	sp,sp,-28
   29ccc:	dc000015 	stw	r16,0(sp)
   29cd0:	1c000c17 	ldw	r16,48(r3)
   29cd4:	dd400515 	stw	r21,20(sp)
   29cd8:	dd000415 	stw	r20,16(sp)
   29cdc:	dcc00315 	stw	r19,12(sp)
   29ce0:	dc800215 	stw	r18,8(sp)
   29ce4:	dc400115 	stw	r17,4(sp)
   29ce8:	dfc00615 	stw	ra,24(sp)
   29cec:	202b883a 	mov	r21,r4
   29cf0:	2823883a 	mov	r17,r5
   29cf4:	3027883a 	mov	r19,r6
   29cf8:	3825883a 	mov	r18,r7
   29cfc:	1029883a 	mov	r20,r2
   29d00:	8000021e 	bne	r16,zero,29d0c <__register_exitproc+0x50>
   29d04:	1c000d04 	addi	r16,r3,52
   29d08:	1c000c15 	stw	r16,48(r3)
   29d0c:	80800117 	ldw	r2,4(r16)
   29d10:	00c007c4 	movi	r3,31
   29d14:	1880110e 	bge	r3,r2,29d5c <__register_exitproc+0xa0>
   29d18:	00800034 	movhi	r2,0
   29d1c:	10800004 	addi	r2,r2,0
   29d20:	1000021e 	bne	r2,zero,29d2c <__register_exitproc+0x70>
   29d24:	00bfffc4 	movi	r2,-1
   29d28:	00003106 	br	29df0 <__register_exitproc+0x134>
   29d2c:	01002304 	movi	r4,140
   29d30:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   29d34:	1021883a 	mov	r16,r2
   29d38:	103ffa26 	beq	r2,zero,29d24 <__alt_data_end+0xfffe9d24>
   29d3c:	10000115 	stw	zero,4(r2)
   29d40:	a0800017 	ldw	r2,0(r20)
   29d44:	10c00c17 	ldw	r3,48(r2)
   29d48:	80c00015 	stw	r3,0(r16)
   29d4c:	14000c15 	stw	r16,48(r2)
   29d50:	80002215 	stw	zero,136(r16)
   29d54:	a8001d26 	beq	r21,zero,29dcc <__register_exitproc+0x110>
   29d58:	00000606 	br	29d74 <__register_exitproc+0xb8>
   29d5c:	a8001b26 	beq	r21,zero,29dcc <__register_exitproc+0x110>
   29d60:	80802217 	ldw	r2,136(r16)
   29d64:	1000091e 	bne	r2,zero,29d8c <__register_exitproc+0xd0>
   29d68:	00800034 	movhi	r2,0
   29d6c:	10800004 	addi	r2,r2,0
   29d70:	103fec26 	beq	r2,zero,29d24 <__alt_data_end+0xfffe9d24>
   29d74:	01004204 	movi	r4,264
   29d78:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   29d7c:	103fe926 	beq	r2,zero,29d24 <__alt_data_end+0xfffe9d24>
   29d80:	10004015 	stw	zero,256(r2)
   29d84:	10004115 	stw	zero,260(r2)
   29d88:	80802215 	stw	r2,136(r16)
   29d8c:	81400117 	ldw	r5,4(r16)
   29d90:	01000044 	movi	r4,1
   29d94:	2947883a 	add	r3,r5,r5
   29d98:	18c7883a 	add	r3,r3,r3
   29d9c:	10c7883a 	add	r3,r2,r3
   29da0:	1cc00015 	stw	r19,0(r3)
   29da4:	2148983a 	sll	r4,r4,r5
   29da8:	11404017 	ldw	r5,256(r2)
   29dac:	290ab03a 	or	r5,r5,r4
   29db0:	11404015 	stw	r5,256(r2)
   29db4:	1c802015 	stw	r18,128(r3)
   29db8:	00c00084 	movi	r3,2
   29dbc:	a8c0031e 	bne	r21,r3,29dcc <__register_exitproc+0x110>
   29dc0:	10c04117 	ldw	r3,260(r2)
   29dc4:	1908b03a 	or	r4,r3,r4
   29dc8:	11004115 	stw	r4,260(r2)
   29dcc:	80800117 	ldw	r2,4(r16)
   29dd0:	10c00044 	addi	r3,r2,1
   29dd4:	10800084 	addi	r2,r2,2
   29dd8:	1085883a 	add	r2,r2,r2
   29ddc:	1085883a 	add	r2,r2,r2
   29de0:	80c00115 	stw	r3,4(r16)
   29de4:	80a1883a 	add	r16,r16,r2
   29de8:	84400015 	stw	r17,0(r16)
   29dec:	0005883a 	mov	r2,zero
   29df0:	dfc00617 	ldw	ra,24(sp)
   29df4:	dd400517 	ldw	r21,20(sp)
   29df8:	dd000417 	ldw	r20,16(sp)
   29dfc:	dcc00317 	ldw	r19,12(sp)
   29e00:	dc800217 	ldw	r18,8(sp)
   29e04:	dc400117 	ldw	r17,4(sp)
   29e08:	dc000017 	ldw	r16,0(sp)
   29e0c:	dec00704 	addi	sp,sp,28
   29e10:	f800283a 	ret

00029e14 <__call_exitprocs>:
   29e14:	defff504 	addi	sp,sp,-44
   29e18:	dd000515 	stw	r20,20(sp)
   29e1c:	050000f4 	movhi	r20,3
   29e20:	dc800315 	stw	r18,12(sp)
   29e24:	dfc00a15 	stw	ra,40(sp)
   29e28:	df000915 	stw	fp,36(sp)
   29e2c:	ddc00815 	stw	r23,32(sp)
   29e30:	dd800715 	stw	r22,28(sp)
   29e34:	dd400615 	stw	r21,24(sp)
   29e38:	dcc00415 	stw	r19,16(sp)
   29e3c:	dc400215 	stw	r17,8(sp)
   29e40:	dc000115 	stw	r16,4(sp)
   29e44:	d9000015 	stw	r4,0(sp)
   29e48:	2825883a 	mov	r18,r5
   29e4c:	a53f4604 	addi	r20,r20,-744
   29e50:	a4400017 	ldw	r17,0(r20)
   29e54:	8cc00c17 	ldw	r19,48(r17)
   29e58:	8c400c04 	addi	r17,r17,48
   29e5c:	98004526 	beq	r19,zero,29f74 <__call_exitprocs+0x160>
   29e60:	9c000117 	ldw	r16,4(r19)
   29e64:	00900034 	movhi	r2,16384
   29e68:	10bfffc4 	addi	r2,r2,-1
   29e6c:	9d402217 	ldw	r21,136(r19)
   29e70:	85bfffc4 	addi	r22,r16,-1
   29e74:	80a1883a 	add	r16,r16,r2
   29e78:	8421883a 	add	r16,r16,r16
   29e7c:	8421883a 	add	r16,r16,r16
   29e80:	ac2f883a 	add	r23,r21,r16
   29e84:	84000204 	addi	r16,r16,8
   29e88:	9c21883a 	add	r16,r19,r16
   29e8c:	b0002716 	blt	r22,zero,29f2c <__call_exitprocs+0x118>
   29e90:	90000726 	beq	r18,zero,29eb0 <__call_exitprocs+0x9c>
   29e94:	a800041e 	bne	r21,zero,29ea8 <__call_exitprocs+0x94>
   29e98:	b5bfffc4 	addi	r22,r22,-1
   29e9c:	bdffff04 	addi	r23,r23,-4
   29ea0:	843fff04 	addi	r16,r16,-4
   29ea4:	003ff906 	br	29e8c <__alt_data_end+0xfffe9e8c>
   29ea8:	b9002017 	ldw	r4,128(r23)
   29eac:	913ffa1e 	bne	r18,r4,29e98 <__alt_data_end+0xfffe9e98>
   29eb0:	99000117 	ldw	r4,4(r19)
   29eb4:	82000017 	ldw	r8,0(r16)
   29eb8:	213fffc4 	addi	r4,r4,-1
   29ebc:	b100021e 	bne	r22,r4,29ec8 <__call_exitprocs+0xb4>
   29ec0:	9d800115 	stw	r22,4(r19)
   29ec4:	00000106 	br	29ecc <__call_exitprocs+0xb8>
   29ec8:	80000015 	stw	zero,0(r16)
   29ecc:	403ff226 	beq	r8,zero,29e98 <__alt_data_end+0xfffe9e98>
   29ed0:	9f000117 	ldw	fp,4(r19)
   29ed4:	a8000526 	beq	r21,zero,29eec <__call_exitprocs+0xd8>
   29ed8:	00800044 	movi	r2,1
   29edc:	1592983a 	sll	r9,r2,r22
   29ee0:	a9404017 	ldw	r5,256(r21)
   29ee4:	494a703a 	and	r5,r9,r5
   29ee8:	2800021e 	bne	r5,zero,29ef4 <__call_exitprocs+0xe0>
   29eec:	403ee83a 	callr	r8
   29ef0:	00000906 	br	29f18 <__call_exitprocs+0x104>
   29ef4:	a9004117 	ldw	r4,260(r21)
   29ef8:	4908703a 	and	r4,r9,r4
   29efc:	2000041e 	bne	r4,zero,29f10 <__call_exitprocs+0xfc>
   29f00:	b9400017 	ldw	r5,0(r23)
   29f04:	d9000017 	ldw	r4,0(sp)
   29f08:	403ee83a 	callr	r8
   29f0c:	00000206 	br	29f18 <__call_exitprocs+0x104>
   29f10:	b9000017 	ldw	r4,0(r23)
   29f14:	403ee83a 	callr	r8
   29f18:	99000117 	ldw	r4,4(r19)
   29f1c:	e13fcc1e 	bne	fp,r4,29e50 <__alt_data_end+0xfffe9e50>
   29f20:	89000017 	ldw	r4,0(r17)
   29f24:	993fdc26 	beq	r19,r4,29e98 <__alt_data_end+0xfffe9e98>
   29f28:	003fc906 	br	29e50 <__alt_data_end+0xfffe9e50>
   29f2c:	00800034 	movhi	r2,0
   29f30:	10800004 	addi	r2,r2,0
   29f34:	10000f26 	beq	r2,zero,29f74 <__call_exitprocs+0x160>
   29f38:	99400117 	ldw	r5,4(r19)
   29f3c:	99000017 	ldw	r4,0(r19)
   29f40:	2800091e 	bne	r5,zero,29f68 <__call_exitprocs+0x154>
   29f44:	20000826 	beq	r4,zero,29f68 <__call_exitprocs+0x154>
   29f48:	89000015 	stw	r4,0(r17)
   29f4c:	a8000226 	beq	r21,zero,29f58 <__call_exitprocs+0x144>
   29f50:	a809883a 	mov	r4,r21
   29f54:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   29f58:	9809883a 	mov	r4,r19
   29f5c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   29f60:	8cc00017 	ldw	r19,0(r17)
   29f64:	003fbd06 	br	29e5c <__alt_data_end+0xfffe9e5c>
   29f68:	9823883a 	mov	r17,r19
   29f6c:	2027883a 	mov	r19,r4
   29f70:	003fba06 	br	29e5c <__alt_data_end+0xfffe9e5c>
   29f74:	dfc00a17 	ldw	ra,40(sp)
   29f78:	df000917 	ldw	fp,36(sp)
   29f7c:	ddc00817 	ldw	r23,32(sp)
   29f80:	dd800717 	ldw	r22,28(sp)
   29f84:	dd400617 	ldw	r21,24(sp)
   29f88:	dd000517 	ldw	r20,20(sp)
   29f8c:	dcc00417 	ldw	r19,16(sp)
   29f90:	dc800317 	ldw	r18,12(sp)
   29f94:	dc400217 	ldw	r17,8(sp)
   29f98:	dc000117 	ldw	r16,4(sp)
   29f9c:	dec00b04 	addi	sp,sp,44
   29fa0:	f800283a 	ret

00029fa4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   29fa4:	defffd04 	addi	sp,sp,-12
   29fa8:	df000215 	stw	fp,8(sp)
   29fac:	df000204 	addi	fp,sp,8
   29fb0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   29fb4:	0001883a 	nop
   29fb8:	e0bfff17 	ldw	r2,-4(fp)
   29fbc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   29fc0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   29fc4:	10000226 	beq	r2,zero,29fd0 <_exit+0x2c>
    ALT_SIM_FAIL();
   29fc8:	002af070 	cmpltui	zero,zero,43969
   29fcc:	00000106 	br	29fd4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   29fd0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   29fd4:	003fff06 	br	29fd4 <__alt_data_end+0xfffe9fd4>
